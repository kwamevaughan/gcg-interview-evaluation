{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/Apple/Documents/Projects/Clients/GCC%20Internal%20Tools/gcg-interview-evaluation/src/components/EditorComponent.js"],"sourcesContent":["// src/components/EditorComponent.js\n\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport EditorJS from '@editorjs/editorjs';\nimport Header from '@editorjs/header';\nimport List from '@editorjs/list';\nimport Paragraph from '@editorjs/paragraph';\nimport toast from \"react-hot-toast\";\n\nexport default function EditorComponent({ emailData, setEmailData, setIsSaving, mode }) {\n    const editorRef = useRef(null);\n    const isMounted = useRef(false); // Track initial mount\n\n    useEffect(() => {\n        if (!isMounted.current) {\n            initializeEditor();\n            isMounted.current = true;\n        }\n\n        return () => {\n            cleanupEditor();\n        };\n    }, []); // Empty dependency array to run only once on mount\n\n    const initializeEditor = () => {\n        console.log(\"Initializing EditorJS with body:\", emailData.body);\n\n        const holderElement = document.getElementById(\"editorjs\");\n        if (!holderElement) {\n            console.error(\"Element with ID 'editorjs' is missing.\");\n            return;\n        }\n\n        cleanupEditor();\n\n        try {\n            editorRef.current = new EditorJS({\n                holder: \"editorjs\",\n                tools: {\n                    header: { class: Header, inlineToolbar: true },\n                    list: { class: List, inlineToolbar: true },\n                    paragraph: {\n                        class: Paragraph,\n                        inlineToolbar: true,\n                        config: {\n                            preserveBlank: true, // Preserve blank lines\n                        },\n                    },\n                },\n                data: {\n                    blocks: emailData.body\n                        ? parseHtmlToBlocks(emailData.body)\n                        : [\n                            {\n                                type: \"paragraph\",\n                                data: { text: \"Start typing your email here...\" },\n                            },\n                        ],\n                },\n                onChange: async () => {\n                    await handleEditorChange();\n                },\n            });\n            console.log(\"EditorJS initialized successfully.\");\n        } catch (error) {\n            console.error(\"Error initializing EditorJS:\", error);\n            toast.error(\"Failed to load email editor. Please try again.\");\n        }\n    };\n\n    const cleanupEditor = () => {\n        if (editorRef.current && typeof editorRef.current.destroy === \"function\") {\n            try {\n                editorRef.current.destroy();\n                editorRef.current = null;\n                console.log(\"EditorJS instance destroyed.\");\n            } catch (error) {\n                console.error(\"Error destroying EditorJS instance:\", error);\n            }\n        }\n    };\n\n    const parseHtmlToBlocks = (html) => {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n        const paragraphs = doc.querySelectorAll(\"p\");\n        const blocks = Array.from(paragraphs).map(p => ({\n            type: \"paragraph\",\n            data: { text: p.innerHTML || p.textContent },\n        }));\n        return blocks.length > 0 ? blocks : [\n            {\n                type: \"paragraph\",\n                data: { text: html || \"Start typing your email here...\" },\n            },\n        ];\n    };\n\n    const handleEditorChange = async () => {\n        if (!editorRef.current) return;\n\n        try {\n            setIsSaving(true);\n            const content = await editorRef.current.save();\n            console.log(\"Editor content saved:\", content);\n\n            const html = content.blocks\n                .map((block) => {\n                    switch (block.type) {\n                        case \"header\":\n                            return `<h${block.data.level}>${block.data.text}</h${block.data.level}>`;\n                        case \"list\":\n                            const items = block.data.items.map((item) => `<li>${item}</li>`).join(\"\");\n                            return block.data.style === \"ordered\" ? `<ol>${items}</ol>` : `<ul>${items}</ul>`;\n                        case \"paragraph\":\n                            return `<p>${block.data.text || \"\"}</p>`;\n                        default:\n                            return \"\";\n                    }\n                })\n                .join(\"\\n\");\n            setEmailData((prev) => ({ ...prev, body: html }));\n            setIsSaving(false);\n        } catch (error) {\n            console.error(\"Error saving content from EditorJS:\", error);\n            setIsSaving(false);\n            toast.error(\"Error saving email content.\");\n        }\n    };\n\n    return (\n        <div id=\"editorjs\" className={`border rounded-lg p-2 min-h-[200px] ${mode === \"dark\" ? \"border-gray-600 bg-gray-700\" : \"\"}`}></div>\n    );\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}