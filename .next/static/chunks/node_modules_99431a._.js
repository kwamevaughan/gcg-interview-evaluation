(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_99431a._.js", {

"[project]/node_modules/next/dist/compiled/process/browser.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
(function() {
    var e = {
        229: function(e) {
            var t = e.exports = {};
            var r;
            var n;
            function defaultSetTimout() {
                throw new Error("setTimeout has not been defined");
            }
            function defaultClearTimeout() {
                throw new Error("clearTimeout has not been defined");
            }
            (function() {
                try {
                    if (typeof setTimeout === "function") {
                        r = setTimeout;
                    } else {
                        r = defaultSetTimout;
                    }
                } catch (e) {
                    r = defaultSetTimout;
                }
                try {
                    if (typeof clearTimeout === "function") {
                        n = clearTimeout;
                    } else {
                        n = defaultClearTimeout;
                    }
                } catch (e) {
                    n = defaultClearTimeout;
                }
            })();
            function runTimeout(e) {
                if (r === setTimeout) {
                    return setTimeout(e, 0);
                }
                if ((r === defaultSetTimout || !r) && setTimeout) {
                    r = setTimeout;
                    return setTimeout(e, 0);
                }
                try {
                    return r(e, 0);
                } catch (t) {
                    try {
                        return r.call(null, e, 0);
                    } catch (t) {
                        return r.call(this, e, 0);
                    }
                }
            }
            function runClearTimeout(e) {
                if (n === clearTimeout) {
                    return clearTimeout(e);
                }
                if ((n === defaultClearTimeout || !n) && clearTimeout) {
                    n = clearTimeout;
                    return clearTimeout(e);
                }
                try {
                    return n(e);
                } catch (t) {
                    try {
                        return n.call(null, e);
                    } catch (t) {
                        return n.call(this, e);
                    }
                }
            }
            var i = [];
            var o = false;
            var u;
            var a = -1;
            function cleanUpNextTick() {
                if (!o || !u) {
                    return;
                }
                o = false;
                if (u.length) {
                    i = u.concat(i);
                } else {
                    a = -1;
                }
                if (i.length) {
                    drainQueue();
                }
            }
            function drainQueue() {
                if (o) {
                    return;
                }
                var e = runTimeout(cleanUpNextTick);
                o = true;
                var t = i.length;
                while(t){
                    u = i;
                    i = [];
                    while(++a < t){
                        if (u) {
                            u[a].run();
                        }
                    }
                    a = -1;
                    t = i.length;
                }
                u = null;
                o = false;
                runClearTimeout(e);
            }
            t.nextTick = function(e) {
                var t = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for(var r = 1; r < arguments.length; r++){
                        t[r - 1] = arguments[r];
                    }
                }
                i.push(new Item(e, t));
                if (i.length === 1 && !o) {
                    runTimeout(drainQueue);
                }
            };
            function Item(e, t) {
                this.fun = e;
                this.array = t;
            }
            Item.prototype.run = function() {
                this.fun.apply(null, this.array);
            };
            t.title = "browser";
            t.browser = true;
            t.env = {};
            t.argv = [];
            t.version = "";
            t.versions = {};
            function noop() {}
            t.on = noop;
            t.addListener = noop;
            t.once = noop;
            t.off = noop;
            t.removeListener = noop;
            t.removeAllListeners = noop;
            t.emit = noop;
            t.prependListener = noop;
            t.prependOnceListener = noop;
            t.listeners = function(e) {
                return [];
            };
            t.binding = function(e) {
                throw new Error("process.binding is not supported");
            };
            t.cwd = function() {
                return "/";
            };
            t.chdir = function(e) {
                throw new Error("process.chdir is not supported");
            };
            t.umask = function() {
                return 0;
            };
        }
    };
    var t = {};
    function __nccwpck_require__(r) {
        var n = t[r];
        if (n !== undefined) {
            return n.exports;
        }
        var i = t[r] = {
            exports: {}
        };
        var o = true;
        try {
            e[r](i, i.exports, __nccwpck_require__);
            o = false;
        } finally{
            if (o) delete t[r];
        }
        return i.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
    var r = __nccwpck_require__(229);
    module.exports = r;
})();
}}),
"[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var _global_process, _global_process1;
module.exports = ((_global_process = global.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = global.process) == null ? void 0 : _global_process1.env) === 'object' ? global.process : __turbopack_require__("[project]/node_modules/next/dist/compiled/process/browser.js [client] (ecmascript)"); //# sourceMappingURL=process.js.map
}}),
"[project]/node_modules/react/cjs/react.development.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"use strict";
"production" !== ("TURBOPACK compile-time value", "development") && function() {
    function defineDeprecationWarning(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                console.warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
            }
        });
    }
    function getIteratorFn(maybeIterable) {
        if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
        return "function" === typeof maybeIterable ? maybeIterable : null;
    }
    function warnNoop(publicInstance, callerName) {
        publicInstance = (publicInstance = publicInstance.constructor) && (publicInstance.displayName || publicInstance.name) || "ReactClass";
        var warningKey = publicInstance + "." + callerName;
        didWarnStateUpdateForUnmountedComponent[warningKey] || (console.error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, publicInstance), didWarnStateUpdateForUnmountedComponent[warningKey] = !0);
    }
    function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    function ComponentDummy() {}
    function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    function testStringCoercion(value) {
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        try {
            testStringCoercion(value);
            var JSCompiler_inline_result = !1;
        } catch (e) {
            JSCompiler_inline_result = !0;
        }
        if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(JSCompiler_inline_result, "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", JSCompiler_inline_result$jscomp$0);
            return testStringCoercion(value);
        }
    }
    function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE$2 ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if ("object" === typeof type) switch("number" === typeof type.tag && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof){
            case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
            case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                    return getComponentNameFromType(type(innerType));
                } catch (x) {}
        }
        return null;
    }
    function isValidElementType(type) {
        return "string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE$1 || void 0 !== type.getModuleId) ? !0 : !1;
    }
    function disabledLog() {}
    function disableLogs() {
        if (0 === disabledDepth) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
                configurable: !0,
                enumerable: !0,
                value: disabledLog,
                writable: !0
            };
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (0 === disabledDepth) {
            var props = {
                configurable: !0,
                enumerable: !0,
                writable: !0
            };
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        }
        0 > disabledDepth && console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    function describeBuiltInComponentFrame(name) {
        if (void 0 === prefix) try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
            suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
        }
        return "\n" + prefix + name + suffix;
    }
    function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (void 0 !== frame) return frame;
        reentry = !0;
        frame = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher = null;
        previousDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = null;
        disableLogs();
        try {
            var RunInRootFrame = {
                DetermineComponentFrameRoot: function() {
                    try {
                        if (construct) {
                            var Fake = function() {
                                throw Error();
                            };
                            Object.defineProperty(Fake.prototype, "props", {
                                set: function() {
                                    throw Error();
                                }
                            });
                            if ("object" === typeof Reflect && Reflect.construct) {
                                try {
                                    Reflect.construct(Fake, []);
                                } catch (x) {
                                    var control = x;
                                }
                                Reflect.construct(fn, [], Fake);
                            } else {
                                try {
                                    Fake.call();
                                } catch (x$0) {
                                    control = x$0;
                                }
                                fn.call(Fake.prototype);
                            }
                        } else {
                            try {
                                throw Error();
                            } catch (x$1) {
                                control = x$1;
                            }
                            (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {});
                        }
                    } catch (sample) {
                        if (sample && control && "string" === typeof sample.stack) return [
                            sample.stack,
                            control.stack
                        ];
                    }
                    return [
                        null,
                        null
                    ];
                }
            };
            RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
            namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", {
                value: "DetermineComponentFrameRoot"
            });
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
                var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
                for(_RunInRootFrame$Deter = namePropDescriptor = 0; namePropDescriptor < sampleLines.length && !sampleLines[namePropDescriptor].includes("DetermineComponentFrameRoot");)namePropDescriptor++;
                for(; _RunInRootFrame$Deter < controlLines.length && !controlLines[_RunInRootFrame$Deter].includes("DetermineComponentFrameRoot");)_RunInRootFrame$Deter++;
                if (namePropDescriptor === sampleLines.length || _RunInRootFrame$Deter === controlLines.length) for(namePropDescriptor = sampleLines.length - 1, _RunInRootFrame$Deter = controlLines.length - 1; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter && sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter];)_RunInRootFrame$Deter--;
                for(; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter; namePropDescriptor--, _RunInRootFrame$Deter--)if (sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                    if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
                        do if (namePropDescriptor--, _RunInRootFrame$Deter--, 0 > _RunInRootFrame$Deter || sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                            var _frame = "\n" + sampleLines[namePropDescriptor].replace(" at new ", " at ");
                            fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName));
                            "function" === typeof fn && componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                        while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter)
                    }
                    break;
                }
            }
        } finally{
            reentry = !1, ReactSharedInternals.H = previousDispatcher, reenableLogs(), Error.prepareStackTrace = frame;
        }
        sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(sampleLines) : "";
        "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
        return sampleLines;
    }
    function describeUnknownElementTypeFrameInDEV(type) {
        if (null == type) return "";
        if ("function" === typeof type) {
            var prototype = type.prototype;
            return describeNativeComponentFrame(type, !(!prototype || !prototype.isReactComponent));
        }
        if ("string" === typeof type) return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if ("object" === typeof type) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return type = describeNativeComponentFrame(type.render, !1), type;
            case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type);
            case REACT_LAZY_TYPE:
                prototype = type._payload;
                type = type._init;
                try {
                    return describeUnknownElementTypeFrameInDEV(type(prototype));
                } catch (x) {}
        }
        return "";
    }
    function getOwner() {
        var dispatcher = ReactSharedInternals.A;
        return null === dispatcher ? null : dispatcher.getOwner();
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return !1;
        }
        return void 0 !== config.key;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName));
        }
        warnAboutAccessingKey.isReactWarning = !0;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
        });
    }
    function elementRefGetterWithDeprecationWarning() {
        var componentName = getComponentNameFromType(this.type);
        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = !0, console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."));
        componentName = this.props.ref;
        return void 0 !== componentName ? componentName : null;
    }
    function ReactElement(type, key, self, source, owner, props) {
        self = props.ref;
        type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type,
            key: key,
            props: props,
            _owner: owner
        };
        null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, "ref", {
            enumerable: !1,
            get: elementRefGetterWithDeprecationWarning
        }) : Object.defineProperty(type, "ref", {
            enumerable: !1,
            value: null
        });
        type._store = {};
        Object.defineProperty(type._store, "validated", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: 0
        });
        Object.defineProperty(type, "_debugInfo", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: null
        });
        Object.freeze && (Object.freeze(type.props), Object.freeze(type));
        return type;
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        newKey = ReactElement(oldElement.type, newKey, void 0, void 0, oldElement._owner, oldElement.props);
        newKey._store.validated = oldElement._store.validated;
        return newKey;
    }
    function validateChildKeys(node, parentType) {
        if ("object" === typeof node && node && node.$$typeof !== REACT_CLIENT_REFERENCE) {
            if (isArrayImpl(node)) for(var i = 0; i < node.length; i++){
                var child = node[i];
                isValidElement(child) && validateExplicitKey(child, parentType);
            }
            else if (isValidElement(node)) node._store && (node._store.validated = 1);
            else if (i = getIteratorFn(node), "function" === typeof i && i !== node.entries && (i = i.call(node), i !== node)) for(; !(node = i.next()).done;)isValidElement(node.value) && validateExplicitKey(node.value, parentType);
        }
    }
    function isValidElement(object) {
        return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function validateExplicitKey(element, parentType) {
        if (element._store && !element._store.validated && null == element.key && (element._store.validated = 1, parentType = getCurrentComponentErrorInfo(parentType), !ownerHasKeyUseWarning[parentType])) {
            ownerHasKeyUseWarning[parentType] = !0;
            var childOwner = "";
            element && null != element._owner && element._owner !== getOwner() && (childOwner = null, "number" === typeof element._owner.tag ? childOwner = getComponentNameFromType(element._owner.type) : "string" === typeof element._owner.name && (childOwner = element._owner.name), childOwner = " It was passed a child from " + childOwner + ".");
            var prevGetCurrentStack = ReactSharedInternals.getCurrentStack;
            ReactSharedInternals.getCurrentStack = function() {
                var stack = describeUnknownElementTypeFrameInDEV(element.type);
                prevGetCurrentStack && (stack += prevGetCurrentStack() || "");
                return stack;
            };
            console.error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.', parentType, childOwner);
            ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
        }
    }
    function getCurrentComponentErrorInfo(parentType) {
        var info = "", owner = getOwner();
        owner && (owner = getComponentNameFromType(owner.type)) && (info = "\n\nCheck the render method of `" + owner + "`.");
        info || (parentType = getComponentNameFromType(parentType)) && (info = "\n\nCheck the top-level render call using <" + parentType + ">.");
        return info;
    }
    function escape(key) {
        var escaperLookup = {
            "=": "=0",
            ":": "=2"
        };
        return "$" + key.replace(/[=:]/g, function(match) {
            return escaperLookup[match];
        });
    }
    function getElementKey(element, index) {
        return "object" === typeof element && null !== element && null != element.key ? (checkKeyStringCoercion(element.key), escape("" + element.key)) : index.toString(36);
    }
    function noop$1() {}
    function resolveThenable(thenable) {
        switch(thenable.status){
            case "fulfilled":
                return thenable.value;
            case "rejected":
                throw thenable.reason;
            default:
                switch("string" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenable.status = "pending", thenable.then(function(fulfilledValue) {
                    "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
                }, function(error) {
                    "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
                })), thenable.status){
                    case "fulfilled":
                        return thenable.value;
                    case "rejected":
                        throw thenable.reason;
                }
        }
        throw thenable;
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if ("undefined" === type || "boolean" === type) children = null;
        var invokeCallback = !1;
        if (null === children) invokeCallback = !0;
        else switch(type){
            case "bigint":
            case "string":
            case "number":
                invokeCallback = !0;
                break;
            case "object":
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = !0;
                        break;
                    case REACT_LAZY_TYPE:
                        return invokeCallback = children._init, mapIntoArray(invokeCallback(children._payload), array, escapedPrefix, nameSoFar, callback);
                }
        }
        if (invokeCallback) {
            invokeCallback = children;
            callback = callback(invokeCallback);
            var childKey = "" === nameSoFar ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
            isArrayImpl(callback) ? (escapedPrefix = "", null != childKey && (escapedPrefix = childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
                return c;
            })) : null != callback && (isValidElement(callback) && (null != callback.key && (invokeCallback && invokeCallback.key === callback.key || checkKeyStringCoercion(callback.key)), escapedPrefix = cloneAndReplaceKey(callback, escapedPrefix + (null == callback.key || invokeCallback && invokeCallback.key === callback.key ? "" : ("" + callback.key).replace(userProvidedKeyEscapeRegex, "$&/") + "/") + childKey), "" !== nameSoFar && null != invokeCallback && isValidElement(invokeCallback) && null == invokeCallback.key && invokeCallback._store && !invokeCallback._store.validated && (escapedPrefix._store.validated = 2), callback = escapedPrefix), array.push(callback));
            return 1;
        }
        invokeCallback = 0;
        childKey = "" === nameSoFar ? "." : nameSoFar + ":";
        if (isArrayImpl(children)) for(var i = 0; i < children.length; i++)nameSoFar = children[i], type = childKey + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);
        else if (i = getIteratorFn(children), "function" === typeof i) for(i === children.entries && (didWarnAboutMaps || console.warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0), children = i.call(children), i = 0; !(nameSoFar = children.next()).done;)nameSoFar = nameSoFar.value, type = childKey + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);
        else if ("object" === type) {
            if ("function" === typeof children.then) return mapIntoArray(resolveThenable(children), array, escapedPrefix, nameSoFar, callback);
            array = String(children);
            throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === array ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead.");
        }
        return invokeCallback;
    }
    function mapChildren(children, func, context) {
        if (null == children) return children;
        var result = [], count = 0;
        mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    function lazyInitializer(payload) {
        if (-1 === payload._status) {
            var ctor = payload._result;
            ctor = ctor();
            ctor.then(function(moduleObject) {
                if (0 === payload._status || -1 === payload._status) payload._status = 1, payload._result = moduleObject;
            }, function(error) {
                if (0 === payload._status || -1 === payload._status) payload._status = 2, payload._result = error;
            });
            -1 === payload._status && (payload._status = 0, payload._result = ctor);
        }
        if (1 === payload._status) return ctor = payload._result, void 0 === ctor && console.error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", ctor), "default" in ctor || console.error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", ctor), ctor.default;
        throw payload._result;
    }
    function resolveDispatcher() {
        var dispatcher = ReactSharedInternals.H;
        null === dispatcher && console.error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    function noop() {}
    function enqueueTask(task) {
        if (null === enqueueTaskImpl) try {
            var requireString = ("require" + Math.random()).slice(0, 7);
            enqueueTaskImpl = (module && module[requireString]).call(module, "timers").setImmediate;
        } catch (_err) {
            enqueueTaskImpl = function(callback) {
                !1 === didWarnAboutMessageChannel && (didWarnAboutMessageChannel = !0, "undefined" === typeof MessageChannel && console.error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
            };
        }
        return enqueueTaskImpl(task);
    }
    function aggregateErrors(errors) {
        return 1 < errors.length && "function" === typeof AggregateError ? new AggregateError(errors) : errors[0];
    }
    function popActScope(prevActQueue, prevActScopeDepth) {
        prevActScopeDepth !== actScopeDepth - 1 && console.error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
        actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        var queue = ReactSharedInternals.actQueue;
        if (null !== queue) if (0 !== queue.length) try {
            flushActQueue(queue);
            enqueueTask(function() {
                return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            });
            return;
        } catch (error) {
            ReactSharedInternals.thrownErrors.push(error);
        }
        else ReactSharedInternals.actQueue = null;
        0 < ReactSharedInternals.thrownErrors.length ? (queue = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(queue)) : resolve(returnValue);
    }
    function flushActQueue(queue) {
        if (!isFlushing) {
            isFlushing = !0;
            var i = 0;
            try {
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do {
                        ReactSharedInternals.didUsePromise = !1;
                        var continuation = callback(!1);
                        if (null !== continuation) {
                            if (ReactSharedInternals.didUsePromise) {
                                queue[i] = callback;
                                queue.splice(0, i);
                                return;
                            }
                            callback = continuation;
                        } else break;
                    }while (1)
                }
                queue.length = 0;
            } catch (error) {
                queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error);
            } finally{
                isFlushing = !1;
            }
        }
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, didWarnStateUpdateForUnmountedComponent = {}, ReactNoopUpdateQueue = {
        isMounted: function() {
            return !1;
        },
        enqueueForceUpdate: function(publicInstance) {
            warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance) {
            warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance) {
            warnNoop(publicInstance, "setState");
        }
    }, assign = Object.assign, emptyObject = {};
    Object.freeze(emptyObject);
    Component.prototype.isReactComponent = {};
    Component.prototype.setState = function(partialState, callback) {
        if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState) throw Error("takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, "setState");
    };
    Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };
    var deprecatedAPIs = {
        isMounted: [
            "isMounted",
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            "replaceState",
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    }, fnName;
    for(fnName in deprecatedAPIs)deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    ComponentDummy.prototype = Component.prototype;
    deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
    deprecatedAPIs.constructor = PureComponent;
    assign(deprecatedAPIs, Component.prototype);
    deprecatedAPIs.isPureReactComponent = !0;
    var isArrayImpl = Array.isArray, REACT_CLIENT_REFERENCE$2 = Symbol.for("react.client.reference"), ReactSharedInternals = {
        H: null,
        A: null,
        T: null,
        S: null,
        actQueue: null,
        isBatchingLegacy: !1,
        didScheduleLegacyUpdate: !1,
        didUsePromise: !1,
        thrownErrors: [],
        getCurrentStack: null
    }, hasOwnProperty = Object.prototype.hasOwnProperty, REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference"), disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    disabledLog.__reactDisabledLog = !0;
    var prefix, suffix, reentry = !1;
    var componentFrameCache = new ("function" === typeof WeakMap ? WeakMap : Map)();
    var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
    var didWarnAboutElementRef = {};
    var ownerHasKeyUseWarning = {}, didWarnAboutMaps = !1, userProvidedKeyEscapeRegex = /\/+/g, reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
        if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
            var event = new window.ErrorEvent("error", {
                bubbles: !0,
                cancelable: !0,
                message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
                error: error
            });
            if (!window.dispatchEvent(event)) return;
        } else if ("object" === typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"] && "function" === typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"].emit) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"].emit("uncaughtException", error);
            return;
        }
        console.error(error);
    }, didWarnAboutMessageChannel = !1, enqueueTaskImpl = null, actScopeDepth = 0, didWarnNoAwaitAct = !1, isFlushing = !1, queueSeveralMicrotasks = "function" === typeof queueMicrotask ? function(callback) {
        queueMicrotask(function() {
            return queueMicrotask(callback);
        });
    } : enqueueTask;
    exports.Children = {
        map: mapChildren,
        forEach: function(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
                forEachFunc.apply(this, arguments);
            }, forEachContext);
        },
        count: function(children) {
            var n = 0;
            mapChildren(children, function() {
                n++;
            });
            return n;
        },
        toArray: function(children) {
            return mapChildren(children, function(child) {
                return child;
            }) || [];
        },
        only: function(children) {
            if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
            return children;
        }
    };
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
    exports.act = function(callback) {
        var prevActQueue = ReactSharedInternals.actQueue, prevActScopeDepth = actScopeDepth;
        actScopeDepth++;
        var queue = ReactSharedInternals.actQueue = null !== prevActQueue ? prevActQueue : [], didAwaitActCall = !1;
        try {
            var result = callback();
        } catch (error) {
            ReactSharedInternals.thrownErrors.push(error);
        }
        if (0 < ReactSharedInternals.thrownErrors.length) throw popActScope(prevActQueue, prevActScopeDepth), callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
        if (null !== result && "object" === typeof result && "function" === typeof result.then) {
            var thenable = result;
            queueSeveralMicrotasks(function() {
                didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = !0, console.error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
            });
            return {
                then: function(resolve, reject) {
                    didAwaitActCall = !0;
                    thenable.then(function(returnValue) {
                        popActScope(prevActQueue, prevActScopeDepth);
                        if (0 === prevActScopeDepth) {
                            try {
                                flushActQueue(queue), enqueueTask(function() {
                                    return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                                });
                            } catch (error$2) {
                                ReactSharedInternals.thrownErrors.push(error$2);
                            }
                            if (0 < ReactSharedInternals.thrownErrors.length) {
                                var _thrownError = aggregateErrors(ReactSharedInternals.thrownErrors);
                                ReactSharedInternals.thrownErrors.length = 0;
                                reject(_thrownError);
                            }
                        } else resolve(returnValue);
                    }, function(error) {
                        popActScope(prevActQueue, prevActScopeDepth);
                        0 < ReactSharedInternals.thrownErrors.length ? (error = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(error)) : reject(error);
                    });
                }
            };
        }
        var returnValue$jscomp$0 = result;
        popActScope(prevActQueue, prevActScopeDepth);
        0 === prevActScopeDepth && (flushActQueue(queue), 0 !== queue.length && queueSeveralMicrotasks(function() {
            didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = !0, console.error("A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"));
        }), ReactSharedInternals.actQueue = null);
        if (0 < ReactSharedInternals.thrownErrors.length) throw callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
        return {
            then: function(resolve, reject) {
                didAwaitActCall = !0;
                0 === prevActScopeDepth ? (ReactSharedInternals.actQueue = queue, enqueueTask(function() {
                    return recursivelyFlushAsyncActWork(returnValue$jscomp$0, resolve, reject);
                })) : resolve(returnValue$jscomp$0);
            }
        };
    };
    exports.cache = function(fn) {
        return function() {
            return fn.apply(null, arguments);
        };
    };
    exports.cloneElement = function(element, config, children) {
        if (null === element || void 0 === element) throw Error("The argument must be a React element, but you passed " + element + ".");
        var props = assign({}, element.props), key = element.key, owner = element._owner;
        if (null != config) {
            var JSCompiler_inline_result;
            a: {
                if (hasOwnProperty.call(config, "ref") && (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(config, "ref").get) && JSCompiler_inline_result.isReactWarning) {
                    JSCompiler_inline_result = !1;
                    break a;
                }
                JSCompiler_inline_result = void 0 !== config.ref;
            }
            JSCompiler_inline_result && (owner = getOwner());
            hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key);
            for(propName in config)!hasOwnProperty.call(config, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && void 0 === config.ref || (props[propName] = config[propName]);
        }
        var propName = arguments.length - 2;
        if (1 === propName) props.children = children;
        else if (1 < propName) {
            JSCompiler_inline_result = Array(propName);
            for(var i = 0; i < propName; i++)JSCompiler_inline_result[i] = arguments[i + 2];
            props.children = JSCompiler_inline_result;
        }
        props = ReactElement(element.type, key, void 0, void 0, owner, props);
        for(key = 2; key < arguments.length; key++)validateChildKeys(arguments[key], props.type);
        return props;
    };
    exports.createContext = function(defaultValue) {
        defaultValue = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
        };
        defaultValue.Provider = defaultValue;
        defaultValue.Consumer = {
            $$typeof: REACT_CONSUMER_TYPE,
            _context: defaultValue
        };
        defaultValue._currentRenderer = null;
        defaultValue._currentRenderer2 = null;
        return defaultValue;
    };
    exports.createElement = function(type, config, children) {
        if (isValidElementType(type)) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        else {
            i = "";
            if (void 0 === type || "object" === typeof type && null !== type && 0 === Object.keys(type).length) i += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            if (null === type) var typeString = "null";
            else isArrayImpl(type) ? typeString = "array" : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", i = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type;
            console.error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, i);
        }
        var propName;
        i = {};
        typeString = null;
        if (null != config) for(propName in didWarnAboutOldJSXRuntime || !("__self" in config) || "key" in config || (didWarnAboutOldJSXRuntime = !0, console.warn("Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform")), hasValidKey(config) && (checkKeyStringCoercion(config.key), typeString = "" + config.key), config)hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (i[propName] = config[propName]);
        var childrenLength = arguments.length - 2;
        if (1 === childrenLength) i.children = children;
        else if (1 < childrenLength) {
            for(var childArray = Array(childrenLength), _i = 0; _i < childrenLength; _i++)childArray[_i] = arguments[_i + 2];
            Object.freeze && Object.freeze(childArray);
            i.children = childArray;
        }
        if (type && type.defaultProps) for(propName in childrenLength = type.defaultProps, childrenLength)void 0 === i[propName] && (i[propName] = childrenLength[propName]);
        typeString && defineKeyPropWarningGetter(i, "function" === typeof type ? type.displayName || type.name || "Unknown" : type);
        return ReactElement(type, typeString, void 0, void 0, getOwner(), i);
    };
    exports.createRef = function() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    };
    exports.forwardRef = function(render) {
        null != render && render.$$typeof === REACT_MEMO_TYPE ? console.error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : "function" !== typeof render ? console.error("forwardRef requires a render function but was given %s.", null === render ? "null" : typeof render) : 0 !== render.length && 2 !== render.length && console.error("forwardRef render functions accept exactly two parameters: props and ref. %s", 1 === render.length ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
        null != render && null != render.defaultProps && console.error("forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?");
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        }, ownName;
        Object.defineProperty(elementType, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                render.name || render.displayName || (Object.defineProperty(render, "name", {
                    value: name
                }), render.displayName = name);
            }
        });
        return elementType;
    };
    exports.isValidElement = isValidElement;
    exports.lazy = function(ctor) {
        return {
            $$typeof: REACT_LAZY_TYPE,
            _payload: {
                _status: -1,
                _result: ctor
            },
            _init: lazyInitializer
        };
    };
    exports.memo = function(type, compare) {
        isValidElementType(type) || console.error("memo: The first argument must be a component. Instead received: %s", null === type ? "null" : typeof type);
        compare = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: void 0 === compare ? null : compare
        };
        var ownName;
        Object.defineProperty(compare, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                type.name || type.displayName || (Object.defineProperty(type, "name", {
                    value: name
                }), type.displayName = name);
            }
        });
        return compare;
    };
    exports.startTransition = function(scope) {
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        currentTransition._updatedFibers = new Set();
        try {
            var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && returnValue.then(noop, reportGlobalError);
        } catch (error) {
            reportGlobalError(error);
        } finally{
            null === prevTransition && currentTransition._updatedFibers && (scope = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < scope && console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.")), ReactSharedInternals.T = prevTransition;
        }
    };
    exports.unstable_useCacheRefresh = function() {
        return resolveDispatcher().useCacheRefresh();
    };
    exports.use = function(usable) {
        return resolveDispatcher().use(usable);
    };
    exports.useActionState = function(action, initialState, permalink) {
        return resolveDispatcher().useActionState(action, initialState, permalink);
    };
    exports.useCallback = function(callback, deps) {
        return resolveDispatcher().useCallback(callback, deps);
    };
    exports.useContext = function(Context) {
        var dispatcher = resolveDispatcher();
        Context.$$typeof === REACT_CONSUMER_TYPE && console.error("Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?");
        return dispatcher.useContext(Context);
    };
    exports.useDebugValue = function(value, formatterFn) {
        return resolveDispatcher().useDebugValue(value, formatterFn);
    };
    exports.useDeferredValue = function(value, initialValue) {
        return resolveDispatcher().useDeferredValue(value, initialValue);
    };
    exports.useEffect = function(create, deps) {
        return resolveDispatcher().useEffect(create, deps);
    };
    exports.useId = function() {
        return resolveDispatcher().useId();
    };
    exports.useImperativeHandle = function(ref, create, deps) {
        return resolveDispatcher().useImperativeHandle(ref, create, deps);
    };
    exports.useInsertionEffect = function(create, deps) {
        return resolveDispatcher().useInsertionEffect(create, deps);
    };
    exports.useLayoutEffect = function(create, deps) {
        return resolveDispatcher().useLayoutEffect(create, deps);
    };
    exports.useMemo = function(create, deps) {
        return resolveDispatcher().useMemo(create, deps);
    };
    exports.useOptimistic = function(passthrough, reducer) {
        return resolveDispatcher().useOptimistic(passthrough, reducer);
    };
    exports.useReducer = function(reducer, initialArg, init) {
        return resolveDispatcher().useReducer(reducer, initialArg, init);
    };
    exports.useRef = function(initialValue) {
        return resolveDispatcher().useRef(initialValue);
    };
    exports.useState = function(initialState) {
        return resolveDispatcher().useState(initialState);
    };
    exports.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
        return resolveDispatcher().useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    };
    exports.useTransition = function() {
        return resolveDispatcher().useTransition();
    };
    exports.version = "19.0.0";
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
}();
}}),
"[project]/node_modules/react/index.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
'use strict';
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_require__("[project]/node_modules/react/cjs/react.development.js [client] (ecmascript)");
}
}}),
"[project]/node_modules/react/cjs/react-jsx-dev-runtime.development.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"use strict";
"production" !== ("TURBOPACK compile-time value", "development") && function() {
    function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE$2 ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if ("object" === typeof type) switch("number" === typeof type.tag && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof){
            case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
            case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                    return getComponentNameFromType(type(innerType));
                } catch (x) {}
        }
        return null;
    }
    function testStringCoercion(value) {
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        try {
            testStringCoercion(value);
            var JSCompiler_inline_result = !1;
        } catch (e) {
            JSCompiler_inline_result = !0;
        }
        if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(JSCompiler_inline_result, "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", JSCompiler_inline_result$jscomp$0);
            return testStringCoercion(value);
        }
    }
    function disabledLog() {}
    function disableLogs() {
        if (0 === disabledDepth) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
                configurable: !0,
                enumerable: !0,
                value: disabledLog,
                writable: !0
            };
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (0 === disabledDepth) {
            var props = {
                configurable: !0,
                enumerable: !0,
                writable: !0
            };
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        }
        0 > disabledDepth && console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    function describeBuiltInComponentFrame(name) {
        if (void 0 === prefix) try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
            suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
        }
        return "\n" + prefix + name + suffix;
    }
    function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (void 0 !== frame) return frame;
        reentry = !0;
        frame = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher = null;
        previousDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = null;
        disableLogs();
        try {
            var RunInRootFrame = {
                DetermineComponentFrameRoot: function() {
                    try {
                        if (construct) {
                            var Fake = function() {
                                throw Error();
                            };
                            Object.defineProperty(Fake.prototype, "props", {
                                set: function() {
                                    throw Error();
                                }
                            });
                            if ("object" === typeof Reflect && Reflect.construct) {
                                try {
                                    Reflect.construct(Fake, []);
                                } catch (x) {
                                    var control = x;
                                }
                                Reflect.construct(fn, [], Fake);
                            } else {
                                try {
                                    Fake.call();
                                } catch (x$0) {
                                    control = x$0;
                                }
                                fn.call(Fake.prototype);
                            }
                        } else {
                            try {
                                throw Error();
                            } catch (x$1) {
                                control = x$1;
                            }
                            (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {});
                        }
                    } catch (sample) {
                        if (sample && control && "string" === typeof sample.stack) return [
                            sample.stack,
                            control.stack
                        ];
                    }
                    return [
                        null,
                        null
                    ];
                }
            };
            RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
            namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", {
                value: "DetermineComponentFrameRoot"
            });
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
                var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
                for(_RunInRootFrame$Deter = namePropDescriptor = 0; namePropDescriptor < sampleLines.length && !sampleLines[namePropDescriptor].includes("DetermineComponentFrameRoot");)namePropDescriptor++;
                for(; _RunInRootFrame$Deter < controlLines.length && !controlLines[_RunInRootFrame$Deter].includes("DetermineComponentFrameRoot");)_RunInRootFrame$Deter++;
                if (namePropDescriptor === sampleLines.length || _RunInRootFrame$Deter === controlLines.length) for(namePropDescriptor = sampleLines.length - 1, _RunInRootFrame$Deter = controlLines.length - 1; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter && sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter];)_RunInRootFrame$Deter--;
                for(; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter; namePropDescriptor--, _RunInRootFrame$Deter--)if (sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                    if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
                        do if (namePropDescriptor--, _RunInRootFrame$Deter--, 0 > _RunInRootFrame$Deter || sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                            var _frame = "\n" + sampleLines[namePropDescriptor].replace(" at new ", " at ");
                            fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName));
                            "function" === typeof fn && componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                        while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter)
                    }
                    break;
                }
            }
        } finally{
            reentry = !1, ReactSharedInternals.H = previousDispatcher, reenableLogs(), Error.prepareStackTrace = frame;
        }
        sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(sampleLines) : "";
        "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
        return sampleLines;
    }
    function describeUnknownElementTypeFrameInDEV(type) {
        if (null == type) return "";
        if ("function" === typeof type) {
            var prototype = type.prototype;
            return describeNativeComponentFrame(type, !(!prototype || !prototype.isReactComponent));
        }
        if ("string" === typeof type) return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if ("object" === typeof type) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return type = describeNativeComponentFrame(type.render, !1), type;
            case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type);
            case REACT_LAZY_TYPE:
                prototype = type._payload;
                type = type._init;
                try {
                    return describeUnknownElementTypeFrameInDEV(type(prototype));
                } catch (x) {}
        }
        return "";
    }
    function getOwner() {
        var dispatcher = ReactSharedInternals.A;
        return null === dispatcher ? null : dispatcher.getOwner();
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return !1;
        }
        return void 0 !== config.key;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName));
        }
        warnAboutAccessingKey.isReactWarning = !0;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
        });
    }
    function elementRefGetterWithDeprecationWarning() {
        var componentName = getComponentNameFromType(this.type);
        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = !0, console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."));
        componentName = this.props.ref;
        return void 0 !== componentName ? componentName : null;
    }
    function ReactElement(type, key, self, source, owner, props) {
        self = props.ref;
        type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type,
            key: key,
            props: props,
            _owner: owner
        };
        null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, "ref", {
            enumerable: !1,
            get: elementRefGetterWithDeprecationWarning
        }) : Object.defineProperty(type, "ref", {
            enumerable: !1,
            value: null
        });
        type._store = {};
        Object.defineProperty(type._store, "validated", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: 0
        });
        Object.defineProperty(type, "_debugInfo", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: null
        });
        Object.freeze && (Object.freeze(type.props), Object.freeze(type));
        return type;
    }
    function jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self) {
        if ("string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE$1 || void 0 !== type.getModuleId)) {
            var children = config.children;
            if (void 0 !== children) if (isStaticChildren) if (isArrayImpl(children)) {
                for(isStaticChildren = 0; isStaticChildren < children.length; isStaticChildren++)validateChildKeys(children[isStaticChildren], type);
                Object.freeze && Object.freeze(children);
            } else console.error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else validateChildKeys(children, type);
        } else {
            children = "";
            if (void 0 === type || "object" === typeof type && null !== type && 0 === Object.keys(type).length) children += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            null === type ? isStaticChildren = "null" : isArrayImpl(type) ? isStaticChildren = "array" : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE ? (isStaticChildren = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", children = " Did you accidentally export a JSX literal instead of a component?") : isStaticChildren = typeof type;
            console.error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", isStaticChildren, children);
        }
        if (hasOwnProperty.call(config, "key")) {
            children = getComponentNameFromType(type);
            var keys = Object.keys(config).filter(function(k) {
                return "key" !== k;
            });
            isStaticChildren = 0 < keys.length ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
            didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}", console.error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', isStaticChildren, children, keys, children), didWarnAboutKeySpread[children + isStaticChildren] = !0);
        }
        children = null;
        void 0 !== maybeKey && (checkKeyStringCoercion(maybeKey), children = "" + maybeKey);
        hasValidKey(config) && (checkKeyStringCoercion(config.key), children = "" + config.key);
        if ("key" in config) {
            maybeKey = {};
            for(var propName in config)"key" !== propName && (maybeKey[propName] = config[propName]);
        } else maybeKey = config;
        children && defineKeyPropWarningGetter(maybeKey, "function" === typeof type ? type.displayName || type.name || "Unknown" : type);
        return ReactElement(type, children, self, source, getOwner(), maybeKey);
    }
    function validateChildKeys(node, parentType) {
        if ("object" === typeof node && node && node.$$typeof !== REACT_CLIENT_REFERENCE) {
            if (isArrayImpl(node)) for(var i = 0; i < node.length; i++){
                var child = node[i];
                isValidElement(child) && validateExplicitKey(child, parentType);
            }
            else if (isValidElement(node)) node._store && (node._store.validated = 1);
            else if (null === node || "object" !== typeof node ? i = null : (i = MAYBE_ITERATOR_SYMBOL && node[MAYBE_ITERATOR_SYMBOL] || node["@@iterator"], i = "function" === typeof i ? i : null), "function" === typeof i && i !== node.entries && (i = i.call(node), i !== node)) for(; !(node = i.next()).done;)isValidElement(node.value) && validateExplicitKey(node.value, parentType);
        }
    }
    function isValidElement(object) {
        return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function validateExplicitKey(element, parentType) {
        if (element._store && !element._store.validated && null == element.key && (element._store.validated = 1, parentType = getCurrentComponentErrorInfo(parentType), !ownerHasKeyUseWarning[parentType])) {
            ownerHasKeyUseWarning[parentType] = !0;
            var childOwner = "";
            element && null != element._owner && element._owner !== getOwner() && (childOwner = null, "number" === typeof element._owner.tag ? childOwner = getComponentNameFromType(element._owner.type) : "string" === typeof element._owner.name && (childOwner = element._owner.name), childOwner = " It was passed a child from " + childOwner + ".");
            var prevGetCurrentStack = ReactSharedInternals.getCurrentStack;
            ReactSharedInternals.getCurrentStack = function() {
                var stack = describeUnknownElementTypeFrameInDEV(element.type);
                prevGetCurrentStack && (stack += prevGetCurrentStack() || "");
                return stack;
            };
            console.error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.', parentType, childOwner);
            ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
        }
    }
    function getCurrentComponentErrorInfo(parentType) {
        var info = "", owner = getOwner();
        owner && (owner = getComponentNameFromType(owner.type)) && (info = "\n\nCheck the render method of `" + owner + "`.");
        info || (parentType = getComponentNameFromType(parentType)) && (info = "\n\nCheck the top-level render call using <" + parentType + ">.");
        return info;
    }
    var React = __turbopack_require__("[project]/node_modules/react/index.js [client] (ecmascript)"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, REACT_CLIENT_REFERENCE$2 = Symbol.for("react.client.reference"), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, assign = Object.assign, REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference"), isArrayImpl = Array.isArray, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    disabledLog.__reactDisabledLog = !0;
    var prefix, suffix, reentry = !1;
    var componentFrameCache = new ("function" === typeof WeakMap ? WeakMap : Map)();
    var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), specialPropKeyWarningShown;
    var didWarnAboutElementRef = {};
    var didWarnAboutKeySpread = {}, ownerHasKeyUseWarning = {};
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsxDEV = function(type, config, maybeKey, isStaticChildren, source, self) {
        return jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self);
    };
}();
}}),
"[project]/node_modules/react/jsx-dev-runtime.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
'use strict';
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_require__("[project]/node_modules/react/cjs/react-jsx-dev-runtime.development.js [client] (ecmascript)");
}
}}),
"[project]/node_modules/@iconify/react/dist/iconify.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Icon": (()=>Icon),
    "InlineIcon": (()=>InlineIcon),
    "_api": (()=>_api),
    "addAPIProvider": (()=>addAPIProvider),
    "addCollection": (()=>addCollection),
    "addIcon": (()=>addIcon),
    "buildIcon": (()=>iconToSVG),
    "calculateSize": (()=>calculateSize),
    "disableCache": (()=>disableCache),
    "enableCache": (()=>enableCache),
    "getIcon": (()=>getIcon),
    "iconExists": (()=>iconLoaded),
    "iconLoaded": (()=>iconLoaded),
    "listIcons": (()=>listIcons),
    "loadIcon": (()=>loadIcon),
    "loadIcons": (()=>loadIcons),
    "replaceIDs": (()=>replaceIDs),
    "setCustomIconLoader": (()=>setCustomIconLoader),
    "setCustomIconsLoader": (()=>setCustomIconsLoader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/react/index.js [client] (ecmascript)");
'use client';
;
const defaultIconDimensions = Object.freeze({
    left: 0,
    top: 0,
    width: 16,
    height: 16
});
const defaultIconTransformations = Object.freeze({
    rotate: 0,
    vFlip: false,
    hFlip: false
});
const defaultIconProps = Object.freeze({
    ...defaultIconDimensions,
    ...defaultIconTransformations
});
const defaultExtendedIconProps = Object.freeze({
    ...defaultIconProps,
    body: "",
    hidden: false
});
function mergeIconTransformations(obj1, obj2) {
    const result = {};
    if (!obj1.hFlip !== !obj2.hFlip) {
        result.hFlip = true;
    }
    if (!obj1.vFlip !== !obj2.vFlip) {
        result.vFlip = true;
    }
    const rotate = ((obj1.rotate || 0) + (obj2.rotate || 0)) % 4;
    if (rotate) {
        result.rotate = rotate;
    }
    return result;
}
function mergeIconData(parent, child) {
    const result = mergeIconTransformations(parent, child);
    for(const key in defaultExtendedIconProps){
        if (key in defaultIconTransformations) {
            if (key in parent && !(key in result)) {
                result[key] = defaultIconTransformations[key];
            }
        } else if (key in child) {
            result[key] = child[key];
        } else if (key in parent) {
            result[key] = parent[key];
        }
    }
    return result;
}
function getIconsTree(data, names) {
    const icons = data.icons;
    const aliases = data.aliases || /* @__PURE__ */ Object.create(null);
    const resolved = /* @__PURE__ */ Object.create(null);
    function resolve(name) {
        if (icons[name]) {
            return resolved[name] = [];
        }
        if (!(name in resolved)) {
            resolved[name] = null;
            const parent = aliases[name] && aliases[name].parent;
            const value = parent && resolve(parent);
            if (value) {
                resolved[name] = [
                    parent
                ].concat(value);
            }
        }
        return resolved[name];
    }
    Object.keys(icons).concat(Object.keys(aliases)).forEach(resolve);
    return resolved;
}
function internalGetIconData(data, name, tree) {
    const icons = data.icons;
    const aliases = data.aliases || /* @__PURE__ */ Object.create(null);
    let currentProps = {};
    function parse(name2) {
        currentProps = mergeIconData(icons[name2] || aliases[name2], currentProps);
    }
    parse(name);
    tree.forEach(parse);
    return mergeIconData(data, currentProps);
}
function parseIconSet(data, callback) {
    const names = [];
    if (typeof data !== "object" || typeof data.icons !== "object") {
        return names;
    }
    if (data.not_found instanceof Array) {
        data.not_found.forEach((name)=>{
            callback(name, null);
            names.push(name);
        });
    }
    const tree = getIconsTree(data);
    for(const name in tree){
        const item = tree[name];
        if (item) {
            callback(name, internalGetIconData(data, name, item));
            names.push(name);
        }
    }
    return names;
}
const optionalPropertyDefaults = {
    provider: "",
    aliases: {},
    not_found: {},
    ...defaultIconDimensions
};
function checkOptionalProps(item, defaults) {
    for(const prop in defaults){
        if (prop in item && typeof item[prop] !== typeof defaults[prop]) {
            return false;
        }
    }
    return true;
}
function quicklyValidateIconSet(obj) {
    if (typeof obj !== "object" || obj === null) {
        return null;
    }
    const data = obj;
    if (typeof data.prefix !== "string" || !obj.icons || typeof obj.icons !== "object") {
        return null;
    }
    if (!checkOptionalProps(obj, optionalPropertyDefaults)) {
        return null;
    }
    const icons = data.icons;
    for(const name in icons){
        const icon = icons[name];
        if (// Name cannot be empty
        !name || // Must have body
        typeof icon.body !== "string" || // Check other props
        !checkOptionalProps(icon, defaultExtendedIconProps)) {
            return null;
        }
    }
    const aliases = data.aliases || /* @__PURE__ */ Object.create(null);
    for(const name in aliases){
        const icon = aliases[name];
        const parent = icon.parent;
        if (// Name cannot be empty
        !name || // Parent must be set and point to existing icon
        typeof parent !== "string" || !icons[parent] && !aliases[parent] || // Check other props
        !checkOptionalProps(icon, defaultExtendedIconProps)) {
            return null;
        }
    }
    return data;
}
const matchIconName = /^[a-z0-9]+(-[a-z0-9]+)*$/;
const stringToIcon = (value, validate, allowSimpleName, provider = "")=>{
    const colonSeparated = value.split(":");
    if (value.slice(0, 1) === "@") {
        if (colonSeparated.length < 2 || colonSeparated.length > 3) {
            return null;
        }
        provider = colonSeparated.shift().slice(1);
    }
    if (colonSeparated.length > 3 || !colonSeparated.length) {
        return null;
    }
    if (colonSeparated.length > 1) {
        const name2 = colonSeparated.pop();
        const prefix = colonSeparated.pop();
        const result = {
            // Allow provider without '@': "provider:prefix:name"
            provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,
            prefix,
            name: name2
        };
        return validate && !validateIconName(result) ? null : result;
    }
    const name = colonSeparated[0];
    const dashSeparated = name.split("-");
    if (dashSeparated.length > 1) {
        const result = {
            provider,
            prefix: dashSeparated.shift(),
            name: dashSeparated.join("-")
        };
        return validate && !validateIconName(result) ? null : result;
    }
    if (allowSimpleName && provider === "") {
        const result = {
            provider,
            prefix: "",
            name
        };
        return validate && !validateIconName(result, allowSimpleName) ? null : result;
    }
    return null;
};
const validateIconName = (icon, allowSimpleName)=>{
    if (!icon) {
        return false;
    }
    return !!// Check name: cannot be empty
    ((allowSimpleName && icon.prefix === "" || !!icon.prefix) && !!icon.name);
};
const dataStorage = /* @__PURE__ */ Object.create(null);
function newStorage(provider, prefix) {
    return {
        provider,
        prefix,
        icons: /* @__PURE__ */ Object.create(null),
        missing: /* @__PURE__ */ new Set()
    };
}
function getStorage(provider, prefix) {
    const providerStorage = dataStorage[provider] || (dataStorage[provider] = /* @__PURE__ */ Object.create(null));
    return providerStorage[prefix] || (providerStorage[prefix] = newStorage(provider, prefix));
}
function addIconSet(storage, data) {
    if (!quicklyValidateIconSet(data)) {
        return [];
    }
    return parseIconSet(data, (name, icon)=>{
        if (icon) {
            storage.icons[name] = icon;
        } else {
            storage.missing.add(name);
        }
    });
}
function addIconToStorage(storage, name, icon) {
    try {
        if (typeof icon.body === "string") {
            storage.icons[name] = {
                ...icon
            };
            return true;
        }
    } catch (err) {}
    return false;
}
function listIcons(provider, prefix) {
    let allIcons = [];
    const providers = typeof provider === "string" ? [
        provider
    ] : Object.keys(dataStorage);
    providers.forEach((provider2)=>{
        const prefixes = typeof provider2 === "string" && typeof prefix === "string" ? [
            prefix
        ] : Object.keys(dataStorage[provider2] || {});
        prefixes.forEach((prefix2)=>{
            const storage = getStorage(provider2, prefix2);
            allIcons = allIcons.concat(Object.keys(storage.icons).map((name)=>(provider2 !== "" ? "@" + provider2 + ":" : "") + prefix2 + ":" + name));
        });
    });
    return allIcons;
}
let simpleNames = false;
function allowSimpleNames(allow) {
    if (typeof allow === "boolean") {
        simpleNames = allow;
    }
    return simpleNames;
}
function getIconData(name) {
    const icon = typeof name === "string" ? stringToIcon(name, true, simpleNames) : name;
    if (icon) {
        const storage = getStorage(icon.provider, icon.prefix);
        const iconName = icon.name;
        return storage.icons[iconName] || (storage.missing.has(iconName) ? null : void 0);
    }
}
function addIcon(name, data) {
    const icon = stringToIcon(name, true, simpleNames);
    if (!icon) {
        return false;
    }
    const storage = getStorage(icon.provider, icon.prefix);
    if (data) {
        return addIconToStorage(storage, icon.name, data);
    } else {
        storage.missing.add(icon.name);
        return true;
    }
}
function addCollection(data, provider) {
    if (typeof data !== "object") {
        return false;
    }
    if (typeof provider !== "string") {
        provider = data.provider || "";
    }
    if (simpleNames && !provider && !data.prefix) {
        let added = false;
        if (quicklyValidateIconSet(data)) {
            data.prefix = "";
            parseIconSet(data, (name, icon)=>{
                if (addIcon(name, icon)) {
                    added = true;
                }
            });
        }
        return added;
    }
    const prefix = data.prefix;
    if (!validateIconName({
        provider,
        prefix,
        name: "a"
    })) {
        return false;
    }
    const storage = getStorage(provider, prefix);
    return !!addIconSet(storage, data);
}
function iconLoaded(name) {
    return !!getIconData(name);
}
function getIcon(name) {
    const result = getIconData(name);
    return result ? {
        ...defaultIconProps,
        ...result
    } : result;
}
const defaultIconSizeCustomisations = Object.freeze({
    width: null,
    height: null
});
const defaultIconCustomisations = Object.freeze({
    // Dimensions
    ...defaultIconSizeCustomisations,
    // Transformations
    ...defaultIconTransformations
});
const unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;
const unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function calculateSize(size, ratio, precision) {
    if (ratio === 1) {
        return size;
    }
    precision = precision || 100;
    if (typeof size === "number") {
        return Math.ceil(size * ratio * precision) / precision;
    }
    if (typeof size !== "string") {
        return size;
    }
    const oldParts = size.split(unitsSplit);
    if (oldParts === null || !oldParts.length) {
        return size;
    }
    const newParts = [];
    let code = oldParts.shift();
    let isNumber = unitsTest.test(code);
    while(true){
        if (isNumber) {
            const num = parseFloat(code);
            if (isNaN(num)) {
                newParts.push(code);
            } else {
                newParts.push(Math.ceil(num * ratio * precision) / precision);
            }
        } else {
            newParts.push(code);
        }
        code = oldParts.shift();
        if (code === void 0) {
            return newParts.join("");
        }
        isNumber = !isNumber;
    }
}
function splitSVGDefs(content, tag = "defs") {
    let defs = "";
    const index = content.indexOf("<" + tag);
    while(index >= 0){
        const start = content.indexOf(">", index);
        const end = content.indexOf("</" + tag);
        if (start === -1 || end === -1) {
            break;
        }
        const endEnd = content.indexOf(">", end);
        if (endEnd === -1) {
            break;
        }
        defs += content.slice(start + 1, end).trim();
        content = content.slice(0, index).trim() + content.slice(endEnd + 1);
    }
    return {
        defs,
        content
    };
}
function mergeDefsAndContent(defs, content) {
    return defs ? "<defs>" + defs + "</defs>" + content : content;
}
function wrapSVGContent(body, start, end) {
    const split = splitSVGDefs(body);
    return mergeDefsAndContent(split.defs, start + split.content + end);
}
const isUnsetKeyword = (value)=>value === "unset" || value === "undefined" || value === "none";
function iconToSVG(icon, customisations) {
    const fullIcon = {
        ...defaultIconProps,
        ...icon
    };
    const fullCustomisations = {
        ...defaultIconCustomisations,
        ...customisations
    };
    const box = {
        left: fullIcon.left,
        top: fullIcon.top,
        width: fullIcon.width,
        height: fullIcon.height
    };
    let body = fullIcon.body;
    [
        fullIcon,
        fullCustomisations
    ].forEach((props)=>{
        const transformations = [];
        const hFlip = props.hFlip;
        const vFlip = props.vFlip;
        let rotation = props.rotate;
        if (hFlip) {
            if (vFlip) {
                rotation += 2;
            } else {
                transformations.push("translate(" + (box.width + box.left).toString() + " " + (0 - box.top).toString() + ")");
                transformations.push("scale(-1 1)");
                box.top = box.left = 0;
            }
        } else if (vFlip) {
            transformations.push("translate(" + (0 - box.left).toString() + " " + (box.height + box.top).toString() + ")");
            transformations.push("scale(1 -1)");
            box.top = box.left = 0;
        }
        let tempValue;
        if (rotation < 0) {
            rotation -= Math.floor(rotation / 4) * 4;
        }
        rotation = rotation % 4;
        switch(rotation){
            case 1:
                tempValue = box.height / 2 + box.top;
                transformations.unshift("rotate(90 " + tempValue.toString() + " " + tempValue.toString() + ")");
                break;
            case 2:
                transformations.unshift("rotate(180 " + (box.width / 2 + box.left).toString() + " " + (box.height / 2 + box.top).toString() + ")");
                break;
            case 3:
                tempValue = box.width / 2 + box.left;
                transformations.unshift("rotate(-90 " + tempValue.toString() + " " + tempValue.toString() + ")");
                break;
        }
        if (rotation % 2 === 1) {
            if (box.left !== box.top) {
                tempValue = box.left;
                box.left = box.top;
                box.top = tempValue;
            }
            if (box.width !== box.height) {
                tempValue = box.width;
                box.width = box.height;
                box.height = tempValue;
            }
        }
        if (transformations.length) {
            body = wrapSVGContent(body, '<g transform="' + transformations.join(" ") + '">', "</g>");
        }
    });
    const customisationsWidth = fullCustomisations.width;
    const customisationsHeight = fullCustomisations.height;
    const boxWidth = box.width;
    const boxHeight = box.height;
    let width;
    let height;
    if (customisationsWidth === null) {
        height = customisationsHeight === null ? "1em" : customisationsHeight === "auto" ? boxHeight : customisationsHeight;
        width = calculateSize(height, boxWidth / boxHeight);
    } else {
        width = customisationsWidth === "auto" ? boxWidth : customisationsWidth;
        height = customisationsHeight === null ? calculateSize(width, boxHeight / boxWidth) : customisationsHeight === "auto" ? boxHeight : customisationsHeight;
    }
    const attributes = {};
    const setAttr = (prop, value)=>{
        if (!isUnsetKeyword(value)) {
            attributes[prop] = value.toString();
        }
    };
    setAttr("width", width);
    setAttr("height", height);
    const viewBox = [
        box.left,
        box.top,
        boxWidth,
        boxHeight
    ];
    attributes.viewBox = viewBox.join(" ");
    return {
        attributes,
        viewBox,
        body
    };
}
const regex = /\sid="(\S+)"/g;
const randomPrefix = "IconifyId" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);
let counter = 0;
function replaceIDs(body, prefix = randomPrefix) {
    const ids = [];
    let match;
    while(match = regex.exec(body)){
        ids.push(match[1]);
    }
    if (!ids.length) {
        return body;
    }
    const suffix = "suffix" + (Math.random() * 16777216 | Date.now()).toString(16);
    ids.forEach((id)=>{
        const newID = typeof prefix === "function" ? prefix(id) : prefix + (counter++).toString();
        const escapedID = id.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        body = body.replace(// Allowed characters before id: [#;"]
        // Allowed characters after id: [)"], .[a-z]
        new RegExp('([#;"])(' + escapedID + ')([")]|\\.[a-z])', "g"), "$1" + newID + suffix + "$3");
    });
    body = body.replace(new RegExp(suffix, "g"), "");
    return body;
}
const storage = /* @__PURE__ */ Object.create(null);
function setAPIModule(provider, item) {
    storage[provider] = item;
}
function getAPIModule(provider) {
    return storage[provider] || storage[""];
}
function createAPIConfig(source) {
    let resources;
    if (typeof source.resources === "string") {
        resources = [
            source.resources
        ];
    } else {
        resources = source.resources;
        if (!(resources instanceof Array) || !resources.length) {
            return null;
        }
    }
    const result = {
        // API hosts
        resources,
        // Root path
        path: source.path || "/",
        // URL length limit
        maxURL: source.maxURL || 500,
        // Timeout before next host is used.
        rotate: source.rotate || 750,
        // Timeout before failing query.
        timeout: source.timeout || 5e3,
        // Randomise default API end point.
        random: source.random === true,
        // Start index
        index: source.index || 0,
        // Receive data after time out (used if time out kicks in first, then API module sends data anyway).
        dataAfterTimeout: source.dataAfterTimeout !== false
    };
    return result;
}
const configStorage = /* @__PURE__ */ Object.create(null);
const fallBackAPISources = [
    "https://api.simplesvg.com",
    "https://api.unisvg.com"
];
const fallBackAPI = [];
while(fallBackAPISources.length > 0){
    if (fallBackAPISources.length === 1) {
        fallBackAPI.push(fallBackAPISources.shift());
    } else {
        if (Math.random() > 0.5) {
            fallBackAPI.push(fallBackAPISources.shift());
        } else {
            fallBackAPI.push(fallBackAPISources.pop());
        }
    }
}
configStorage[""] = createAPIConfig({
    resources: [
        "https://api.iconify.design"
    ].concat(fallBackAPI)
});
function addAPIProvider(provider, customConfig) {
    const config = createAPIConfig(customConfig);
    if (config === null) {
        return false;
    }
    configStorage[provider] = config;
    return true;
}
function getAPIConfig(provider) {
    return configStorage[provider];
}
function listAPIProviders() {
    return Object.keys(configStorage);
}
const detectFetch = ()=>{
    let callback;
    try {
        callback = fetch;
        if (typeof callback === "function") {
            return callback;
        }
    } catch (err) {}
};
let fetchModule = detectFetch();
function setFetch(fetch2) {
    fetchModule = fetch2;
}
function getFetch() {
    return fetchModule;
}
function calculateMaxLength(provider, prefix) {
    const config = getAPIConfig(provider);
    if (!config) {
        return 0;
    }
    let result;
    if (!config.maxURL) {
        result = 0;
    } else {
        let maxHostLength = 0;
        config.resources.forEach((item)=>{
            const host = item;
            maxHostLength = Math.max(maxHostLength, host.length);
        });
        const url = prefix + ".json?icons=";
        result = config.maxURL - maxHostLength - config.path.length - url.length;
    }
    return result;
}
function shouldAbort(status) {
    return status === 404;
}
const prepare = (provider, prefix, icons)=>{
    const results = [];
    const maxLength = calculateMaxLength(provider, prefix);
    const type = "icons";
    let item = {
        type,
        provider,
        prefix,
        icons: []
    };
    let length = 0;
    icons.forEach((name, index)=>{
        length += name.length + 1;
        if (length >= maxLength && index > 0) {
            results.push(item);
            item = {
                type,
                provider,
                prefix,
                icons: []
            };
            length = name.length;
        }
        item.icons.push(name);
    });
    results.push(item);
    return results;
};
function getPath(provider) {
    if (typeof provider === "string") {
        const config = getAPIConfig(provider);
        if (config) {
            return config.path;
        }
    }
    return "/";
}
const send = (host, params, callback)=>{
    if (!fetchModule) {
        callback("abort", 424);
        return;
    }
    let path = getPath(params.provider);
    switch(params.type){
        case "icons":
            {
                const prefix = params.prefix;
                const icons = params.icons;
                const iconsList = icons.join(",");
                const urlParams = new URLSearchParams({
                    icons: iconsList
                });
                path += prefix + ".json?" + urlParams.toString();
                break;
            }
        case "custom":
            {
                const uri = params.uri;
                path += uri.slice(0, 1) === "/" ? uri.slice(1) : uri;
                break;
            }
        default:
            callback("abort", 400);
            return;
    }
    let defaultError = 503;
    fetchModule(host + path).then((response)=>{
        const status = response.status;
        if (status !== 200) {
            setTimeout(()=>{
                callback(shouldAbort(status) ? "abort" : "next", status);
            });
            return;
        }
        defaultError = 501;
        return response.json();
    }).then((data)=>{
        if (typeof data !== "object" || data === null) {
            setTimeout(()=>{
                if (data === 404) {
                    callback("abort", data);
                } else {
                    callback("next", defaultError);
                }
            });
            return;
        }
        setTimeout(()=>{
            callback("success", data);
        });
    }).catch(()=>{
        callback("next", defaultError);
    });
};
const fetchAPIModule = {
    prepare,
    send
};
function sortIcons(icons) {
    const result = {
        loaded: [],
        missing: [],
        pending: []
    };
    const storage = /* @__PURE__ */ Object.create(null);
    icons.sort((a, b)=>{
        if (a.provider !== b.provider) {
            return a.provider.localeCompare(b.provider);
        }
        if (a.prefix !== b.prefix) {
            return a.prefix.localeCompare(b.prefix);
        }
        return a.name.localeCompare(b.name);
    });
    let lastIcon = {
        provider: "",
        prefix: "",
        name: ""
    };
    icons.forEach((icon)=>{
        if (lastIcon.name === icon.name && lastIcon.prefix === icon.prefix && lastIcon.provider === icon.provider) {
            return;
        }
        lastIcon = icon;
        const provider = icon.provider;
        const prefix = icon.prefix;
        const name = icon.name;
        const providerStorage = storage[provider] || (storage[provider] = /* @__PURE__ */ Object.create(null));
        const localStorage = providerStorage[prefix] || (providerStorage[prefix] = getStorage(provider, prefix));
        let list;
        if (name in localStorage.icons) {
            list = result.loaded;
        } else if (prefix === "" || localStorage.missing.has(name)) {
            list = result.missing;
        } else {
            list = result.pending;
        }
        const item = {
            provider,
            prefix,
            name
        };
        list.push(item);
    });
    return result;
}
function removeCallback(storages, id) {
    storages.forEach((storage)=>{
        const items = storage.loaderCallbacks;
        if (items) {
            storage.loaderCallbacks = items.filter((row)=>row.id !== id);
        }
    });
}
function updateCallbacks(storage) {
    if (!storage.pendingCallbacksFlag) {
        storage.pendingCallbacksFlag = true;
        setTimeout(()=>{
            storage.pendingCallbacksFlag = false;
            const items = storage.loaderCallbacks ? storage.loaderCallbacks.slice(0) : [];
            if (!items.length) {
                return;
            }
            let hasPending = false;
            const provider = storage.provider;
            const prefix = storage.prefix;
            items.forEach((item)=>{
                const icons = item.icons;
                const oldLength = icons.pending.length;
                icons.pending = icons.pending.filter((icon)=>{
                    if (icon.prefix !== prefix) {
                        return true;
                    }
                    const name = icon.name;
                    if (storage.icons[name]) {
                        icons.loaded.push({
                            provider,
                            prefix,
                            name
                        });
                    } else if (storage.missing.has(name)) {
                        icons.missing.push({
                            provider,
                            prefix,
                            name
                        });
                    } else {
                        hasPending = true;
                        return true;
                    }
                    return false;
                });
                if (icons.pending.length !== oldLength) {
                    if (!hasPending) {
                        removeCallback([
                            storage
                        ], item.id);
                    }
                    item.callback(icons.loaded.slice(0), icons.missing.slice(0), icons.pending.slice(0), item.abort);
                }
            });
        });
    }
}
let idCounter = 0;
function storeCallback(callback, icons, pendingSources) {
    const id = idCounter++;
    const abort = removeCallback.bind(null, pendingSources, id);
    if (!icons.pending.length) {
        return abort;
    }
    const item = {
        id,
        icons,
        callback,
        abort
    };
    pendingSources.forEach((storage)=>{
        (storage.loaderCallbacks || (storage.loaderCallbacks = [])).push(item);
    });
    return abort;
}
function listToIcons(list, validate = true, simpleNames = false) {
    const result = [];
    list.forEach((item)=>{
        const icon = typeof item === "string" ? stringToIcon(item, validate, simpleNames) : item;
        if (icon) {
            result.push(icon);
        }
    });
    return result;
}
// src/config.ts
var defaultConfig = {
    resources: [],
    index: 0,
    timeout: 2e3,
    rotate: 750,
    random: false,
    dataAfterTimeout: false
};
// src/query.ts
function sendQuery(config, payload, query, done) {
    const resourcesCount = config.resources.length;
    const startIndex = config.random ? Math.floor(Math.random() * resourcesCount) : config.index;
    let resources;
    if (config.random) {
        let list = config.resources.slice(0);
        resources = [];
        while(list.length > 1){
            const nextIndex = Math.floor(Math.random() * list.length);
            resources.push(list[nextIndex]);
            list = list.slice(0, nextIndex).concat(list.slice(nextIndex + 1));
        }
        resources = resources.concat(list);
    } else {
        resources = config.resources.slice(startIndex).concat(config.resources.slice(0, startIndex));
    }
    const startTime = Date.now();
    let status = "pending";
    let queriesSent = 0;
    let lastError;
    let timer = null;
    let queue = [];
    let doneCallbacks = [];
    if (typeof done === "function") {
        doneCallbacks.push(done);
    }
    function resetTimer() {
        if (timer) {
            clearTimeout(timer);
            timer = null;
        }
    }
    function abort() {
        if (status === "pending") {
            status = "aborted";
        }
        resetTimer();
        queue.forEach((item)=>{
            if (item.status === "pending") {
                item.status = "aborted";
            }
        });
        queue = [];
    }
    function subscribe(callback, overwrite) {
        if (overwrite) {
            doneCallbacks = [];
        }
        if (typeof callback === "function") {
            doneCallbacks.push(callback);
        }
    }
    function getQueryStatus() {
        return {
            startTime,
            payload,
            status,
            queriesSent,
            queriesPending: queue.length,
            subscribe,
            abort
        };
    }
    function failQuery() {
        status = "failed";
        doneCallbacks.forEach((callback)=>{
            callback(void 0, lastError);
        });
    }
    function clearQueue() {
        queue.forEach((item)=>{
            if (item.status === "pending") {
                item.status = "aborted";
            }
        });
        queue = [];
    }
    function moduleResponse(item, response, data) {
        const isError = response !== "success";
        queue = queue.filter((queued)=>queued !== item);
        switch(status){
            case "pending":
                break;
            case "failed":
                if (isError || !config.dataAfterTimeout) {
                    return;
                }
                break;
            default:
                return;
        }
        if (response === "abort") {
            lastError = data;
            failQuery();
            return;
        }
        if (isError) {
            lastError = data;
            if (!queue.length) {
                if (!resources.length) {
                    failQuery();
                } else {
                    execNext();
                }
            }
            return;
        }
        resetTimer();
        clearQueue();
        if (!config.random) {
            const index = config.resources.indexOf(item.resource);
            if (index !== -1 && index !== config.index) {
                config.index = index;
            }
        }
        status = "completed";
        doneCallbacks.forEach((callback)=>{
            callback(data);
        });
    }
    function execNext() {
        if (status !== "pending") {
            return;
        }
        resetTimer();
        const resource = resources.shift();
        if (resource === void 0) {
            if (queue.length) {
                timer = setTimeout(()=>{
                    resetTimer();
                    if (status === "pending") {
                        clearQueue();
                        failQuery();
                    }
                }, config.timeout);
                return;
            }
            failQuery();
            return;
        }
        const item = {
            status: "pending",
            resource,
            callback: (status2, data)=>{
                moduleResponse(item, status2, data);
            }
        };
        queue.push(item);
        queriesSent++;
        timer = setTimeout(execNext, config.rotate);
        query(resource, payload, item.callback);
    }
    setTimeout(execNext);
    return getQueryStatus;
}
// src/index.ts
function initRedundancy(cfg) {
    const config = {
        ...defaultConfig,
        ...cfg
    };
    let queries = [];
    function cleanup() {
        queries = queries.filter((item)=>item().status === "pending");
    }
    function query(payload, queryCallback, doneCallback) {
        const query2 = sendQuery(config, payload, queryCallback, (data, error)=>{
            cleanup();
            if (doneCallback) {
                doneCallback(data, error);
            }
        });
        queries.push(query2);
        return query2;
    }
    function find(callback) {
        return queries.find((value)=>{
            return callback(value);
        }) || null;
    }
    const instance = {
        query,
        find,
        setIndex: (index)=>{
            config.index = index;
        },
        getIndex: ()=>config.index,
        cleanup
    };
    return instance;
}
function emptyCallback$1() {}
const redundancyCache = /* @__PURE__ */ Object.create(null);
function getRedundancyCache(provider) {
    if (!redundancyCache[provider]) {
        const config = getAPIConfig(provider);
        if (!config) {
            return;
        }
        const redundancy = initRedundancy(config);
        const cachedReundancy = {
            config,
            redundancy
        };
        redundancyCache[provider] = cachedReundancy;
    }
    return redundancyCache[provider];
}
function sendAPIQuery(target, query, callback) {
    let redundancy;
    let send;
    if (typeof target === "string") {
        const api = getAPIModule(target);
        if (!api) {
            callback(void 0, 424);
            return emptyCallback$1;
        }
        send = api.send;
        const cached = getRedundancyCache(target);
        if (cached) {
            redundancy = cached.redundancy;
        }
    } else {
        const config = createAPIConfig(target);
        if (config) {
            redundancy = initRedundancy(config);
            const moduleKey = target.resources ? target.resources[0] : "";
            const api = getAPIModule(moduleKey);
            if (api) {
                send = api.send;
            }
        }
    }
    if (!redundancy || !send) {
        callback(void 0, 424);
        return emptyCallback$1;
    }
    return redundancy.query(query, send, callback)().abort;
}
function emptyCallback() {}
function loadedNewIcons(storage) {
    if (!storage.iconsLoaderFlag) {
        storage.iconsLoaderFlag = true;
        setTimeout(()=>{
            storage.iconsLoaderFlag = false;
            updateCallbacks(storage);
        });
    }
}
function checkIconNamesForAPI(icons) {
    const valid = [];
    const invalid = [];
    icons.forEach((name)=>{
        (name.match(matchIconName) ? valid : invalid).push(name);
    });
    return {
        valid,
        invalid
    };
}
function parseLoaderResponse(storage, icons, data) {
    function checkMissing() {
        const pending = storage.pendingIcons;
        icons.forEach((name)=>{
            if (pending) {
                pending.delete(name);
            }
            if (!storage.icons[name]) {
                storage.missing.add(name);
            }
        });
    }
    if (data && typeof data === "object") {
        try {
            const parsed = addIconSet(storage, data);
            if (!parsed.length) {
                checkMissing();
                return;
            }
        } catch (err) {
            console.error(err);
        }
    }
    checkMissing();
    loadedNewIcons(storage);
}
function parsePossiblyAsyncResponse(response, callback) {
    if (response instanceof Promise) {
        response.then((data)=>{
            callback(data);
        }).catch(()=>{
            callback(null);
        });
    } else {
        callback(response);
    }
}
function loadNewIcons(storage, icons) {
    if (!storage.iconsToLoad) {
        storage.iconsToLoad = icons;
    } else {
        storage.iconsToLoad = storage.iconsToLoad.concat(icons).sort();
    }
    if (!storage.iconsQueueFlag) {
        storage.iconsQueueFlag = true;
        setTimeout(()=>{
            storage.iconsQueueFlag = false;
            const { provider, prefix } = storage;
            const icons2 = storage.iconsToLoad;
            delete storage.iconsToLoad;
            if (!icons2 || !icons2.length) {
                return;
            }
            const customIconLoader = storage.loadIcon;
            if (storage.loadIcons && (icons2.length > 1 || !customIconLoader)) {
                parsePossiblyAsyncResponse(storage.loadIcons(icons2, prefix, provider), (data)=>{
                    parseLoaderResponse(storage, icons2, data);
                });
                return;
            }
            if (customIconLoader) {
                icons2.forEach((name)=>{
                    const response = customIconLoader(name, prefix, provider);
                    parsePossiblyAsyncResponse(response, (data)=>{
                        const iconSet = data ? {
                            prefix,
                            icons: {
                                [name]: data
                            }
                        } : null;
                        parseLoaderResponse(storage, [
                            name
                        ], iconSet);
                    });
                });
                return;
            }
            const { valid, invalid } = checkIconNamesForAPI(icons2);
            if (invalid.length) {
                parseLoaderResponse(storage, invalid, null);
            }
            if (!valid.length) {
                return;
            }
            const api = prefix.match(matchIconName) ? getAPIModule(provider) : null;
            if (!api) {
                parseLoaderResponse(storage, valid, null);
                return;
            }
            const params = api.prepare(provider, prefix, valid);
            params.forEach((item)=>{
                sendAPIQuery(provider, item, (data)=>{
                    parseLoaderResponse(storage, item.icons, data);
                });
            });
        });
    }
}
const loadIcons = (icons, callback)=>{
    const cleanedIcons = listToIcons(icons, true, allowSimpleNames());
    const sortedIcons = sortIcons(cleanedIcons);
    if (!sortedIcons.pending.length) {
        let callCallback = true;
        if (callback) {
            setTimeout(()=>{
                if (callCallback) {
                    callback(sortedIcons.loaded, sortedIcons.missing, sortedIcons.pending, emptyCallback);
                }
            });
        }
        return ()=>{
            callCallback = false;
        };
    }
    const newIcons = /* @__PURE__ */ Object.create(null);
    const sources = [];
    let lastProvider, lastPrefix;
    sortedIcons.pending.forEach((icon)=>{
        const { provider, prefix } = icon;
        if (prefix === lastPrefix && provider === lastProvider) {
            return;
        }
        lastProvider = provider;
        lastPrefix = prefix;
        sources.push(getStorage(provider, prefix));
        const providerNewIcons = newIcons[provider] || (newIcons[provider] = /* @__PURE__ */ Object.create(null));
        if (!providerNewIcons[prefix]) {
            providerNewIcons[prefix] = [];
        }
    });
    sortedIcons.pending.forEach((icon)=>{
        const { provider, prefix, name } = icon;
        const storage = getStorage(provider, prefix);
        const pendingQueue = storage.pendingIcons || (storage.pendingIcons = /* @__PURE__ */ new Set());
        if (!pendingQueue.has(name)) {
            pendingQueue.add(name);
            newIcons[provider][prefix].push(name);
        }
    });
    sources.forEach((storage)=>{
        const list = newIcons[storage.provider][storage.prefix];
        if (list.length) {
            loadNewIcons(storage, list);
        }
    });
    return callback ? storeCallback(callback, sortedIcons, sources) : emptyCallback;
};
const loadIcon = (icon)=>{
    return new Promise((fulfill, reject)=>{
        const iconObj = typeof icon === "string" ? stringToIcon(icon, true) : icon;
        if (!iconObj) {
            reject(icon);
            return;
        }
        loadIcons([
            iconObj || icon
        ], (loaded)=>{
            if (loaded.length && iconObj) {
                const data = getIconData(iconObj);
                if (data) {
                    fulfill({
                        ...defaultIconProps,
                        ...data
                    });
                    return;
                }
            }
            reject(icon);
        });
    });
};
function setCustomIconsLoader(loader, prefix, provider) {
    getStorage(provider || "", prefix).loadIcons = loader;
}
function setCustomIconLoader(loader, prefix, provider) {
    getStorage(provider || "", prefix).loadIcon = loader;
}
function mergeCustomisations(defaults, item) {
    const result = {
        ...defaults
    };
    for(const key in item){
        const value = item[key];
        const valueType = typeof value;
        if (key in defaultIconSizeCustomisations) {
            if (value === null || value && (valueType === "string" || valueType === "number")) {
                result[key] = value;
            }
        } else if (valueType === typeof result[key]) {
            result[key] = key === "rotate" ? value % 4 : value;
        }
    }
    return result;
}
const separator = /[\s,]+/;
function flipFromString(custom, flip) {
    flip.split(separator).forEach((str)=>{
        const value = str.trim();
        switch(value){
            case "horizontal":
                custom.hFlip = true;
                break;
            case "vertical":
                custom.vFlip = true;
                break;
        }
    });
}
function rotateFromString(value, defaultValue = 0) {
    const units = value.replace(/^-?[0-9.]*/, "");
    function cleanup(value2) {
        while(value2 < 0){
            value2 += 4;
        }
        return value2 % 4;
    }
    if (units === "") {
        const num = parseInt(value);
        return isNaN(num) ? 0 : cleanup(num);
    } else if (units !== value) {
        let split = 0;
        switch(units){
            case "%":
                split = 25;
                break;
            case "deg":
                split = 90;
        }
        if (split) {
            let num = parseFloat(value.slice(0, value.length - units.length));
            if (isNaN(num)) {
                return 0;
            }
            num = num / split;
            return num % 1 === 0 ? cleanup(num) : 0;
        }
    }
    return defaultValue;
}
function iconToHTML(body, attributes) {
    let renderAttribsHTML = body.indexOf("xlink:") === -1 ? "" : ' xmlns:xlink="http://www.w3.org/1999/xlink"';
    for(const attr in attributes){
        renderAttribsHTML += " " + attr + '="' + attributes[attr] + '"';
    }
    return '<svg xmlns="http://www.w3.org/2000/svg"' + renderAttribsHTML + ">" + body + "</svg>";
}
function encodeSVGforURL(svg) {
    return svg.replace(/"/g, "'").replace(/%/g, "%25").replace(/#/g, "%23").replace(/</g, "%3C").replace(/>/g, "%3E").replace(/\s+/g, " ");
}
function svgToData(svg) {
    return "data:image/svg+xml," + encodeSVGforURL(svg);
}
function svgToURL(svg) {
    return 'url("' + svgToData(svg) + '")';
}
let policy;
function createPolicy() {
    try {
        policy = window.trustedTypes.createPolicy("iconify", {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            createHTML: (s)=>s
        });
    } catch (err) {
        policy = null;
    }
}
function cleanUpInnerHTML(html) {
    if (policy === void 0) {
        createPolicy();
    }
    return policy ? policy.createHTML(html) : html;
}
const defaultExtendedIconCustomisations = {
    ...defaultIconCustomisations,
    inline: false
};
/**
 * Default SVG attributes
 */ const svgDefaults = {
    'xmlns': 'http://www.w3.org/2000/svg',
    'xmlnsXlink': 'http://www.w3.org/1999/xlink',
    'aria-hidden': true,
    'role': 'img'
};
/**
 * Style modes
 */ const commonProps = {
    display: 'inline-block'
};
const monotoneProps = {
    backgroundColor: 'currentColor'
};
const coloredProps = {
    backgroundColor: 'transparent'
};
// Dynamically add common props to variables above
const propsToAdd = {
    Image: 'var(--svg)',
    Repeat: 'no-repeat',
    Size: '100% 100%'
};
const propsToAddTo = {
    WebkitMask: monotoneProps,
    mask: monotoneProps,
    background: coloredProps
};
for(const prefix in propsToAddTo){
    const list = propsToAddTo[prefix];
    for(const prop in propsToAdd){
        list[prefix + prop] = propsToAdd[prop];
    }
}
/**
 * Default values for customisations for inline icon
 */ const inlineDefaults = {
    ...defaultExtendedIconCustomisations,
    inline: true
};
/**
 * Fix size: add 'px' to numbers
 */ function fixSize(value) {
    return value + (value.match(/^[-0-9.]+$/) ? 'px' : '');
}
/**
 * Render icon
 */ const render = (// Icon must be validated before calling this function
icon, // Partial properties
props, // Icon name
name)=>{
    // Get default properties
    const defaultProps = props.inline ? inlineDefaults : defaultExtendedIconCustomisations;
    // Get all customisations
    const customisations = mergeCustomisations(defaultProps, props);
    // Check mode
    const mode = props.mode || 'svg';
    // Create style
    const style = {};
    const customStyle = props.style || {};
    // Create SVG component properties
    const componentProps = {
        ...mode === 'svg' ? svgDefaults : {}
    };
    if (name) {
        const iconName = stringToIcon(name, false, true);
        if (iconName) {
            const classNames = [
                'iconify'
            ];
            const props = [
                'provider',
                'prefix'
            ];
            for (const prop of props){
                if (iconName[prop]) {
                    classNames.push('iconify--' + iconName[prop]);
                }
            }
            componentProps.className = classNames.join(' ');
        }
    }
    // Get element properties
    for(let key in props){
        const value = props[key];
        if (value === void 0) {
            continue;
        }
        switch(key){
            // Properties to ignore
            case 'icon':
            case 'style':
            case 'children':
            case 'onLoad':
            case 'mode':
            case 'ssr':
                break;
            // Forward ref
            case '_ref':
                componentProps.ref = value;
                break;
            // Merge class names
            case 'className':
                componentProps[key] = (componentProps[key] ? componentProps[key] + ' ' : '') + value;
                break;
            // Boolean attributes
            case 'inline':
            case 'hFlip':
            case 'vFlip':
                customisations[key] = value === true || value === 'true' || value === 1;
                break;
            // Flip as string: 'horizontal,vertical'
            case 'flip':
                if (typeof value === 'string') {
                    flipFromString(customisations, value);
                }
                break;
            // Color: copy to style
            case 'color':
                style.color = value;
                break;
            // Rotation as string
            case 'rotate':
                if (typeof value === 'string') {
                    customisations[key] = rotateFromString(value);
                } else if (typeof value === 'number') {
                    customisations[key] = value;
                }
                break;
            // Remove aria-hidden
            case 'ariaHidden':
            case 'aria-hidden':
                if (value !== true && value !== 'true') {
                    delete componentProps['aria-hidden'];
                }
                break;
            // Copy missing property if it does not exist in customisations
            default:
                if (defaultProps[key] === void 0) {
                    componentProps[key] = value;
                }
        }
    }
    // Generate icon
    const item = iconToSVG(icon, customisations);
    const renderAttribs = item.attributes;
    // Inline display
    if (customisations.inline) {
        style.verticalAlign = '-0.125em';
    }
    if (mode === 'svg') {
        // Add style
        componentProps.style = {
            ...style,
            ...customStyle
        };
        // Add icon stuff
        Object.assign(componentProps, renderAttribs);
        // Counter for ids based on "id" property to render icons consistently on server and client
        let localCounter = 0;
        let id = props.id;
        if (typeof id === 'string') {
            // Convert '-' to '_' to avoid errors in animations
            id = id.replace(/-/g, '_');
        }
        // Add icon stuff
        componentProps.dangerouslySetInnerHTML = {
            __html: cleanUpInnerHTML(replaceIDs(item.body, id ? ()=>id + 'ID' + localCounter++ : 'iconifyReact'))
        };
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["createElement"])('svg', componentProps);
    }
    // Render <span> with style
    const { body, width, height } = icon;
    const useMask = mode === 'mask' || (mode === 'bg' ? false : body.indexOf('currentColor') !== -1);
    // Generate SVG
    const html = iconToHTML(body, {
        ...renderAttribs,
        width: width + '',
        height: height + ''
    });
    // Generate style
    componentProps.style = {
        ...style,
        '--svg': svgToURL(html),
        'width': fixSize(renderAttribs.width),
        'height': fixSize(renderAttribs.height),
        ...commonProps,
        ...useMask ? monotoneProps : coloredProps,
        ...customStyle
    };
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["createElement"])('span', componentProps);
};
/**
 * Enable cache
 *
 * @deprecated No longer used
 */ function enableCache(storage) {
//
}
/**
 * Disable cache
 *
 * @deprecated No longer used
 */ function disableCache(storage) {
//
}
/**
 * Initialise stuff
 */ // Enable short names
allowSimpleNames(true);
// Set API module
setAPIModule('', fetchAPIModule);
/**
 * Browser stuff
 */ if (typeof document !== 'undefined' && typeof window !== 'undefined') {
    const _window = window;
    // Load icons from global "IconifyPreload"
    if (_window.IconifyPreload !== void 0) {
        const preload = _window.IconifyPreload;
        const err = 'Invalid IconifyPreload syntax.';
        if (typeof preload === 'object' && preload !== null) {
            (preload instanceof Array ? preload : [
                preload
            ]).forEach((item)=>{
                try {
                    if (// Check if item is an object and not null/array
                    typeof item !== 'object' || item === null || item instanceof Array || // Check for 'icons' and 'prefix'
                    typeof item.icons !== 'object' || typeof item.prefix !== 'string' || // Add icon set
                    !addCollection(item)) {
                        console.error(err);
                    }
                } catch (e) {
                    console.error(err);
                }
            });
        }
    }
    // Set API from global "IconifyProviders"
    if (_window.IconifyProviders !== void 0) {
        const providers = _window.IconifyProviders;
        if (typeof providers === 'object' && providers !== null) {
            for(let key in providers){
                const err = 'IconifyProviders[' + key + '] is invalid.';
                try {
                    const value = providers[key];
                    if (typeof value !== 'object' || !value || value.resources === void 0) {
                        continue;
                    }
                    if (!addAPIProvider(key, value)) {
                        console.error(err);
                    }
                } catch (e) {
                    console.error(err);
                }
            }
        }
    }
}
function IconComponent(props) {
    const [mounted, setMounted] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["useState"])(!!props.ssr);
    const [abort, setAbort] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["useState"])({});
    // Get initial state
    function getInitialState(mounted) {
        if (mounted) {
            const name = props.icon;
            if (typeof name === 'object') {
                // Icon as object
                return {
                    name: '',
                    data: name
                };
            }
            const data = getIconData(name);
            if (data) {
                return {
                    name,
                    data
                };
            }
        }
        return {
            name: ''
        };
    }
    const [state, setState] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["useState"])(getInitialState(!!props.ssr));
    // Cancel loading
    function cleanup() {
        const callback = abort.callback;
        if (callback) {
            callback();
            setAbort({});
        }
    }
    // Change state if it is different
    function changeState(newState) {
        if (JSON.stringify(state) !== JSON.stringify(newState)) {
            cleanup();
            setState(newState);
            return true;
        }
    }
    // Update state
    function updateState() {
        var _a;
        const name = props.icon;
        if (typeof name === 'object') {
            // Icon as object
            changeState({
                name: '',
                data: name
            });
            return;
        }
        // New icon or got icon data
        const data = getIconData(name);
        if (changeState({
            name,
            data
        })) {
            if (data === undefined) {
                // Load icon, update state when done
                const callback = loadIcons([
                    name
                ], updateState);
                setAbort({
                    callback
                });
            } else if (data) {
                // Icon data is available: trigger onLoad callback if present
                (_a = props.onLoad) === null || _a === void 0 ? void 0 : _a.call(props, name);
            }
        }
    }
    // Mounted state, cleanup for loader
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "IconComponent.useEffect": ()=>{
            setMounted(true);
            return cleanup;
        }
    }["IconComponent.useEffect"], []);
    // Icon changed or component mounted
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "IconComponent.useEffect": ()=>{
            if (mounted) {
                updateState();
            }
        }
    }["IconComponent.useEffect"], [
        props.icon,
        mounted
    ]);
    // Render icon
    const { name, data } = state;
    if (!data) {
        return props.children ? props.children : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["createElement"])('span', {});
    }
    return render({
        ...defaultIconProps,
        ...data
    }, props, name);
}
/**
 * Block icon
 *
 * @param props - Component properties
 */ const Icon = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, ref)=>IconComponent({
        ...props,
        _ref: ref
    }));
/**
 * Inline icon (has negative verticalAlign that makes it behave like icon font)
 *
 * @param props - Component properties
 */ const InlineIcon = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, ref)=>IconComponent({
        inline: true,
        ...props,
        _ref: ref
    }));
/**
 * Internal API
 */ const _api = {
    getAPIConfig,
    setAPIModule,
    sendAPIQuery,
    setFetch,
    getFetch,
    listAPIProviders
};
;
}}),
"[project]/node_modules/goober/dist/goober.modern.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "css": (()=>u),
    "extractCss": (()=>r),
    "glob": (()=>b),
    "keyframes": (()=>h),
    "setup": (()=>m),
    "styled": (()=>j)
});
let e = {
    data: ""
}, t = (t)=>"object" == typeof window ? ((t ? t.querySelector("#_goober") : window._goober) || Object.assign((t || document.head).appendChild(document.createElement("style")), {
        innerHTML: " ",
        id: "_goober"
    })).firstChild : t || e, r = (e)=>{
    let r = t(e), l = r.data;
    return r.data = "", l;
}, l = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g, a = /\/\*[^]*?\*\/|  +/g, n = /\n+/g, o = (e, t)=>{
    let r = "", l = "", a = "";
    for(let n in e){
        let c = e[n];
        "@" == n[0] ? "i" == n[1] ? r = n + " " + c + ";" : l += "f" == n[1] ? o(c, n) : n + "{" + o(c, "k" == n[1] ? "" : t) + "}" : "object" == typeof c ? l += o(c, t ? t.replace(/([^,])+/g, (e)=>n.replace(/([^,]*:\S+\([^)]*\))|([^,])+/g, (t)=>/&/.test(t) ? t.replace(/&/g, e) : e ? e + " " + t : t)) : n) : null != c && (n = /^--/.test(n) ? n : n.replace(/[A-Z]/g, "-$&").toLowerCase(), a += o.p ? o.p(n, c) : n + ":" + c + ";");
    }
    return r + (t && a ? t + "{" + a + "}" : a) + l;
}, c = {}, s = (e)=>{
    if ("object" == typeof e) {
        let t = "";
        for(let r in e)t += r + s(e[r]);
        return t;
    }
    return e;
}, i = (e, t, r, i, p)=>{
    let u = s(e), d = c[u] || (c[u] = ((e)=>{
        let t = 0, r = 11;
        for(; t < e.length;)r = 101 * r + e.charCodeAt(t++) >>> 0;
        return "go" + r;
    })(u));
    if (!c[d]) {
        let t = u !== e ? e : ((e)=>{
            let t, r, o = [
                {}
            ];
            for(; t = l.exec(e.replace(a, ""));)t[4] ? o.shift() : t[3] ? (r = t[3].replace(n, " ").trim(), o.unshift(o[0][r] = o[0][r] || {})) : o[0][t[1]] = t[2].replace(n, " ").trim();
            return o[0];
        })(e);
        c[d] = o(p ? {
            ["@keyframes " + d]: t
        } : t, r ? "" : "." + d);
    }
    let f = r && c.g ? c.g : null;
    return r && (c.g = c[d]), ((e, t, r, l)=>{
        l ? t.data = t.data.replace(l, e) : -1 === t.data.indexOf(e) && (t.data = r ? e + t.data : t.data + e);
    })(c[d], t, i, f), d;
}, p = (e, t, r)=>e.reduce((e, l, a)=>{
        let n = t[a];
        if (n && n.call) {
            let e = n(r), t = e && e.props && e.props.className || /^go/.test(e) && e;
            n = t ? "." + t : e && "object" == typeof e ? e.props ? "" : o(e, "") : !1 === e ? "" : e;
        }
        return e + l + (null == n ? "" : n);
    }, "");
function u(e) {
    let r = this || {}, l = e.call ? e(r.p) : e;
    return i(l.unshift ? l.raw ? p(l, [].slice.call(arguments, 1), r.p) : l.reduce((e, t)=>Object.assign(e, t && t.call ? t(r.p) : t), {}) : l, t(r.target), r.g, r.o, r.k);
}
let d, f, g, b = u.bind({
    g: 1
}), h = u.bind({
    k: 1
});
function m(e, t, r, l) {
    o.p = t, d = e, f = r, g = l;
}
function j(e, t) {
    let r = this || {};
    return function() {
        let l = arguments;
        function a(n, o) {
            let c = Object.assign({}, n), s = c.className || a.className;
            r.p = Object.assign({
                theme: f && f()
            }, c), r.o = / *go\d+/.test(s), c.className = u.apply(r, l) + (s ? " " + s : ""), t && (c.ref = o);
            let i = e;
            return e[0] && (i = c.as || e, delete c.as), g && i[0] && g(c), d(i, c);
        }
        return t ? t(a) : a;
    };
}
;
}}),
"[project]/node_modules/react-hot-toast/dist/index.mjs [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "CheckmarkIcon": (()=>_),
    "ErrorIcon": (()=>k),
    "LoaderIcon": (()=>V),
    "ToastBar": (()=>C),
    "ToastIcon": (()=>M),
    "Toaster": (()=>Oe),
    "default": (()=>Vt),
    "resolveValue": (()=>f),
    "toast": (()=>c),
    "useToaster": (()=>O),
    "useToasterStore": (()=>D)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/react/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/goober/dist/goober.modern.js [client] (ecmascript)");
"use client";
var W = (e)=>typeof e == "function", f = (e, t)=>W(e) ? e(t) : e;
var F = (()=>{
    let e = 0;
    return ()=>(++e).toString();
})(), A = (()=>{
    let e;
    return ()=>{
        if (e === void 0 && typeof window < "u") {
            let t = matchMedia("(prefers-reduced-motion: reduce)");
            e = !t || t.matches;
        }
        return e;
    };
})();
;
var Y = 20;
var U = (e, t)=>{
    switch(t.type){
        case 0:
            return {
                ...e,
                toasts: [
                    t.toast,
                    ...e.toasts
                ].slice(0, Y)
            };
        case 1:
            return {
                ...e,
                toasts: e.toasts.map((o)=>o.id === t.toast.id ? {
                        ...o,
                        ...t.toast
                    } : o)
            };
        case 2:
            let { toast: r } = t;
            return U(e, {
                type: e.toasts.find((o)=>o.id === r.id) ? 1 : 0,
                toast: r
            });
        case 3:
            let { toastId: s } = t;
            return {
                ...e,
                toasts: e.toasts.map((o)=>o.id === s || s === void 0 ? {
                        ...o,
                        dismissed: !0,
                        visible: !1
                    } : o)
            };
        case 4:
            return t.toastId === void 0 ? {
                ...e,
                toasts: []
            } : {
                ...e,
                toasts: e.toasts.filter((o)=>o.id !== t.toastId)
            };
        case 5:
            return {
                ...e,
                pausedAt: t.time
            };
        case 6:
            let a = t.time - (e.pausedAt || 0);
            return {
                ...e,
                pausedAt: void 0,
                toasts: e.toasts.map((o)=>({
                        ...o,
                        pauseDuration: o.pauseDuration + a
                    }))
            };
    }
}, P = [], y = {
    toasts: [],
    pausedAt: void 0
}, u = (e)=>{
    y = U(y, e), P.forEach((t)=>{
        t(y);
    });
}, q = {
    blank: 4e3,
    error: 4e3,
    success: 2e3,
    loading: 1 / 0,
    custom: 4e3
}, D = (e = {})=>{
    let [t, r] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["useState"])(y), s = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["useRef"])(y);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["useEffect"])(()=>(s.current !== y && r(y), P.push(r), ()=>{
            let o = P.indexOf(r);
            o > -1 && P.splice(o, 1);
        }), []);
    let a = t.toasts.map((o)=>{
        var n, i, p;
        return {
            ...e,
            ...e[o.type],
            ...o,
            removeDelay: o.removeDelay || ((n = e[o.type]) == null ? void 0 : n.removeDelay) || (e == null ? void 0 : e.removeDelay),
            duration: o.duration || ((i = e[o.type]) == null ? void 0 : i.duration) || (e == null ? void 0 : e.duration) || q[o.type],
            style: {
                ...e.style,
                ...(p = e[o.type]) == null ? void 0 : p.style,
                ...o.style
            }
        };
    });
    return {
        ...t,
        toasts: a
    };
};
var J = (e, t = "blank", r)=>({
        createdAt: Date.now(),
        visible: !0,
        dismissed: !1,
        type: t,
        ariaProps: {
            role: "status",
            "aria-live": "polite"
        },
        message: e,
        pauseDuration: 0,
        ...r,
        id: (r == null ? void 0 : r.id) || F()
    }), x = (e)=>(t, r)=>{
        let s = J(t, e, r);
        return u({
            type: 2,
            toast: s
        }), s.id;
    }, c = (e, t)=>x("blank")(e, t);
c.error = x("error");
c.success = x("success");
c.loading = x("loading");
c.custom = x("custom");
c.dismiss = (e)=>{
    u({
        type: 3,
        toastId: e
    });
};
c.remove = (e)=>u({
        type: 4,
        toastId: e
    });
c.promise = (e, t, r)=>{
    let s = c.loading(t.loading, {
        ...r,
        ...r == null ? void 0 : r.loading
    });
    return typeof e == "function" && (e = e()), e.then((a)=>{
        let o = t.success ? f(t.success, a) : void 0;
        return o ? c.success(o, {
            id: s,
            ...r,
            ...r == null ? void 0 : r.success
        }) : c.dismiss(s), a;
    }).catch((a)=>{
        let o = t.error ? f(t.error, a) : void 0;
        o ? c.error(o, {
            id: s,
            ...r,
            ...r == null ? void 0 : r.error
        }) : c.dismiss(s);
    }), e;
};
;
var K = (e, t)=>{
    u({
        type: 1,
        toast: {
            id: e,
            height: t
        }
    });
}, X = ()=>{
    u({
        type: 5,
        time: Date.now()
    });
}, b = new Map, Z = 1e3, ee = (e, t = Z)=>{
    if (b.has(e)) return;
    let r = setTimeout(()=>{
        b.delete(e), u({
            type: 4,
            toastId: e
        });
    }, t);
    b.set(e, r);
}, O = (e)=>{
    let { toasts: t, pausedAt: r } = D(e);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        if (r) return;
        let o = Date.now(), n = t.map((i)=>{
            if (i.duration === 1 / 0) return;
            let p = (i.duration || 0) + i.pauseDuration - (o - i.createdAt);
            if (p < 0) {
                i.visible && c.dismiss(i.id);
                return;
            }
            return setTimeout(()=>c.dismiss(i.id), p);
        });
        return ()=>{
            n.forEach((i)=>i && clearTimeout(i));
        };
    }, [
        t,
        r
    ]);
    let s = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["useCallback"])(()=>{
        r && u({
            type: 6,
            time: Date.now()
        });
    }, [
        r
    ]), a = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["useCallback"])((o, n)=>{
        let { reverseOrder: i = !1, gutter: p = 8, defaultPosition: d } = n || {}, h = t.filter((m)=>(m.position || d) === (o.position || d) && m.height), v = h.findIndex((m)=>m.id === o.id), S = h.filter((m, E)=>E < v && m.visible).length;
        return h.filter((m)=>m.visible).slice(...i ? [
            S + 1
        ] : [
            0,
            S
        ]).reduce((m, E)=>m + (E.height || 0) + p, 0);
    }, [
        t
    ]);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        t.forEach((o)=>{
            if (o.dismissed) ee(o.id, o.removeDelay);
            else {
                let n = b.get(o.id);
                n && (clearTimeout(n), b.delete(o.id));
            }
        });
    }, [
        t
    ]), {
        toasts: t,
        handlers: {
            updateHeight: K,
            startPause: X,
            endPause: s,
            calculateOffset: a
        }
    };
};
;
;
;
;
;
var oe = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["keyframes"]`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
 transform: scale(1) rotate(45deg);
  opacity: 1;
}`, re = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["keyframes"]`
from {
  transform: scale(0);
  opacity: 0;
}
to {
  transform: scale(1);
  opacity: 1;
}`, se = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["keyframes"]`
from {
  transform: scale(0) rotate(90deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(90deg);
	opacity: 1;
}`, k = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["styled"])("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e)=>e.primary || "#ff4b4b"};
  position: relative;
  transform: rotate(45deg);

  animation: ${oe} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;

  &:after,
  &:before {
    content: '';
    animation: ${re} 0.15s ease-out forwards;
    animation-delay: 150ms;
    position: absolute;
    border-radius: 3px;
    opacity: 0;
    background: ${(e)=>e.secondary || "#fff"};
    bottom: 9px;
    left: 4px;
    height: 2px;
    width: 12px;
  }

  &:before {
    animation: ${se} 0.15s ease-out forwards;
    animation-delay: 180ms;
    transform: rotate(90deg);
  }
`;
;
var ne = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["keyframes"]`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`, V = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["styled"])("div")`
  width: 12px;
  height: 12px;
  box-sizing: border-box;
  border: 2px solid;
  border-radius: 100%;
  border-color: ${(e)=>e.secondary || "#e0e0e0"};
  border-right-color: ${(e)=>e.primary || "#616161"};
  animation: ${ne} 1s linear infinite;
`;
;
var pe = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["keyframes"]`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(45deg);
	opacity: 1;
}`, de = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["keyframes"]`
0% {
	height: 0;
	width: 0;
	opacity: 0;
}
40% {
  height: 0;
	width: 6px;
	opacity: 1;
}
100% {
  opacity: 1;
  height: 10px;
}`, _ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["styled"])("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e)=>e.primary || "#61d345"};
  position: relative;
  transform: rotate(45deg);

  animation: ${pe} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;
  &:after {
    content: '';
    box-sizing: border-box;
    animation: ${de} 0.2s ease-out forwards;
    opacity: 0;
    animation-delay: 200ms;
    position: absolute;
    border-right: 2px solid;
    border-bottom: 2px solid;
    border-color: ${(e)=>e.secondary || "#fff"};
    bottom: 6px;
    left: 6px;
    height: 10px;
    width: 6px;
  }
`;
var ue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["styled"])("div")`
  position: absolute;
`, le = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["styled"])("div")`
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 20px;
  min-height: 20px;
`, fe = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["keyframes"]`
from {
  transform: scale(0.6);
  opacity: 0.4;
}
to {
  transform: scale(1);
  opacity: 1;
}`, Te = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["styled"])("div")`
  position: relative;
  transform: scale(0.6);
  opacity: 0.4;
  min-width: 20px;
  animation: ${fe} 0.3s 0.12s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
`, M = ({ toast: e })=>{
    let { icon: t, type: r, iconTheme: s } = e;
    return t !== void 0 ? typeof t == "string" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement(Te, null, t) : t : r === "blank" ? null : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement(le, null, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement(V, {
        ...s
    }), r !== "loading" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement(ue, null, r === "error" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement(k, {
        ...s
    }) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement(_, {
        ...s
    })));
};
var ye = (e)=>`
0% {transform: translate3d(0,${e * -200}%,0) scale(.6); opacity:.5;}
100% {transform: translate3d(0,0,0) scale(1); opacity:1;}
`, ge = (e)=>`
0% {transform: translate3d(0,0,-1px) scale(1); opacity:1;}
100% {transform: translate3d(0,${e * -150}%,-1px) scale(.6); opacity:0;}
`, he = "0%{opacity:0;} 100%{opacity:1;}", xe = "0%{opacity:1;} 100%{opacity:0;}", be = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["styled"])("div")`
  display: flex;
  align-items: center;
  background: #fff;
  color: #363636;
  line-height: 1.3;
  will-change: transform;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05);
  max-width: 350px;
  pointer-events: auto;
  padding: 8px 10px;
  border-radius: 8px;
`, Se = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["styled"])("div")`
  display: flex;
  justify-content: center;
  margin: 4px 10px;
  color: inherit;
  flex: 1 1 auto;
  white-space: pre-line;
`, Ae = (e, t)=>{
    let s = e.includes("top") ? 1 : -1, [a, o] = A() ? [
        he,
        xe
    ] : [
        ye(s),
        ge(s)
    ];
    return {
        animation: t ? `${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["keyframes"])(a)} 0.35s cubic-bezier(.21,1.02,.73,1) forwards` : `${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["keyframes"])(o)} 0.4s forwards cubic-bezier(.06,.71,.55,1)`
    };
}, C = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.memo(({ toast: e, position: t, style: r, children: s })=>{
    let a = e.height ? Ae(e.position || t || "top-center", e.visible) : {
        opacity: 0
    }, o = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement(M, {
        toast: e
    }), n = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement(Se, {
        ...e.ariaProps
    }, f(e.message, e));
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement(be, {
        className: e.className,
        style: {
            ...a,
            ...r,
            ...e.style
        }
    }, typeof s == "function" ? s({
        icon: o,
        message: n
    }) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.Fragment, null, o, n));
});
;
;
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["setup"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement);
var ve = ({ id: e, className: t, style: r, onHeightUpdate: s, children: a })=>{
    let o = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.useCallback({
        "ve.useCallback[o]": (n)=>{
            if (n) {
                let i = {
                    "ve.useCallback[o].i": ()=>{
                        let p = n.getBoundingClientRect().height;
                        s(e, p);
                    }
                }["ve.useCallback[o].i"];
                i(), new MutationObserver(i).observe(n, {
                    subtree: !0,
                    childList: !0,
                    characterData: !0
                });
            }
        }
    }["ve.useCallback[o]"], [
        e,
        s
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement("div", {
        ref: o,
        className: t,
        style: r
    }, a);
}, Ee = (e, t)=>{
    let r = e.includes("top"), s = r ? {
        top: 0
    } : {
        bottom: 0
    }, a = e.includes("center") ? {
        justifyContent: "center"
    } : e.includes("right") ? {
        justifyContent: "flex-end"
    } : {};
    return {
        left: 0,
        right: 0,
        display: "flex",
        position: "absolute",
        transition: A() ? void 0 : "all 230ms cubic-bezier(.21,1.02,.73,1)",
        transform: `translateY(${t * (r ? 1 : -1)}px)`,
        ...s,
        ...a
    };
}, De = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$goober$2f$dist$2f$goober$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["css"]`
  z-index: 9999;
  > * {
    pointer-events: auto;
  }
`, R = 16, Oe = ({ reverseOrder: e, position: t = "top-center", toastOptions: r, gutter: s, children: a, containerStyle: o, containerClassName: n })=>{
    let { toasts: i, handlers: p } = O(r);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement("div", {
        id: "_rht_toaster",
        style: {
            position: "fixed",
            zIndex: 9999,
            top: R,
            left: R,
            right: R,
            bottom: R,
            pointerEvents: "none",
            ...o
        },
        className: n,
        onMouseEnter: p.startPause,
        onMouseLeave: p.endPause
    }, i.map((d)=>{
        let h = d.position || t, v = p.calculateOffset(d, {
            reverseOrder: e,
            gutter: s,
            defaultPosition: t
        }), S = Ee(h, v);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement(ve, {
            id: d.id,
            key: d.id,
            onHeightUpdate: p.updateHeight,
            className: d.visible ? De : "",
            style: S
        }, d.type === "custom" ? f(d.message, d) : a ? a(d) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__.createElement(C, {
            toast: d,
            position: h
        }));
    }));
};
var Vt = c;
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/react-dom/cjs/react-dom.development.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"use strict";
"production" !== ("TURBOPACK compile-time value", "development") && function() {
    function noop() {}
    function testStringCoercion(value) {
        return "" + value;
    }
    function createPortal$1(children, containerInfo, implementation) {
        var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
        try {
            testStringCoercion(key);
            var JSCompiler_inline_result = !1;
        } catch (e) {
            JSCompiler_inline_result = !0;
        }
        JSCompiler_inline_result && (console.error("The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", "function" === typeof Symbol && Symbol.toStringTag && key[Symbol.toStringTag] || key.constructor.name || "Object"), testStringCoercion(key));
        return {
            $$typeof: REACT_PORTAL_TYPE,
            key: null == key ? null : "" + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    function getCrossOriginStringAs(as, input) {
        if ("font" === as) return "";
        if ("string" === typeof input) return "use-credentials" === input ? input : "";
    }
    function getValueDescriptorExpectingObjectForWarning(thing) {
        return null === thing ? "`null`" : void 0 === thing ? "`undefined`" : "" === thing ? "an empty string" : 'something with type "' + typeof thing + '"';
    }
    function getValueDescriptorExpectingEnumForWarning(thing) {
        return null === thing ? "`null`" : void 0 === thing ? "`undefined`" : "" === thing ? "an empty string" : "string" === typeof thing ? JSON.stringify(thing) : "number" === typeof thing ? "`" + thing + "`" : 'something with type "' + typeof thing + '"';
    }
    function resolveDispatcher() {
        var dispatcher = ReactSharedInternals.H;
        null === dispatcher && console.error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var React = __turbopack_require__("[project]/node_modules/react/index.js [client] (ecmascript)"), Internals = {
        d: {
            f: noop,
            r: function() {
                throw Error("Invalid form element. requestFormReset must be passed a form that was rendered by React.");
            },
            D: noop,
            C: noop,
            L: noop,
            m: noop,
            X: noop,
            S: noop,
            M: noop
        },
        p: 0,
        findDOMNode: null
    }, REACT_PORTAL_TYPE = Symbol.for("react.portal"), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
    "function" === typeof Map && null != Map.prototype && "function" === typeof Map.prototype.forEach && "function" === typeof Set && null != Set.prototype && "function" === typeof Set.prototype.clear && "function" === typeof Set.prototype.forEach || console.error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    exports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
    exports.createPortal = function(children, container) {
        var key = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
        if (!container || 1 !== container.nodeType && 9 !== container.nodeType && 11 !== container.nodeType) throw Error("Target container is not a DOM element.");
        return createPortal$1(children, container, null, key);
    };
    exports.flushSync = function(fn) {
        var previousTransition = ReactSharedInternals.T, previousUpdatePriority = Internals.p;
        try {
            if (ReactSharedInternals.T = null, Internals.p = 2, fn) return fn();
        } finally{
            ReactSharedInternals.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f() && console.error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
        }
    };
    exports.preconnect = function(href, options) {
        "string" === typeof href && href ? null != options && "object" !== typeof options ? console.error("ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.", getValueDescriptorExpectingEnumForWarning(options)) : null != options && "string" !== typeof options.crossOrigin && console.error("ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.", getValueDescriptorExpectingObjectForWarning(options.crossOrigin)) : console.error("ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
        "string" === typeof href && (options ? (options = options.crossOrigin, options = "string" === typeof options ? "use-credentials" === options ? options : "" : void 0) : options = null, Internals.d.C(href, options));
    };
    exports.prefetchDNS = function(href) {
        if ("string" !== typeof href || !href) console.error("ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
        else if (1 < arguments.length) {
            var options = arguments[1];
            "object" === typeof options && options.hasOwnProperty("crossOrigin") ? console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options)) : console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options));
        }
        "string" === typeof href && Internals.d.D(href);
    };
    exports.preinit = function(href, options) {
        "string" === typeof href && href ? null == options || "object" !== typeof options ? console.error("ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.", getValueDescriptorExpectingEnumForWarning(options)) : "style" !== options.as && "script" !== options.as && console.error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".', getValueDescriptorExpectingEnumForWarning(options.as)) : console.error("ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
        if ("string" === typeof href && options && "string" === typeof options.as) {
            var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin), integrity = "string" === typeof options.integrity ? options.integrity : void 0, fetchPriority = "string" === typeof options.fetchPriority ? options.fetchPriority : void 0;
            "style" === as ? Internals.d.S(href, "string" === typeof options.precedence ? options.precedence : void 0, {
                crossOrigin: crossOrigin,
                integrity: integrity,
                fetchPriority: fetchPriority
            }) : "script" === as && Internals.d.X(href, {
                crossOrigin: crossOrigin,
                integrity: integrity,
                fetchPriority: fetchPriority,
                nonce: "string" === typeof options.nonce ? options.nonce : void 0
            });
        }
    };
    exports.preinitModule = function(href, options) {
        var encountered = "";
        "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
        void 0 !== options && "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && "as" in options && "script" !== options.as && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingEnumForWarning(options.as) + ".");
        if (encountered) console.error("ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s", encountered);
        else switch(encountered = options && "string" === typeof options.as ? options.as : "script", encountered){
            case "script":
                break;
            default:
                encountered = getValueDescriptorExpectingEnumForWarning(encountered), console.error('ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)', encountered, href);
        }
        if ("string" === typeof href) if ("object" === typeof options && null !== options) {
            if (null == options.as || "script" === options.as) encountered = getCrossOriginStringAs(options.as, options.crossOrigin), Internals.d.M(href, {
                crossOrigin: encountered,
                integrity: "string" === typeof options.integrity ? options.integrity : void 0,
                nonce: "string" === typeof options.nonce ? options.nonce : void 0
            });
        } else null == options && Internals.d.M(href);
    };
    exports.preload = function(href, options) {
        var encountered = "";
        "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
        null == options || "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : "string" === typeof options.as && options.as || (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
        encountered && console.error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s', encountered);
        if ("string" === typeof href && "object" === typeof options && null !== options && "string" === typeof options.as) {
            encountered = options.as;
            var crossOrigin = getCrossOriginStringAs(encountered, options.crossOrigin);
            Internals.d.L(href, encountered, {
                crossOrigin: crossOrigin,
                integrity: "string" === typeof options.integrity ? options.integrity : void 0,
                nonce: "string" === typeof options.nonce ? options.nonce : void 0,
                type: "string" === typeof options.type ? options.type : void 0,
                fetchPriority: "string" === typeof options.fetchPriority ? options.fetchPriority : void 0,
                referrerPolicy: "string" === typeof options.referrerPolicy ? options.referrerPolicy : void 0,
                imageSrcSet: "string" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,
                imageSizes: "string" === typeof options.imageSizes ? options.imageSizes : void 0,
                media: "string" === typeof options.media ? options.media : void 0
            });
        }
    };
    exports.preloadModule = function(href, options) {
        var encountered = "";
        "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
        void 0 !== options && "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && "as" in options && "string" !== typeof options.as && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
        encountered && console.error('ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s', encountered);
        "string" === typeof href && (options ? (encountered = getCrossOriginStringAs(options.as, options.crossOrigin), Internals.d.m(href, {
            as: "string" === typeof options.as && "script" !== options.as ? options.as : void 0,
            crossOrigin: encountered,
            integrity: "string" === typeof options.integrity ? options.integrity : void 0
        })) : Internals.d.m(href));
    };
    exports.requestFormReset = function(form) {
        Internals.d.r(form);
    };
    exports.unstable_batchedUpdates = function(fn, a) {
        return fn(a);
    };
    exports.useFormState = function(action, initialState, permalink) {
        return resolveDispatcher().useFormState(action, initialState, permalink);
    };
    exports.useFormStatus = function() {
        return resolveDispatcher().useHostTransitionStatus();
    };
    exports.version = "19.0.0";
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
}();
}}),
"[project]/node_modules/react-dom/index.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
        return;
    }
    if ("TURBOPACK compile-time truthy", 1) {
        // This branch is unreachable because this function is only called
        // in production, but the condition is true only in development.
        // Therefore if the branch is still here, dead code elimination wasn't
        // properly applied.
        // Don't change the message. React DevTools relies on it. Also make sure
        // this message doesn't occur elsewhere in this function, or it will cause
        // a false positive.
        throw new Error('^_^');
    }
    try {
        // Verify that the code above has been dead code eliminated (DCE'd).
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
        // DevTools shouldn't crash React, no matter what.
        // We should still report in case we break this code.
        console.error(err);
    }
}
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_require__("[project]/node_modules/react-dom/cjs/react-dom.development.js [client] (ecmascript)");
}
}}),
"[project]/node_modules/lodash/_listCacheClear.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */ function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
}
module.exports = listCacheClear;
}}),
"[project]/node_modules/lodash/eq.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */ function eq(value, other) {
    return value === other || value !== value && other !== other;
}
module.exports = eq;
}}),
"[project]/node_modules/lodash/_assocIndexOf.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var eq = __turbopack_require__("[project]/node_modules/lodash/eq.js [client] (ecmascript)");
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if (eq(array[length][0], key)) {
            return length;
        }
    }
    return -1;
}
module.exports = assocIndexOf;
}}),
"[project]/node_modules/lodash/_listCacheDelete.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var assocIndexOf = __turbopack_require__("[project]/node_modules/lodash/_assocIndexOf.js [client] (ecmascript)");
/** Used for built-in method references. */ var arrayProto = Array.prototype;
/** Built-in value references. */ var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
        data.pop();
    } else {
        splice.call(data, index, 1);
    }
    --this.size;
    return true;
}
module.exports = listCacheDelete;
}}),
"[project]/node_modules/lodash/_listCacheGet.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var assocIndexOf = __turbopack_require__("[project]/node_modules/lodash/_assocIndexOf.js [client] (ecmascript)");
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
}
module.exports = listCacheGet;
}}),
"[project]/node_modules/lodash/_listCacheHas.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var assocIndexOf = __turbopack_require__("[project]/node_modules/lodash/_assocIndexOf.js [client] (ecmascript)");
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
}
module.exports = listCacheHas;
}}),
"[project]/node_modules/lodash/_listCacheSet.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var assocIndexOf = __turbopack_require__("[project]/node_modules/lodash/_assocIndexOf.js [client] (ecmascript)");
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */ function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        ++this.size;
        data.push([
            key,
            value
        ]);
    } else {
        data[index][1] = value;
    }
    return this;
}
module.exports = listCacheSet;
}}),
"[project]/node_modules/lodash/_ListCache.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var listCacheClear = __turbopack_require__("[project]/node_modules/lodash/_listCacheClear.js [client] (ecmascript)"), listCacheDelete = __turbopack_require__("[project]/node_modules/lodash/_listCacheDelete.js [client] (ecmascript)"), listCacheGet = __turbopack_require__("[project]/node_modules/lodash/_listCacheGet.js [client] (ecmascript)"), listCacheHas = __turbopack_require__("[project]/node_modules/lodash/_listCacheHas.js [client] (ecmascript)"), listCacheSet = __turbopack_require__("[project]/node_modules/lodash/_listCacheSet.js [client] (ecmascript)");
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
module.exports = ListCache;
}}),
"[project]/node_modules/lodash/_stackClear.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var ListCache = __turbopack_require__("[project]/node_modules/lodash/_ListCache.js [client] (ecmascript)");
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */ function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
}
module.exports = stackClear;
}}),
"[project]/node_modules/lodash/_stackDelete.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function stackDelete(key) {
    var data = this.__data__, result = data['delete'](key);
    this.size = data.size;
    return result;
}
module.exports = stackDelete;
}}),
"[project]/node_modules/lodash/_stackGet.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function stackGet(key) {
    return this.__data__.get(key);
}
module.exports = stackGet;
}}),
"[project]/node_modules/lodash/_stackHas.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function stackHas(key) {
    return this.__data__.has(key);
}
module.exports = stackHas;
}}),
"[project]/node_modules/lodash/_freeGlobal.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
module.exports = freeGlobal;
}}),
"[project]/node_modules/lodash/_root.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var freeGlobal = __turbopack_require__("[project]/node_modules/lodash/_freeGlobal.js [client] (ecmascript)");
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
module.exports = root;
}}),
"[project]/node_modules/lodash/_Symbol.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var root = __turbopack_require__("[project]/node_modules/lodash/_root.js [client] (ecmascript)");
/** Built-in value references. */ var Symbol = root.Symbol;
module.exports = Symbol;
}}),
"[project]/node_modules/lodash/_getRawTag.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var Symbol = __turbopack_require__("[project]/node_modules/lodash/_Symbol.js [client] (ecmascript)");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {}
    var result = nativeObjectToString.call(value);
    if ("TURBOPACK compile-time truthy", 1) {
        if (isOwn) {
            value[symToStringTag] = tag;
        } else {
            delete value[symToStringTag];
        }
    }
    return result;
}
module.exports = getRawTag;
}}),
"[project]/node_modules/lodash/_objectToString.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function objectToString(value) {
    return nativeObjectToString.call(value);
}
module.exports = objectToString;
}}),
"[project]/node_modules/lodash/_baseGetTag.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var Symbol = __turbopack_require__("[project]/node_modules/lodash/_Symbol.js [client] (ecmascript)"), getRawTag = __turbopack_require__("[project]/node_modules/lodash/_getRawTag.js [client] (ecmascript)"), objectToString = __turbopack_require__("[project]/node_modules/lodash/_objectToString.js [client] (ecmascript)");
/** `Object#toString` result references. */ var nullTag = '[object Null]', undefinedTag = '[object Undefined]';
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function baseGetTag(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
module.exports = baseGetTag;
}}),
"[project]/node_modules/lodash/isObject.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
}
module.exports = isObject;
}}),
"[project]/node_modules/lodash/isFunction.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var baseGetTag = __turbopack_require__("[project]/node_modules/lodash/_baseGetTag.js [client] (ecmascript)"), isObject = __turbopack_require__("[project]/node_modules/lodash/isObject.js [client] (ecmascript)");
/** `Object#toString` result references. */ var asyncTag = '[object AsyncFunction]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    if (!isObject(value)) {
        return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
module.exports = isFunction;
}}),
"[project]/node_modules/lodash/_coreJsData.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var root = __turbopack_require__("[project]/node_modules/lodash/_root.js [client] (ecmascript)");
/** Used to detect overreaching core-js shims. */ var coreJsData = root['__core-js_shared__'];
module.exports = coreJsData;
}}),
"[project]/node_modules/lodash/_isMasked.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var coreJsData = __turbopack_require__("[project]/node_modules/lodash/_coreJsData.js [client] (ecmascript)");
/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */ function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
}
module.exports = isMasked;
}}),
"[project]/node_modules/lodash/_toSource.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/** Used for built-in method references. */ var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */ function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        } catch (e) {}
        try {
            return func + '';
        } catch (e) {}
    }
    return '';
}
module.exports = toSource;
}}),
"[project]/node_modules/lodash/_baseIsNative.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var isFunction = __turbopack_require__("[project]/node_modules/lodash/isFunction.js [client] (ecmascript)"), isMasked = __turbopack_require__("[project]/node_modules/lodash/_isMasked.js [client] (ecmascript)"), isObject = __turbopack_require__("[project]/node_modules/lodash/isObject.js [client] (ecmascript)"), toSource = __turbopack_require__("[project]/node_modules/lodash/_toSource.js [client] (ecmascript)");
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */ var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */ function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
        return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
}
module.exports = baseIsNative;
}}),
"[project]/node_modules/lodash/_getValue.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function getValue(object, key) {
    return object == null ? undefined : object[key];
}
module.exports = getValue;
}}),
"[project]/node_modules/lodash/_getNative.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var baseIsNative = __turbopack_require__("[project]/node_modules/lodash/_baseIsNative.js [client] (ecmascript)"), getValue = __turbopack_require__("[project]/node_modules/lodash/_getValue.js [client] (ecmascript)");
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */ function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
}
module.exports = getNative;
}}),
"[project]/node_modules/lodash/_Map.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var getNative = __turbopack_require__("[project]/node_modules/lodash/_getNative.js [client] (ecmascript)"), root = __turbopack_require__("[project]/node_modules/lodash/_root.js [client] (ecmascript)");
/* Built-in method references that are verified to be native. */ var Map = getNative(root, 'Map');
module.exports = Map;
}}),
"[project]/node_modules/lodash/_nativeCreate.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var getNative = __turbopack_require__("[project]/node_modules/lodash/_getNative.js [client] (ecmascript)");
/* Built-in method references that are verified to be native. */ var nativeCreate = getNative(Object, 'create');
module.exports = nativeCreate;
}}),
"[project]/node_modules/lodash/_hashClear.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var nativeCreate = __turbopack_require__("[project]/node_modules/lodash/_nativeCreate.js [client] (ecmascript)");
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */ function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
}
module.exports = hashClear;
}}),
"[project]/node_modules/lodash/_hashDelete.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = hashDelete;
}}),
"[project]/node_modules/lodash/_hashGet.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var nativeCreate = __turbopack_require__("[project]/node_modules/lodash/_nativeCreate.js [client] (ecmascript)");
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
module.exports = hashGet;
}}),
"[project]/node_modules/lodash/_hashHas.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var nativeCreate = __turbopack_require__("[project]/node_modules/lodash/_nativeCreate.js [client] (ecmascript)");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
module.exports = hashHas;
}}),
"[project]/node_modules/lodash/_hashSet.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var nativeCreate = __turbopack_require__("[project]/node_modules/lodash/_nativeCreate.js [client] (ecmascript)");
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */ function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
}
module.exports = hashSet;
}}),
"[project]/node_modules/lodash/_Hash.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var hashClear = __turbopack_require__("[project]/node_modules/lodash/_hashClear.js [client] (ecmascript)"), hashDelete = __turbopack_require__("[project]/node_modules/lodash/_hashDelete.js [client] (ecmascript)"), hashGet = __turbopack_require__("[project]/node_modules/lodash/_hashGet.js [client] (ecmascript)"), hashHas = __turbopack_require__("[project]/node_modules/lodash/_hashHas.js [client] (ecmascript)"), hashSet = __turbopack_require__("[project]/node_modules/lodash/_hashSet.js [client] (ecmascript)");
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;
}}),
"[project]/node_modules/lodash/_mapCacheClear.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var Hash = __turbopack_require__("[project]/node_modules/lodash/_Hash.js [client] (ecmascript)"), ListCache = __turbopack_require__("[project]/node_modules/lodash/_ListCache.js [client] (ecmascript)"), Map = __turbopack_require__("[project]/node_modules/lodash/_Map.js [client] (ecmascript)");
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */ function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
    };
}
module.exports = mapCacheClear;
}}),
"[project]/node_modules/lodash/_isKeyable.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */ function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
module.exports = isKeyable;
}}),
"[project]/node_modules/lodash/_getMapData.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var isKeyable = __turbopack_require__("[project]/node_modules/lodash/_isKeyable.js [client] (ecmascript)");
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */ function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
module.exports = getMapData;
}}),
"[project]/node_modules/lodash/_mapCacheDelete.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var getMapData = __turbopack_require__("[project]/node_modules/lodash/_getMapData.js [client] (ecmascript)");
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = mapCacheDelete;
}}),
"[project]/node_modules/lodash/_mapCacheGet.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var getMapData = __turbopack_require__("[project]/node_modules/lodash/_getMapData.js [client] (ecmascript)");
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function mapCacheGet(key) {
    return getMapData(this, key).get(key);
}
module.exports = mapCacheGet;
}}),
"[project]/node_modules/lodash/_mapCacheHas.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var getMapData = __turbopack_require__("[project]/node_modules/lodash/_getMapData.js [client] (ecmascript)");
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function mapCacheHas(key) {
    return getMapData(this, key).has(key);
}
module.exports = mapCacheHas;
}}),
"[project]/node_modules/lodash/_mapCacheSet.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var getMapData = __turbopack_require__("[project]/node_modules/lodash/_getMapData.js [client] (ecmascript)");
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */ function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
}
module.exports = mapCacheSet;
}}),
"[project]/node_modules/lodash/_MapCache.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var mapCacheClear = __turbopack_require__("[project]/node_modules/lodash/_mapCacheClear.js [client] (ecmascript)"), mapCacheDelete = __turbopack_require__("[project]/node_modules/lodash/_mapCacheDelete.js [client] (ecmascript)"), mapCacheGet = __turbopack_require__("[project]/node_modules/lodash/_mapCacheGet.js [client] (ecmascript)"), mapCacheHas = __turbopack_require__("[project]/node_modules/lodash/_mapCacheHas.js [client] (ecmascript)"), mapCacheSet = __turbopack_require__("[project]/node_modules/lodash/_mapCacheSet.js [client] (ecmascript)");
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
module.exports = MapCache;
}}),
"[project]/node_modules/lodash/_stackSet.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var ListCache = __turbopack_require__("[project]/node_modules/lodash/_ListCache.js [client] (ecmascript)"), Map = __turbopack_require__("[project]/node_modules/lodash/_Map.js [client] (ecmascript)"), MapCache = __turbopack_require__("[project]/node_modules/lodash/_MapCache.js [client] (ecmascript)");
/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */ function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([
                key,
                value
            ]);
            this.size = ++data.size;
            return this;
        }
        data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
}
module.exports = stackSet;
}}),
"[project]/node_modules/lodash/_Stack.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var ListCache = __turbopack_require__("[project]/node_modules/lodash/_ListCache.js [client] (ecmascript)"), stackClear = __turbopack_require__("[project]/node_modules/lodash/_stackClear.js [client] (ecmascript)"), stackDelete = __turbopack_require__("[project]/node_modules/lodash/_stackDelete.js [client] (ecmascript)"), stackGet = __turbopack_require__("[project]/node_modules/lodash/_stackGet.js [client] (ecmascript)"), stackHas = __turbopack_require__("[project]/node_modules/lodash/_stackHas.js [client] (ecmascript)"), stackSet = __turbopack_require__("[project]/node_modules/lodash/_stackSet.js [client] (ecmascript)");
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
}
// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
module.exports = Stack;
}}),
"[project]/node_modules/lodash/_setCacheAdd.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */ function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
}
module.exports = setCacheAdd;
}}),
"[project]/node_modules/lodash/_setCacheHas.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */ function setCacheHas(value) {
    return this.__data__.has(value);
}
module.exports = setCacheHas;
}}),
"[project]/node_modules/lodash/_SetCache.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var MapCache = __turbopack_require__("[project]/node_modules/lodash/_MapCache.js [client] (ecmascript)"), setCacheAdd = __turbopack_require__("[project]/node_modules/lodash/_setCacheAdd.js [client] (ecmascript)"), setCacheHas = __turbopack_require__("[project]/node_modules/lodash/_setCacheHas.js [client] (ecmascript)");
/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */ function SetCache(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new MapCache;
    while(++index < length){
        this.add(values[index]);
    }
}
// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
module.exports = SetCache;
}}),
"[project]/node_modules/lodash/_arraySome.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */ function arraySome(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (predicate(array[index], index, array)) {
            return true;
        }
    }
    return false;
}
module.exports = arraySome;
}}),
"[project]/node_modules/lodash/_cacheHas.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function cacheHas(cache, key) {
    return cache.has(key);
}
module.exports = cacheHas;
}}),
"[project]/node_modules/lodash/_equalArrays.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var SetCache = __turbopack_require__("[project]/node_modules/lodash/_SetCache.js [client] (ecmascript)"), arraySome = __turbopack_require__("[project]/node_modules/lodash/_arraySome.js [client] (ecmascript)"), cacheHas = __turbopack_require__("[project]/node_modules/lodash/_cacheHas.js [client] (ecmascript)");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
    }
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
    }
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
    stack.set(array, other);
    stack.set(other, array);
    // Ignore non-index properties.
    while(++index < arrLength){
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
            if (compared) {
                continue;
            }
            result = false;
            break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
            if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                }
            })) {
                result = false;
                break;
            }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
        }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
}
module.exports = equalArrays;
}}),
"[project]/node_modules/lodash/_Uint8Array.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var root = __turbopack_require__("[project]/node_modules/lodash/_root.js [client] (ecmascript)");
/** Built-in value references. */ var Uint8Array = root.Uint8Array;
module.exports = Uint8Array;
}}),
"[project]/node_modules/lodash/_mapToArray.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */ function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
        result[++index] = [
            key,
            value
        ];
    });
    return result;
}
module.exports = mapToArray;
}}),
"[project]/node_modules/lodash/_setToArray.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */ function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
        result[++index] = value;
    });
    return result;
}
module.exports = setToArray;
}}),
"[project]/node_modules/lodash/_equalByTag.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var Symbol = __turbopack_require__("[project]/node_modules/lodash/_Symbol.js [client] (ecmascript)"), Uint8Array = __turbopack_require__("[project]/node_modules/lodash/_Uint8Array.js [client] (ecmascript)"), eq = __turbopack_require__("[project]/node_modules/lodash/eq.js [client] (ecmascript)"), equalArrays = __turbopack_require__("[project]/node_modules/lodash/_equalArrays.js [client] (ecmascript)"), mapToArray = __turbopack_require__("[project]/node_modules/lodash/_mapToArray.js [client] (ecmascript)"), setToArray = __turbopack_require__("[project]/node_modules/lodash/_setToArray.js [client] (ecmascript)");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/** `Object#toString` result references. */ var boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', mapTag = '[object Map]', numberTag = '[object Number]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]';
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch(tag){
        case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
            }
            object = object.buffer;
            other = other.buffer;
        case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                return false;
            }
            return true;
        case boolTag:
        case dateTag:
        case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);
        case errorTag:
            return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == other + '';
        case mapTag:
            var convert = mapToArray;
        case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
                return false;
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) {
                return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;
        case symbolTag:
            if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
    }
    return false;
}
module.exports = equalByTag;
}}),
"[project]/node_modules/lodash/_arrayPush.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */ function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while(++index < length){
        array[offset + index] = values[index];
    }
    return array;
}
module.exports = arrayPush;
}}),
"[project]/node_modules/lodash/isArray.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
module.exports = isArray;
}}),
"[project]/node_modules/lodash/_baseGetAllKeys.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var arrayPush = __turbopack_require__("[project]/node_modules/lodash/_arrayPush.js [client] (ecmascript)"), isArray = __turbopack_require__("[project]/node_modules/lodash/isArray.js [client] (ecmascript)");
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}
module.exports = baseGetAllKeys;
}}),
"[project]/node_modules/lodash/_arrayFilter.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */ function arrayFilter(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while(++index < length){
        var value = array[index];
        if (predicate(value, index, array)) {
            result[resIndex++] = value;
        }
    }
    return result;
}
module.exports = arrayFilter;
}}),
"[project]/node_modules/lodash/stubArray.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */ function stubArray() {
    return [];
}
module.exports = stubArray;
}}),
"[project]/node_modules/lodash/_getSymbols.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var arrayFilter = __turbopack_require__("[project]/node_modules/lodash/_arrayFilter.js [client] (ecmascript)"), stubArray = __turbopack_require__("[project]/node_modules/lodash/stubArray.js [client] (ecmascript)");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) {
        return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
    });
};
module.exports = getSymbols;
}}),
"[project]/node_modules/lodash/_baseTimes.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while(++index < n){
        result[index] = iteratee(index);
    }
    return result;
}
module.exports = baseTimes;
}}),
"[project]/node_modules/lodash/isObjectLike.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return value != null && typeof value == 'object';
}
module.exports = isObjectLike;
}}),
"[project]/node_modules/lodash/_baseIsArguments.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var baseGetTag = __turbopack_require__("[project]/node_modules/lodash/_baseGetTag.js [client] (ecmascript)"), isObjectLike = __turbopack_require__("[project]/node_modules/lodash/isObjectLike.js [client] (ecmascript)");
/** `Object#toString` result references. */ var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */ function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
}
module.exports = baseIsArguments;
}}),
"[project]/node_modules/lodash/isArguments.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var baseIsArguments = __turbopack_require__("[project]/node_modules/lodash/_baseIsArguments.js [client] (ecmascript)"), isObjectLike = __turbopack_require__("[project]/node_modules/lodash/isObjectLike.js [client] (ecmascript)");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ var isArguments = baseIsArguments(function() {
    return arguments;
}()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
module.exports = isArguments;
}}),
"[project]/node_modules/lodash/stubFalse.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */ function stubFalse() {
    return false;
}
module.exports = stubFalse;
}}),
"[project]/node_modules/lodash/isBuffer.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var root = __turbopack_require__("[project]/node_modules/lodash/_root.js [client] (ecmascript)"), stubFalse = __turbopack_require__("[project]/node_modules/lodash/stubFalse.js [client] (ecmascript)");
/** Detect free variable `exports`. */ var freeExports = ("TURBOPACK compile-time value", "object") == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && ("TURBOPACK compile-time value", "object") == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */ var isBuffer = nativeIsBuffer || stubFalse;
module.exports = isBuffer;
}}),
"[project]/node_modules/lodash/_isIndex.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
module.exports = isIndex;
}}),
"[project]/node_modules/lodash/isLength.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
module.exports = isLength;
}}),
"[project]/node_modules/lodash/_baseIsTypedArray.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var baseGetTag = __turbopack_require__("[project]/node_modules/lodash/_baseGetTag.js [client] (ecmascript)"), isLength = __turbopack_require__("[project]/node_modules/lodash/isLength.js [client] (ecmascript)"), isObjectLike = __turbopack_require__("[project]/node_modules/lodash/isObjectLike.js [client] (ecmascript)");
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */ function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
module.exports = baseIsTypedArray;
}}),
"[project]/node_modules/lodash/_baseUnary.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */ function baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
module.exports = baseUnary;
}}),
"[project]/node_modules/lodash/_nodeUtil.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var freeGlobal = __turbopack_require__("[project]/node_modules/lodash/_freeGlobal.js [client] (ecmascript)");
/** Detect free variable `exports`. */ var freeExports = ("TURBOPACK compile-time value", "object") == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && ("TURBOPACK compile-time value", "object") == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */ var nodeUtil = function() {
    try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;
        if (types) {
            return types;
        }
        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
}();
module.exports = nodeUtil;
}}),
"[project]/node_modules/lodash/isTypedArray.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var baseIsTypedArray = __turbopack_require__("[project]/node_modules/lodash/_baseIsTypedArray.js [client] (ecmascript)"), baseUnary = __turbopack_require__("[project]/node_modules/lodash/_baseUnary.js [client] (ecmascript)"), nodeUtil = __turbopack_require__("[project]/node_modules/lodash/_nodeUtil.js [client] (ecmascript)");
/* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
module.exports = isTypedArray;
}}),
"[project]/node_modules/lodash/_arrayLikeKeys.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var baseTimes = __turbopack_require__("[project]/node_modules/lodash/_baseTimes.js [client] (ecmascript)"), isArguments = __turbopack_require__("[project]/node_modules/lodash/isArguments.js [client] (ecmascript)"), isArray = __turbopack_require__("[project]/node_modules/lodash/isArray.js [client] (ecmascript)"), isBuffer = __turbopack_require__("[project]/node_modules/lodash/isBuffer.js [client] (ecmascript)"), isIndex = __turbopack_require__("[project]/node_modules/lodash/_isIndex.js [client] (ecmascript)"), isTypedArray = __turbopack_require__("[project]/node_modules/lodash/isTypedArray.js [client] (ecmascript)");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for(var key in value){
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (// Safari 9 has enumerable `arguments.length` in strict mode.
        key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
        isIndex(key, length)))) {
            result.push(key);
        }
    }
    return result;
}
module.exports = arrayLikeKeys;
}}),
"[project]/node_modules/lodash/_isPrototype.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
}
module.exports = isPrototype;
}}),
"[project]/node_modules/lodash/_overArg.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
module.exports = overArg;
}}),
"[project]/node_modules/lodash/_nativeKeys.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var overArg = __turbopack_require__("[project]/node_modules/lodash/_overArg.js [client] (ecmascript)");
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeKeys = overArg(Object.keys, Object);
module.exports = nativeKeys;
}}),
"[project]/node_modules/lodash/_baseKeys.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var isPrototype = __turbopack_require__("[project]/node_modules/lodash/_isPrototype.js [client] (ecmascript)"), nativeKeys = __turbopack_require__("[project]/node_modules/lodash/_nativeKeys.js [client] (ecmascript)");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeys(object) {
    if (!isPrototype(object)) {
        return nativeKeys(object);
    }
    var result = [];
    for(var key in Object(object)){
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
        }
    }
    return result;
}
module.exports = baseKeys;
}}),
"[project]/node_modules/lodash/isArrayLike.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var isFunction = __turbopack_require__("[project]/node_modules/lodash/isFunction.js [client] (ecmascript)"), isLength = __turbopack_require__("[project]/node_modules/lodash/isLength.js [client] (ecmascript)");
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
module.exports = isArrayLike;
}}),
"[project]/node_modules/lodash/keys.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var arrayLikeKeys = __turbopack_require__("[project]/node_modules/lodash/_arrayLikeKeys.js [client] (ecmascript)"), baseKeys = __turbopack_require__("[project]/node_modules/lodash/_baseKeys.js [client] (ecmascript)"), isArrayLike = __turbopack_require__("[project]/node_modules/lodash/isArrayLike.js [client] (ecmascript)");
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */ function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
module.exports = keys;
}}),
"[project]/node_modules/lodash/_getAllKeys.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var baseGetAllKeys = __turbopack_require__("[project]/node_modules/lodash/_baseGetAllKeys.js [client] (ecmascript)"), getSymbols = __turbopack_require__("[project]/node_modules/lodash/_getSymbols.js [client] (ecmascript)"), keys = __turbopack_require__("[project]/node_modules/lodash/keys.js [client] (ecmascript)");
/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
}
module.exports = getAllKeys;
}}),
"[project]/node_modules/lodash/_equalObjects.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var getAllKeys = __turbopack_require__("[project]/node_modules/lodash/_getAllKeys.js [client] (ecmascript)");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
        return false;
    }
    var index = objLength;
    while(index--){
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
        }
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while(++index < objLength){
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
        }
        skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
        }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
}
module.exports = equalObjects;
}}),
"[project]/node_modules/lodash/_DataView.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var getNative = __turbopack_require__("[project]/node_modules/lodash/_getNative.js [client] (ecmascript)"), root = __turbopack_require__("[project]/node_modules/lodash/_root.js [client] (ecmascript)");
/* Built-in method references that are verified to be native. */ var DataView = getNative(root, 'DataView');
module.exports = DataView;
}}),
"[project]/node_modules/lodash/_Promise.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var getNative = __turbopack_require__("[project]/node_modules/lodash/_getNative.js [client] (ecmascript)"), root = __turbopack_require__("[project]/node_modules/lodash/_root.js [client] (ecmascript)");
/* Built-in method references that are verified to be native. */ var Promise = getNative(root, 'Promise');
module.exports = Promise;
}}),
"[project]/node_modules/lodash/_Set.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var getNative = __turbopack_require__("[project]/node_modules/lodash/_getNative.js [client] (ecmascript)"), root = __turbopack_require__("[project]/node_modules/lodash/_root.js [client] (ecmascript)");
/* Built-in method references that are verified to be native. */ var Set = getNative(root, 'Set');
module.exports = Set;
}}),
"[project]/node_modules/lodash/_WeakMap.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var getNative = __turbopack_require__("[project]/node_modules/lodash/_getNative.js [client] (ecmascript)"), root = __turbopack_require__("[project]/node_modules/lodash/_root.js [client] (ecmascript)");
/* Built-in method references that are verified to be native. */ var WeakMap = getNative(root, 'WeakMap');
module.exports = WeakMap;
}}),
"[project]/node_modules/lodash/_getTag.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var DataView = __turbopack_require__("[project]/node_modules/lodash/_DataView.js [client] (ecmascript)"), Map = __turbopack_require__("[project]/node_modules/lodash/_Map.js [client] (ecmascript)"), Promise = __turbopack_require__("[project]/node_modules/lodash/_Promise.js [client] (ecmascript)"), Set = __turbopack_require__("[project]/node_modules/lodash/_Set.js [client] (ecmascript)"), WeakMap = __turbopack_require__("[project]/node_modules/lodash/_WeakMap.js [client] (ecmascript)"), baseGetTag = __turbopack_require__("[project]/node_modules/lodash/_baseGetTag.js [client] (ecmascript)"), toSource = __turbopack_require__("[project]/node_modules/lodash/_toSource.js [client] (ecmascript)");
/** `Object#toString` result references. */ var mapTag = '[object Map]', objectTag = '[object Object]', promiseTag = '[object Promise]', setTag = '[object Set]', weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';
/** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ var getTag = baseGetTag;
// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) {
    getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : '';
        if (ctorString) {
            switch(ctorString){
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
        }
        return result;
    };
}
module.exports = getTag;
}}),
"[project]/node_modules/lodash/_baseIsEqualDeep.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var Stack = __turbopack_require__("[project]/node_modules/lodash/_Stack.js [client] (ecmascript)"), equalArrays = __turbopack_require__("[project]/node_modules/lodash/_equalArrays.js [client] (ecmascript)"), equalByTag = __turbopack_require__("[project]/node_modules/lodash/_equalByTag.js [client] (ecmascript)"), equalObjects = __turbopack_require__("[project]/node_modules/lodash/_equalObjects.js [client] (ecmascript)"), getTag = __turbopack_require__("[project]/node_modules/lodash/_getTag.js [client] (ecmascript)"), isArray = __turbopack_require__("[project]/node_modules/lodash/isArray.js [client] (ecmascript)"), isBuffer = __turbopack_require__("[project]/node_modules/lodash/isBuffer.js [client] (ecmascript)"), isTypedArray = __turbopack_require__("[project]/node_modules/lodash/isTypedArray.js [client] (ecmascript)");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', objectTag = '[object Object]';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
            return false;
        }
        objIsArr = true;
        objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
        if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
    }
    if (!isSameTag) {
        return false;
    }
    stack || (stack = new Stack);
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}
module.exports = baseIsEqualDeep;
}}),
"[project]/node_modules/lodash/_baseIsEqual.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var baseIsEqualDeep = __turbopack_require__("[project]/node_modules/lodash/_baseIsEqualDeep.js [client] (ecmascript)"), isObjectLike = __turbopack_require__("[project]/node_modules/lodash/isObjectLike.js [client] (ecmascript)");
/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */ function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
        return true;
    }
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}
module.exports = baseIsEqual;
}}),
"[project]/node_modules/lodash/isEqual.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var baseIsEqual = __turbopack_require__("[project]/node_modules/lodash/_baseIsEqual.js [client] (ecmascript)");
/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */ function isEqual(value, other) {
    return baseIsEqual(value, other);
}
module.exports = isEqual;
}}),
"[project]/node_modules/next/dist/compiled/buffer/index.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
(function() {
    var e = {
        675: function(e, r) {
            "use strict";
            r.byteLength = byteLength;
            r.toByteArray = toByteArray;
            r.fromByteArray = fromByteArray;
            var t = [];
            var f = [];
            var n = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
            var i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            for(var o = 0, u = i.length; o < u; ++o){
                t[o] = i[o];
                f[i.charCodeAt(o)] = o;
            }
            f["-".charCodeAt(0)] = 62;
            f["_".charCodeAt(0)] = 63;
            function getLens(e) {
                var r = e.length;
                if (r % 4 > 0) {
                    throw new Error("Invalid string. Length must be a multiple of 4");
                }
                var t = e.indexOf("=");
                if (t === -1) t = r;
                var f = t === r ? 0 : 4 - t % 4;
                return [
                    t,
                    f
                ];
            }
            function byteLength(e) {
                var r = getLens(e);
                var t = r[0];
                var f = r[1];
                return (t + f) * 3 / 4 - f;
            }
            function _byteLength(e, r, t) {
                return (r + t) * 3 / 4 - t;
            }
            function toByteArray(e) {
                var r;
                var t = getLens(e);
                var i = t[0];
                var o = t[1];
                var u = new n(_byteLength(e, i, o));
                var a = 0;
                var s = o > 0 ? i - 4 : i;
                var h;
                for(h = 0; h < s; h += 4){
                    r = f[e.charCodeAt(h)] << 18 | f[e.charCodeAt(h + 1)] << 12 | f[e.charCodeAt(h + 2)] << 6 | f[e.charCodeAt(h + 3)];
                    u[a++] = r >> 16 & 255;
                    u[a++] = r >> 8 & 255;
                    u[a++] = r & 255;
                }
                if (o === 2) {
                    r = f[e.charCodeAt(h)] << 2 | f[e.charCodeAt(h + 1)] >> 4;
                    u[a++] = r & 255;
                }
                if (o === 1) {
                    r = f[e.charCodeAt(h)] << 10 | f[e.charCodeAt(h + 1)] << 4 | f[e.charCodeAt(h + 2)] >> 2;
                    u[a++] = r >> 8 & 255;
                    u[a++] = r & 255;
                }
                return u;
            }
            function tripletToBase64(e) {
                return t[e >> 18 & 63] + t[e >> 12 & 63] + t[e >> 6 & 63] + t[e & 63];
            }
            function encodeChunk(e, r, t) {
                var f;
                var n = [];
                for(var i = r; i < t; i += 3){
                    f = (e[i] << 16 & 16711680) + (e[i + 1] << 8 & 65280) + (e[i + 2] & 255);
                    n.push(tripletToBase64(f));
                }
                return n.join("");
            }
            function fromByteArray(e) {
                var r;
                var f = e.length;
                var n = f % 3;
                var i = [];
                var o = 16383;
                for(var u = 0, a = f - n; u < a; u += o){
                    i.push(encodeChunk(e, u, u + o > a ? a : u + o));
                }
                if (n === 1) {
                    r = e[f - 1];
                    i.push(t[r >> 2] + t[r << 4 & 63] + "==");
                } else if (n === 2) {
                    r = (e[f - 2] << 8) + e[f - 1];
                    i.push(t[r >> 10] + t[r >> 4 & 63] + t[r << 2 & 63] + "=");
                }
                return i.join("");
            }
        },
        72: function(e, r, t) {
            "use strict";
            /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ var f = t(675);
            var n = t(783);
            var i = typeof Symbol === "function" && typeof Symbol.for === "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
            r.Buffer = Buffer;
            r.SlowBuffer = SlowBuffer;
            r.INSPECT_MAX_BYTES = 50;
            var o = 2147483647;
            r.kMaxLength = o;
            Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
            if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
                console.error("This browser lacks typed array (Uint8Array) support which is required by " + "`buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
            }
            function typedArraySupport() {
                try {
                    var e = new Uint8Array(1);
                    var r = {
                        foo: function() {
                            return 42;
                        }
                    };
                    Object.setPrototypeOf(r, Uint8Array.prototype);
                    Object.setPrototypeOf(e, r);
                    return e.foo() === 42;
                } catch (e) {
                    return false;
                }
            }
            Object.defineProperty(Buffer.prototype, "parent", {
                enumerable: true,
                get: function() {
                    if (!Buffer.isBuffer(this)) return undefined;
                    return this.buffer;
                }
            });
            Object.defineProperty(Buffer.prototype, "offset", {
                enumerable: true,
                get: function() {
                    if (!Buffer.isBuffer(this)) return undefined;
                    return this.byteOffset;
                }
            });
            function createBuffer(e) {
                if (e > o) {
                    throw new RangeError('The value "' + e + '" is invalid for option "size"');
                }
                var r = new Uint8Array(e);
                Object.setPrototypeOf(r, Buffer.prototype);
                return r;
            }
            function Buffer(e, r, t) {
                if (typeof e === "number") {
                    if (typeof r === "string") {
                        throw new TypeError('The "string" argument must be of type string. Received type number');
                    }
                    return allocUnsafe(e);
                }
                return from(e, r, t);
            }
            Buffer.poolSize = 8192;
            function from(e, r, t) {
                if (typeof e === "string") {
                    return fromString(e, r);
                }
                if (ArrayBuffer.isView(e)) {
                    return fromArrayLike(e);
                }
                if (e == null) {
                    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, " + "or Array-like Object. Received type " + typeof e);
                }
                if (isInstance(e, ArrayBuffer) || e && isInstance(e.buffer, ArrayBuffer)) {
                    return fromArrayBuffer(e, r, t);
                }
                if (typeof SharedArrayBuffer !== "undefined" && (isInstance(e, SharedArrayBuffer) || e && isInstance(e.buffer, SharedArrayBuffer))) {
                    return fromArrayBuffer(e, r, t);
                }
                if (typeof e === "number") {
                    throw new TypeError('The "value" argument must not be of type number. Received type number');
                }
                var f = e.valueOf && e.valueOf();
                if (f != null && f !== e) {
                    return Buffer.from(f, r, t);
                }
                var n = fromObject(e);
                if (n) return n;
                if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof e[Symbol.toPrimitive] === "function") {
                    return Buffer.from(e[Symbol.toPrimitive]("string"), r, t);
                }
                throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, " + "or Array-like Object. Received type " + typeof e);
            }
            Buffer.from = function(e, r, t) {
                return from(e, r, t);
            };
            Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
            Object.setPrototypeOf(Buffer, Uint8Array);
            function assertSize(e) {
                if (typeof e !== "number") {
                    throw new TypeError('"size" argument must be of type number');
                } else if (e < 0) {
                    throw new RangeError('The value "' + e + '" is invalid for option "size"');
                }
            }
            function alloc(e, r, t) {
                assertSize(e);
                if (e <= 0) {
                    return createBuffer(e);
                }
                if (r !== undefined) {
                    return typeof t === "string" ? createBuffer(e).fill(r, t) : createBuffer(e).fill(r);
                }
                return createBuffer(e);
            }
            Buffer.alloc = function(e, r, t) {
                return alloc(e, r, t);
            };
            function allocUnsafe(e) {
                assertSize(e);
                return createBuffer(e < 0 ? 0 : checked(e) | 0);
            }
            Buffer.allocUnsafe = function(e) {
                return allocUnsafe(e);
            };
            Buffer.allocUnsafeSlow = function(e) {
                return allocUnsafe(e);
            };
            function fromString(e, r) {
                if (typeof r !== "string" || r === "") {
                    r = "utf8";
                }
                if (!Buffer.isEncoding(r)) {
                    throw new TypeError("Unknown encoding: " + r);
                }
                var t = byteLength(e, r) | 0;
                var f = createBuffer(t);
                var n = f.write(e, r);
                if (n !== t) {
                    f = f.slice(0, n);
                }
                return f;
            }
            function fromArrayLike(e) {
                var r = e.length < 0 ? 0 : checked(e.length) | 0;
                var t = createBuffer(r);
                for(var f = 0; f < r; f += 1){
                    t[f] = e[f] & 255;
                }
                return t;
            }
            function fromArrayBuffer(e, r, t) {
                if (r < 0 || e.byteLength < r) {
                    throw new RangeError('"offset" is outside of buffer bounds');
                }
                if (e.byteLength < r + (t || 0)) {
                    throw new RangeError('"length" is outside of buffer bounds');
                }
                var f;
                if (r === undefined && t === undefined) {
                    f = new Uint8Array(e);
                } else if (t === undefined) {
                    f = new Uint8Array(e, r);
                } else {
                    f = new Uint8Array(e, r, t);
                }
                Object.setPrototypeOf(f, Buffer.prototype);
                return f;
            }
            function fromObject(e) {
                if (Buffer.isBuffer(e)) {
                    var r = checked(e.length) | 0;
                    var t = createBuffer(r);
                    if (t.length === 0) {
                        return t;
                    }
                    e.copy(t, 0, 0, r);
                    return t;
                }
                if (e.length !== undefined) {
                    if (typeof e.length !== "number" || numberIsNaN(e.length)) {
                        return createBuffer(0);
                    }
                    return fromArrayLike(e);
                }
                if (e.type === "Buffer" && Array.isArray(e.data)) {
                    return fromArrayLike(e.data);
                }
            }
            function checked(e) {
                if (e >= o) {
                    throw new RangeError("Attempt to allocate Buffer larger than maximum " + "size: 0x" + o.toString(16) + " bytes");
                }
                return e | 0;
            }
            function SlowBuffer(e) {
                if (+e != e) {
                    e = 0;
                }
                return Buffer.alloc(+e);
            }
            Buffer.isBuffer = function isBuffer(e) {
                return e != null && e._isBuffer === true && e !== Buffer.prototype;
            };
            Buffer.compare = function compare(e, r) {
                if (isInstance(e, Uint8Array)) e = Buffer.from(e, e.offset, e.byteLength);
                if (isInstance(r, Uint8Array)) r = Buffer.from(r, r.offset, r.byteLength);
                if (!Buffer.isBuffer(e) || !Buffer.isBuffer(r)) {
                    throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
                }
                if (e === r) return 0;
                var t = e.length;
                var f = r.length;
                for(var n = 0, i = Math.min(t, f); n < i; ++n){
                    if (e[n] !== r[n]) {
                        t = e[n];
                        f = r[n];
                        break;
                    }
                }
                if (t < f) return -1;
                if (f < t) return 1;
                return 0;
            };
            Buffer.isEncoding = function isEncoding(e) {
                switch(String(e).toLowerCase()){
                    case "hex":
                    case "utf8":
                    case "utf-8":
                    case "ascii":
                    case "latin1":
                    case "binary":
                    case "base64":
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return true;
                    default:
                        return false;
                }
            };
            Buffer.concat = function concat(e, r) {
                if (!Array.isArray(e)) {
                    throw new TypeError('"list" argument must be an Array of Buffers');
                }
                if (e.length === 0) {
                    return Buffer.alloc(0);
                }
                var t;
                if (r === undefined) {
                    r = 0;
                    for(t = 0; t < e.length; ++t){
                        r += e[t].length;
                    }
                }
                var f = Buffer.allocUnsafe(r);
                var n = 0;
                for(t = 0; t < e.length; ++t){
                    var i = e[t];
                    if (isInstance(i, Uint8Array)) {
                        i = Buffer.from(i);
                    }
                    if (!Buffer.isBuffer(i)) {
                        throw new TypeError('"list" argument must be an Array of Buffers');
                    }
                    i.copy(f, n);
                    n += i.length;
                }
                return f;
            };
            function byteLength(e, r) {
                if (Buffer.isBuffer(e)) {
                    return e.length;
                }
                if (ArrayBuffer.isView(e) || isInstance(e, ArrayBuffer)) {
                    return e.byteLength;
                }
                if (typeof e !== "string") {
                    throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + "Received type " + typeof e);
                }
                var t = e.length;
                var f = arguments.length > 2 && arguments[2] === true;
                if (!f && t === 0) return 0;
                var n = false;
                for(;;){
                    switch(r){
                        case "ascii":
                        case "latin1":
                        case "binary":
                            return t;
                        case "utf8":
                        case "utf-8":
                            return utf8ToBytes(e).length;
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return t * 2;
                        case "hex":
                            return t >>> 1;
                        case "base64":
                            return base64ToBytes(e).length;
                        default:
                            if (n) {
                                return f ? -1 : utf8ToBytes(e).length;
                            }
                            r = ("" + r).toLowerCase();
                            n = true;
                    }
                }
            }
            Buffer.byteLength = byteLength;
            function slowToString(e, r, t) {
                var f = false;
                if (r === undefined || r < 0) {
                    r = 0;
                }
                if (r > this.length) {
                    return "";
                }
                if (t === undefined || t > this.length) {
                    t = this.length;
                }
                if (t <= 0) {
                    return "";
                }
                t >>>= 0;
                r >>>= 0;
                if (t <= r) {
                    return "";
                }
                if (!e) e = "utf8";
                while(true){
                    switch(e){
                        case "hex":
                            return hexSlice(this, r, t);
                        case "utf8":
                        case "utf-8":
                            return utf8Slice(this, r, t);
                        case "ascii":
                            return asciiSlice(this, r, t);
                        case "latin1":
                        case "binary":
                            return latin1Slice(this, r, t);
                        case "base64":
                            return base64Slice(this, r, t);
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return utf16leSlice(this, r, t);
                        default:
                            if (f) throw new TypeError("Unknown encoding: " + e);
                            e = (e + "").toLowerCase();
                            f = true;
                    }
                }
            }
            Buffer.prototype._isBuffer = true;
            function swap(e, r, t) {
                var f = e[r];
                e[r] = e[t];
                e[t] = f;
            }
            Buffer.prototype.swap16 = function swap16() {
                var e = this.length;
                if (e % 2 !== 0) {
                    throw new RangeError("Buffer size must be a multiple of 16-bits");
                }
                for(var r = 0; r < e; r += 2){
                    swap(this, r, r + 1);
                }
                return this;
            };
            Buffer.prototype.swap32 = function swap32() {
                var e = this.length;
                if (e % 4 !== 0) {
                    throw new RangeError("Buffer size must be a multiple of 32-bits");
                }
                for(var r = 0; r < e; r += 4){
                    swap(this, r, r + 3);
                    swap(this, r + 1, r + 2);
                }
                return this;
            };
            Buffer.prototype.swap64 = function swap64() {
                var e = this.length;
                if (e % 8 !== 0) {
                    throw new RangeError("Buffer size must be a multiple of 64-bits");
                }
                for(var r = 0; r < e; r += 8){
                    swap(this, r, r + 7);
                    swap(this, r + 1, r + 6);
                    swap(this, r + 2, r + 5);
                    swap(this, r + 3, r + 4);
                }
                return this;
            };
            Buffer.prototype.toString = function toString() {
                var e = this.length;
                if (e === 0) return "";
                if (arguments.length === 0) return utf8Slice(this, 0, e);
                return slowToString.apply(this, arguments);
            };
            Buffer.prototype.toLocaleString = Buffer.prototype.toString;
            Buffer.prototype.equals = function equals(e) {
                if (!Buffer.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
                if (this === e) return true;
                return Buffer.compare(this, e) === 0;
            };
            Buffer.prototype.inspect = function inspect() {
                var e = "";
                var t = r.INSPECT_MAX_BYTES;
                e = this.toString("hex", 0, t).replace(/(.{2})/g, "$1 ").trim();
                if (this.length > t) e += " ... ";
                return "<Buffer " + e + ">";
            };
            if (i) {
                Buffer.prototype[i] = Buffer.prototype.inspect;
            }
            Buffer.prototype.compare = function compare(e, r, t, f, n) {
                if (isInstance(e, Uint8Array)) {
                    e = Buffer.from(e, e.offset, e.byteLength);
                }
                if (!Buffer.isBuffer(e)) {
                    throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + "Received type " + typeof e);
                }
                if (r === undefined) {
                    r = 0;
                }
                if (t === undefined) {
                    t = e ? e.length : 0;
                }
                if (f === undefined) {
                    f = 0;
                }
                if (n === undefined) {
                    n = this.length;
                }
                if (r < 0 || t > e.length || f < 0 || n > this.length) {
                    throw new RangeError("out of range index");
                }
                if (f >= n && r >= t) {
                    return 0;
                }
                if (f >= n) {
                    return -1;
                }
                if (r >= t) {
                    return 1;
                }
                r >>>= 0;
                t >>>= 0;
                f >>>= 0;
                n >>>= 0;
                if (this === e) return 0;
                var i = n - f;
                var o = t - r;
                var u = Math.min(i, o);
                var a = this.slice(f, n);
                var s = e.slice(r, t);
                for(var h = 0; h < u; ++h){
                    if (a[h] !== s[h]) {
                        i = a[h];
                        o = s[h];
                        break;
                    }
                }
                if (i < o) return -1;
                if (o < i) return 1;
                return 0;
            };
            function bidirectionalIndexOf(e, r, t, f, n) {
                if (e.length === 0) return -1;
                if (typeof t === "string") {
                    f = t;
                    t = 0;
                } else if (t > 2147483647) {
                    t = 2147483647;
                } else if (t < -2147483648) {
                    t = -2147483648;
                }
                t = +t;
                if (numberIsNaN(t)) {
                    t = n ? 0 : e.length - 1;
                }
                if (t < 0) t = e.length + t;
                if (t >= e.length) {
                    if (n) return -1;
                    else t = e.length - 1;
                } else if (t < 0) {
                    if (n) t = 0;
                    else return -1;
                }
                if (typeof r === "string") {
                    r = Buffer.from(r, f);
                }
                if (Buffer.isBuffer(r)) {
                    if (r.length === 0) {
                        return -1;
                    }
                    return arrayIndexOf(e, r, t, f, n);
                } else if (typeof r === "number") {
                    r = r & 255;
                    if (typeof Uint8Array.prototype.indexOf === "function") {
                        if (n) {
                            return Uint8Array.prototype.indexOf.call(e, r, t);
                        } else {
                            return Uint8Array.prototype.lastIndexOf.call(e, r, t);
                        }
                    }
                    return arrayIndexOf(e, [
                        r
                    ], t, f, n);
                }
                throw new TypeError("val must be string, number or Buffer");
            }
            function arrayIndexOf(e, r, t, f, n) {
                var i = 1;
                var o = e.length;
                var u = r.length;
                if (f !== undefined) {
                    f = String(f).toLowerCase();
                    if (f === "ucs2" || f === "ucs-2" || f === "utf16le" || f === "utf-16le") {
                        if (e.length < 2 || r.length < 2) {
                            return -1;
                        }
                        i = 2;
                        o /= 2;
                        u /= 2;
                        t /= 2;
                    }
                }
                function read(e, r) {
                    if (i === 1) {
                        return e[r];
                    } else {
                        return e.readUInt16BE(r * i);
                    }
                }
                var a;
                if (n) {
                    var s = -1;
                    for(a = t; a < o; a++){
                        if (read(e, a) === read(r, s === -1 ? 0 : a - s)) {
                            if (s === -1) s = a;
                            if (a - s + 1 === u) return s * i;
                        } else {
                            if (s !== -1) a -= a - s;
                            s = -1;
                        }
                    }
                } else {
                    if (t + u > o) t = o - u;
                    for(a = t; a >= 0; a--){
                        var h = true;
                        for(var c = 0; c < u; c++){
                            if (read(e, a + c) !== read(r, c)) {
                                h = false;
                                break;
                            }
                        }
                        if (h) return a;
                    }
                }
                return -1;
            }
            Buffer.prototype.includes = function includes(e, r, t) {
                return this.indexOf(e, r, t) !== -1;
            };
            Buffer.prototype.indexOf = function indexOf(e, r, t) {
                return bidirectionalIndexOf(this, e, r, t, true);
            };
            Buffer.prototype.lastIndexOf = function lastIndexOf(e, r, t) {
                return bidirectionalIndexOf(this, e, r, t, false);
            };
            function hexWrite(e, r, t, f) {
                t = Number(t) || 0;
                var n = e.length - t;
                if (!f) {
                    f = n;
                } else {
                    f = Number(f);
                    if (f > n) {
                        f = n;
                    }
                }
                var i = r.length;
                if (f > i / 2) {
                    f = i / 2;
                }
                for(var o = 0; o < f; ++o){
                    var u = parseInt(r.substr(o * 2, 2), 16);
                    if (numberIsNaN(u)) return o;
                    e[t + o] = u;
                }
                return o;
            }
            function utf8Write(e, r, t, f) {
                return blitBuffer(utf8ToBytes(r, e.length - t), e, t, f);
            }
            function asciiWrite(e, r, t, f) {
                return blitBuffer(asciiToBytes(r), e, t, f);
            }
            function latin1Write(e, r, t, f) {
                return asciiWrite(e, r, t, f);
            }
            function base64Write(e, r, t, f) {
                return blitBuffer(base64ToBytes(r), e, t, f);
            }
            function ucs2Write(e, r, t, f) {
                return blitBuffer(utf16leToBytes(r, e.length - t), e, t, f);
            }
            Buffer.prototype.write = function write(e, r, t, f) {
                if (r === undefined) {
                    f = "utf8";
                    t = this.length;
                    r = 0;
                } else if (t === undefined && typeof r === "string") {
                    f = r;
                    t = this.length;
                    r = 0;
                } else if (isFinite(r)) {
                    r = r >>> 0;
                    if (isFinite(t)) {
                        t = t >>> 0;
                        if (f === undefined) f = "utf8";
                    } else {
                        f = t;
                        t = undefined;
                    }
                } else {
                    throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                }
                var n = this.length - r;
                if (t === undefined || t > n) t = n;
                if (e.length > 0 && (t < 0 || r < 0) || r > this.length) {
                    throw new RangeError("Attempt to write outside buffer bounds");
                }
                if (!f) f = "utf8";
                var i = false;
                for(;;){
                    switch(f){
                        case "hex":
                            return hexWrite(this, e, r, t);
                        case "utf8":
                        case "utf-8":
                            return utf8Write(this, e, r, t);
                        case "ascii":
                            return asciiWrite(this, e, r, t);
                        case "latin1":
                        case "binary":
                            return latin1Write(this, e, r, t);
                        case "base64":
                            return base64Write(this, e, r, t);
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return ucs2Write(this, e, r, t);
                        default:
                            if (i) throw new TypeError("Unknown encoding: " + f);
                            f = ("" + f).toLowerCase();
                            i = true;
                    }
                }
            };
            Buffer.prototype.toJSON = function toJSON() {
                return {
                    type: "Buffer",
                    data: Array.prototype.slice.call(this._arr || this, 0)
                };
            };
            function base64Slice(e, r, t) {
                if (r === 0 && t === e.length) {
                    return f.fromByteArray(e);
                } else {
                    return f.fromByteArray(e.slice(r, t));
                }
            }
            function utf8Slice(e, r, t) {
                t = Math.min(e.length, t);
                var f = [];
                var n = r;
                while(n < t){
                    var i = e[n];
                    var o = null;
                    var u = i > 239 ? 4 : i > 223 ? 3 : i > 191 ? 2 : 1;
                    if (n + u <= t) {
                        var a, s, h, c;
                        switch(u){
                            case 1:
                                if (i < 128) {
                                    o = i;
                                }
                                break;
                            case 2:
                                a = e[n + 1];
                                if ((a & 192) === 128) {
                                    c = (i & 31) << 6 | a & 63;
                                    if (c > 127) {
                                        o = c;
                                    }
                                }
                                break;
                            case 3:
                                a = e[n + 1];
                                s = e[n + 2];
                                if ((a & 192) === 128 && (s & 192) === 128) {
                                    c = (i & 15) << 12 | (a & 63) << 6 | s & 63;
                                    if (c > 2047 && (c < 55296 || c > 57343)) {
                                        o = c;
                                    }
                                }
                                break;
                            case 4:
                                a = e[n + 1];
                                s = e[n + 2];
                                h = e[n + 3];
                                if ((a & 192) === 128 && (s & 192) === 128 && (h & 192) === 128) {
                                    c = (i & 15) << 18 | (a & 63) << 12 | (s & 63) << 6 | h & 63;
                                    if (c > 65535 && c < 1114112) {
                                        o = c;
                                    }
                                }
                        }
                    }
                    if (o === null) {
                        o = 65533;
                        u = 1;
                    } else if (o > 65535) {
                        o -= 65536;
                        f.push(o >>> 10 & 1023 | 55296);
                        o = 56320 | o & 1023;
                    }
                    f.push(o);
                    n += u;
                }
                return decodeCodePointsArray(f);
            }
            var u = 4096;
            function decodeCodePointsArray(e) {
                var r = e.length;
                if (r <= u) {
                    return String.fromCharCode.apply(String, e);
                }
                var t = "";
                var f = 0;
                while(f < r){
                    t += String.fromCharCode.apply(String, e.slice(f, f += u));
                }
                return t;
            }
            function asciiSlice(e, r, t) {
                var f = "";
                t = Math.min(e.length, t);
                for(var n = r; n < t; ++n){
                    f += String.fromCharCode(e[n] & 127);
                }
                return f;
            }
            function latin1Slice(e, r, t) {
                var f = "";
                t = Math.min(e.length, t);
                for(var n = r; n < t; ++n){
                    f += String.fromCharCode(e[n]);
                }
                return f;
            }
            function hexSlice(e, r, t) {
                var f = e.length;
                if (!r || r < 0) r = 0;
                if (!t || t < 0 || t > f) t = f;
                var n = "";
                for(var i = r; i < t; ++i){
                    n += s[e[i]];
                }
                return n;
            }
            function utf16leSlice(e, r, t) {
                var f = e.slice(r, t);
                var n = "";
                for(var i = 0; i < f.length; i += 2){
                    n += String.fromCharCode(f[i] + f[i + 1] * 256);
                }
                return n;
            }
            Buffer.prototype.slice = function slice(e, r) {
                var t = this.length;
                e = ~~e;
                r = r === undefined ? t : ~~r;
                if (e < 0) {
                    e += t;
                    if (e < 0) e = 0;
                } else if (e > t) {
                    e = t;
                }
                if (r < 0) {
                    r += t;
                    if (r < 0) r = 0;
                } else if (r > t) {
                    r = t;
                }
                if (r < e) r = e;
                var f = this.subarray(e, r);
                Object.setPrototypeOf(f, Buffer.prototype);
                return f;
            };
            function checkOffset(e, r, t) {
                if (e % 1 !== 0 || e < 0) throw new RangeError("offset is not uint");
                if (e + r > t) throw new RangeError("Trying to access beyond buffer length");
            }
            Buffer.prototype.readUIntLE = function readUIntLE(e, r, t) {
                e = e >>> 0;
                r = r >>> 0;
                if (!t) checkOffset(e, r, this.length);
                var f = this[e];
                var n = 1;
                var i = 0;
                while(++i < r && (n *= 256)){
                    f += this[e + i] * n;
                }
                return f;
            };
            Buffer.prototype.readUIntBE = function readUIntBE(e, r, t) {
                e = e >>> 0;
                r = r >>> 0;
                if (!t) {
                    checkOffset(e, r, this.length);
                }
                var f = this[e + --r];
                var n = 1;
                while(r > 0 && (n *= 256)){
                    f += this[e + --r] * n;
                }
                return f;
            };
            Buffer.prototype.readUInt8 = function readUInt8(e, r) {
                e = e >>> 0;
                if (!r) checkOffset(e, 1, this.length);
                return this[e];
            };
            Buffer.prototype.readUInt16LE = function readUInt16LE(e, r) {
                e = e >>> 0;
                if (!r) checkOffset(e, 2, this.length);
                return this[e] | this[e + 1] << 8;
            };
            Buffer.prototype.readUInt16BE = function readUInt16BE(e, r) {
                e = e >>> 0;
                if (!r) checkOffset(e, 2, this.length);
                return this[e] << 8 | this[e + 1];
            };
            Buffer.prototype.readUInt32LE = function readUInt32LE(e, r) {
                e = e >>> 0;
                if (!r) checkOffset(e, 4, this.length);
                return (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;
            };
            Buffer.prototype.readUInt32BE = function readUInt32BE(e, r) {
                e = e >>> 0;
                if (!r) checkOffset(e, 4, this.length);
                return this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
            };
            Buffer.prototype.readIntLE = function readIntLE(e, r, t) {
                e = e >>> 0;
                r = r >>> 0;
                if (!t) checkOffset(e, r, this.length);
                var f = this[e];
                var n = 1;
                var i = 0;
                while(++i < r && (n *= 256)){
                    f += this[e + i] * n;
                }
                n *= 128;
                if (f >= n) f -= Math.pow(2, 8 * r);
                return f;
            };
            Buffer.prototype.readIntBE = function readIntBE(e, r, t) {
                e = e >>> 0;
                r = r >>> 0;
                if (!t) checkOffset(e, r, this.length);
                var f = r;
                var n = 1;
                var i = this[e + --f];
                while(f > 0 && (n *= 256)){
                    i += this[e + --f] * n;
                }
                n *= 128;
                if (i >= n) i -= Math.pow(2, 8 * r);
                return i;
            };
            Buffer.prototype.readInt8 = function readInt8(e, r) {
                e = e >>> 0;
                if (!r) checkOffset(e, 1, this.length);
                if (!(this[e] & 128)) return this[e];
                return (255 - this[e] + 1) * -1;
            };
            Buffer.prototype.readInt16LE = function readInt16LE(e, r) {
                e = e >>> 0;
                if (!r) checkOffset(e, 2, this.length);
                var t = this[e] | this[e + 1] << 8;
                return t & 32768 ? t | 4294901760 : t;
            };
            Buffer.prototype.readInt16BE = function readInt16BE(e, r) {
                e = e >>> 0;
                if (!r) checkOffset(e, 2, this.length);
                var t = this[e + 1] | this[e] << 8;
                return t & 32768 ? t | 4294901760 : t;
            };
            Buffer.prototype.readInt32LE = function readInt32LE(e, r) {
                e = e >>> 0;
                if (!r) checkOffset(e, 4, this.length);
                return this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
            };
            Buffer.prototype.readInt32BE = function readInt32BE(e, r) {
                e = e >>> 0;
                if (!r) checkOffset(e, 4, this.length);
                return this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
            };
            Buffer.prototype.readFloatLE = function readFloatLE(e, r) {
                e = e >>> 0;
                if (!r) checkOffset(e, 4, this.length);
                return n.read(this, e, true, 23, 4);
            };
            Buffer.prototype.readFloatBE = function readFloatBE(e, r) {
                e = e >>> 0;
                if (!r) checkOffset(e, 4, this.length);
                return n.read(this, e, false, 23, 4);
            };
            Buffer.prototype.readDoubleLE = function readDoubleLE(e, r) {
                e = e >>> 0;
                if (!r) checkOffset(e, 8, this.length);
                return n.read(this, e, true, 52, 8);
            };
            Buffer.prototype.readDoubleBE = function readDoubleBE(e, r) {
                e = e >>> 0;
                if (!r) checkOffset(e, 8, this.length);
                return n.read(this, e, false, 52, 8);
            };
            function checkInt(e, r, t, f, n, i) {
                if (!Buffer.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
                if (r > n || r < i) throw new RangeError('"value" argument is out of bounds');
                if (t + f > e.length) throw new RangeError("Index out of range");
            }
            Buffer.prototype.writeUIntLE = function writeUIntLE(e, r, t, f) {
                e = +e;
                r = r >>> 0;
                t = t >>> 0;
                if (!f) {
                    var n = Math.pow(2, 8 * t) - 1;
                    checkInt(this, e, r, t, n, 0);
                }
                var i = 1;
                var o = 0;
                this[r] = e & 255;
                while(++o < t && (i *= 256)){
                    this[r + o] = e / i & 255;
                }
                return r + t;
            };
            Buffer.prototype.writeUIntBE = function writeUIntBE(e, r, t, f) {
                e = +e;
                r = r >>> 0;
                t = t >>> 0;
                if (!f) {
                    var n = Math.pow(2, 8 * t) - 1;
                    checkInt(this, e, r, t, n, 0);
                }
                var i = t - 1;
                var o = 1;
                this[r + i] = e & 255;
                while(--i >= 0 && (o *= 256)){
                    this[r + i] = e / o & 255;
                }
                return r + t;
            };
            Buffer.prototype.writeUInt8 = function writeUInt8(e, r, t) {
                e = +e;
                r = r >>> 0;
                if (!t) checkInt(this, e, r, 1, 255, 0);
                this[r] = e & 255;
                return r + 1;
            };
            Buffer.prototype.writeUInt16LE = function writeUInt16LE(e, r, t) {
                e = +e;
                r = r >>> 0;
                if (!t) checkInt(this, e, r, 2, 65535, 0);
                this[r] = e & 255;
                this[r + 1] = e >>> 8;
                return r + 2;
            };
            Buffer.prototype.writeUInt16BE = function writeUInt16BE(e, r, t) {
                e = +e;
                r = r >>> 0;
                if (!t) checkInt(this, e, r, 2, 65535, 0);
                this[r] = e >>> 8;
                this[r + 1] = e & 255;
                return r + 2;
            };
            Buffer.prototype.writeUInt32LE = function writeUInt32LE(e, r, t) {
                e = +e;
                r = r >>> 0;
                if (!t) checkInt(this, e, r, 4, 4294967295, 0);
                this[r + 3] = e >>> 24;
                this[r + 2] = e >>> 16;
                this[r + 1] = e >>> 8;
                this[r] = e & 255;
                return r + 4;
            };
            Buffer.prototype.writeUInt32BE = function writeUInt32BE(e, r, t) {
                e = +e;
                r = r >>> 0;
                if (!t) checkInt(this, e, r, 4, 4294967295, 0);
                this[r] = e >>> 24;
                this[r + 1] = e >>> 16;
                this[r + 2] = e >>> 8;
                this[r + 3] = e & 255;
                return r + 4;
            };
            Buffer.prototype.writeIntLE = function writeIntLE(e, r, t, f) {
                e = +e;
                r = r >>> 0;
                if (!f) {
                    var n = Math.pow(2, 8 * t - 1);
                    checkInt(this, e, r, t, n - 1, -n);
                }
                var i = 0;
                var o = 1;
                var u = 0;
                this[r] = e & 255;
                while(++i < t && (o *= 256)){
                    if (e < 0 && u === 0 && this[r + i - 1] !== 0) {
                        u = 1;
                    }
                    this[r + i] = (e / o >> 0) - u & 255;
                }
                return r + t;
            };
            Buffer.prototype.writeIntBE = function writeIntBE(e, r, t, f) {
                e = +e;
                r = r >>> 0;
                if (!f) {
                    var n = Math.pow(2, 8 * t - 1);
                    checkInt(this, e, r, t, n - 1, -n);
                }
                var i = t - 1;
                var o = 1;
                var u = 0;
                this[r + i] = e & 255;
                while(--i >= 0 && (o *= 256)){
                    if (e < 0 && u === 0 && this[r + i + 1] !== 0) {
                        u = 1;
                    }
                    this[r + i] = (e / o >> 0) - u & 255;
                }
                return r + t;
            };
            Buffer.prototype.writeInt8 = function writeInt8(e, r, t) {
                e = +e;
                r = r >>> 0;
                if (!t) checkInt(this, e, r, 1, 127, -128);
                if (e < 0) e = 255 + e + 1;
                this[r] = e & 255;
                return r + 1;
            };
            Buffer.prototype.writeInt16LE = function writeInt16LE(e, r, t) {
                e = +e;
                r = r >>> 0;
                if (!t) checkInt(this, e, r, 2, 32767, -32768);
                this[r] = e & 255;
                this[r + 1] = e >>> 8;
                return r + 2;
            };
            Buffer.prototype.writeInt16BE = function writeInt16BE(e, r, t) {
                e = +e;
                r = r >>> 0;
                if (!t) checkInt(this, e, r, 2, 32767, -32768);
                this[r] = e >>> 8;
                this[r + 1] = e & 255;
                return r + 2;
            };
            Buffer.prototype.writeInt32LE = function writeInt32LE(e, r, t) {
                e = +e;
                r = r >>> 0;
                if (!t) checkInt(this, e, r, 4, 2147483647, -2147483648);
                this[r] = e & 255;
                this[r + 1] = e >>> 8;
                this[r + 2] = e >>> 16;
                this[r + 3] = e >>> 24;
                return r + 4;
            };
            Buffer.prototype.writeInt32BE = function writeInt32BE(e, r, t) {
                e = +e;
                r = r >>> 0;
                if (!t) checkInt(this, e, r, 4, 2147483647, -2147483648);
                if (e < 0) e = 4294967295 + e + 1;
                this[r] = e >>> 24;
                this[r + 1] = e >>> 16;
                this[r + 2] = e >>> 8;
                this[r + 3] = e & 255;
                return r + 4;
            };
            function checkIEEE754(e, r, t, f, n, i) {
                if (t + f > e.length) throw new RangeError("Index out of range");
                if (t < 0) throw new RangeError("Index out of range");
            }
            function writeFloat(e, r, t, f, i) {
                r = +r;
                t = t >>> 0;
                if (!i) {
                    checkIEEE754(e, r, t, 4, 34028234663852886e22, -34028234663852886e22);
                }
                n.write(e, r, t, f, 23, 4);
                return t + 4;
            }
            Buffer.prototype.writeFloatLE = function writeFloatLE(e, r, t) {
                return writeFloat(this, e, r, true, t);
            };
            Buffer.prototype.writeFloatBE = function writeFloatBE(e, r, t) {
                return writeFloat(this, e, r, false, t);
            };
            function writeDouble(e, r, t, f, i) {
                r = +r;
                t = t >>> 0;
                if (!i) {
                    checkIEEE754(e, r, t, 8, 17976931348623157e292, -17976931348623157e292);
                }
                n.write(e, r, t, f, 52, 8);
                return t + 8;
            }
            Buffer.prototype.writeDoubleLE = function writeDoubleLE(e, r, t) {
                return writeDouble(this, e, r, true, t);
            };
            Buffer.prototype.writeDoubleBE = function writeDoubleBE(e, r, t) {
                return writeDouble(this, e, r, false, t);
            };
            Buffer.prototype.copy = function copy(e, r, t, f) {
                if (!Buffer.isBuffer(e)) throw new TypeError("argument should be a Buffer");
                if (!t) t = 0;
                if (!f && f !== 0) f = this.length;
                if (r >= e.length) r = e.length;
                if (!r) r = 0;
                if (f > 0 && f < t) f = t;
                if (f === t) return 0;
                if (e.length === 0 || this.length === 0) return 0;
                if (r < 0) {
                    throw new RangeError("targetStart out of bounds");
                }
                if (t < 0 || t >= this.length) throw new RangeError("Index out of range");
                if (f < 0) throw new RangeError("sourceEnd out of bounds");
                if (f > this.length) f = this.length;
                if (e.length - r < f - t) {
                    f = e.length - r + t;
                }
                var n = f - t;
                if (this === e && typeof Uint8Array.prototype.copyWithin === "function") {
                    this.copyWithin(r, t, f);
                } else if (this === e && t < r && r < f) {
                    for(var i = n - 1; i >= 0; --i){
                        e[i + r] = this[i + t];
                    }
                } else {
                    Uint8Array.prototype.set.call(e, this.subarray(t, f), r);
                }
                return n;
            };
            Buffer.prototype.fill = function fill(e, r, t, f) {
                if (typeof e === "string") {
                    if (typeof r === "string") {
                        f = r;
                        r = 0;
                        t = this.length;
                    } else if (typeof t === "string") {
                        f = t;
                        t = this.length;
                    }
                    if (f !== undefined && typeof f !== "string") {
                        throw new TypeError("encoding must be a string");
                    }
                    if (typeof f === "string" && !Buffer.isEncoding(f)) {
                        throw new TypeError("Unknown encoding: " + f);
                    }
                    if (e.length === 1) {
                        var n = e.charCodeAt(0);
                        if (f === "utf8" && n < 128 || f === "latin1") {
                            e = n;
                        }
                    }
                } else if (typeof e === "number") {
                    e = e & 255;
                } else if (typeof e === "boolean") {
                    e = Number(e);
                }
                if (r < 0 || this.length < r || this.length < t) {
                    throw new RangeError("Out of range index");
                }
                if (t <= r) {
                    return this;
                }
                r = r >>> 0;
                t = t === undefined ? this.length : t >>> 0;
                if (!e) e = 0;
                var i;
                if (typeof e === "number") {
                    for(i = r; i < t; ++i){
                        this[i] = e;
                    }
                } else {
                    var o = Buffer.isBuffer(e) ? e : Buffer.from(e, f);
                    var u = o.length;
                    if (u === 0) {
                        throw new TypeError('The value "' + e + '" is invalid for argument "value"');
                    }
                    for(i = 0; i < t - r; ++i){
                        this[i + r] = o[i % u];
                    }
                }
                return this;
            };
            var a = /[^+/0-9A-Za-z-_]/g;
            function base64clean(e) {
                e = e.split("=")[0];
                e = e.trim().replace(a, "");
                if (e.length < 2) return "";
                while(e.length % 4 !== 0){
                    e = e + "=";
                }
                return e;
            }
            function utf8ToBytes(e, r) {
                r = r || Infinity;
                var t;
                var f = e.length;
                var n = null;
                var i = [];
                for(var o = 0; o < f; ++o){
                    t = e.charCodeAt(o);
                    if (t > 55295 && t < 57344) {
                        if (!n) {
                            if (t > 56319) {
                                if ((r -= 3) > -1) i.push(239, 191, 189);
                                continue;
                            } else if (o + 1 === f) {
                                if ((r -= 3) > -1) i.push(239, 191, 189);
                                continue;
                            }
                            n = t;
                            continue;
                        }
                        if (t < 56320) {
                            if ((r -= 3) > -1) i.push(239, 191, 189);
                            n = t;
                            continue;
                        }
                        t = (n - 55296 << 10 | t - 56320) + 65536;
                    } else if (n) {
                        if ((r -= 3) > -1) i.push(239, 191, 189);
                    }
                    n = null;
                    if (t < 128) {
                        if ((r -= 1) < 0) break;
                        i.push(t);
                    } else if (t < 2048) {
                        if ((r -= 2) < 0) break;
                        i.push(t >> 6 | 192, t & 63 | 128);
                    } else if (t < 65536) {
                        if ((r -= 3) < 0) break;
                        i.push(t >> 12 | 224, t >> 6 & 63 | 128, t & 63 | 128);
                    } else if (t < 1114112) {
                        if ((r -= 4) < 0) break;
                        i.push(t >> 18 | 240, t >> 12 & 63 | 128, t >> 6 & 63 | 128, t & 63 | 128);
                    } else {
                        throw new Error("Invalid code point");
                    }
                }
                return i;
            }
            function asciiToBytes(e) {
                var r = [];
                for(var t = 0; t < e.length; ++t){
                    r.push(e.charCodeAt(t) & 255);
                }
                return r;
            }
            function utf16leToBytes(e, r) {
                var t, f, n;
                var i = [];
                for(var o = 0; o < e.length; ++o){
                    if ((r -= 2) < 0) break;
                    t = e.charCodeAt(o);
                    f = t >> 8;
                    n = t % 256;
                    i.push(n);
                    i.push(f);
                }
                return i;
            }
            function base64ToBytes(e) {
                return f.toByteArray(base64clean(e));
            }
            function blitBuffer(e, r, t, f) {
                for(var n = 0; n < f; ++n){
                    if (n + t >= r.length || n >= e.length) break;
                    r[n + t] = e[n];
                }
                return n;
            }
            function isInstance(e, r) {
                return e instanceof r || e != null && e.constructor != null && e.constructor.name != null && e.constructor.name === r.name;
            }
            function numberIsNaN(e) {
                return e !== e;
            }
            var s = function() {
                var e = "0123456789abcdef";
                var r = new Array(256);
                for(var t = 0; t < 16; ++t){
                    var f = t * 16;
                    for(var n = 0; n < 16; ++n){
                        r[f + n] = e[t] + e[n];
                    }
                }
                return r;
            }();
        },
        783: function(e, r) {
            /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ r.read = function(e, r, t, f, n) {
                var i, o;
                var u = n * 8 - f - 1;
                var a = (1 << u) - 1;
                var s = a >> 1;
                var h = -7;
                var c = t ? n - 1 : 0;
                var l = t ? -1 : 1;
                var p = e[r + c];
                c += l;
                i = p & (1 << -h) - 1;
                p >>= -h;
                h += u;
                for(; h > 0; i = i * 256 + e[r + c], c += l, h -= 8){}
                o = i & (1 << -h) - 1;
                i >>= -h;
                h += f;
                for(; h > 0; o = o * 256 + e[r + c], c += l, h -= 8){}
                if (i === 0) {
                    i = 1 - s;
                } else if (i === a) {
                    return o ? NaN : (p ? -1 : 1) * Infinity;
                } else {
                    o = o + Math.pow(2, f);
                    i = i - s;
                }
                return (p ? -1 : 1) * o * Math.pow(2, i - f);
            };
            r.write = function(e, r, t, f, n, i) {
                var o, u, a;
                var s = i * 8 - n - 1;
                var h = (1 << s) - 1;
                var c = h >> 1;
                var l = n === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                var p = f ? 0 : i - 1;
                var y = f ? 1 : -1;
                var g = r < 0 || r === 0 && 1 / r < 0 ? 1 : 0;
                r = Math.abs(r);
                if (isNaN(r) || r === Infinity) {
                    u = isNaN(r) ? 1 : 0;
                    o = h;
                } else {
                    o = Math.floor(Math.log(r) / Math.LN2);
                    if (r * (a = Math.pow(2, -o)) < 1) {
                        o--;
                        a *= 2;
                    }
                    if (o + c >= 1) {
                        r += l / a;
                    } else {
                        r += l * Math.pow(2, 1 - c);
                    }
                    if (r * a >= 2) {
                        o++;
                        a /= 2;
                    }
                    if (o + c >= h) {
                        u = 0;
                        o = h;
                    } else if (o + c >= 1) {
                        u = (r * a - 1) * Math.pow(2, n);
                        o = o + c;
                    } else {
                        u = r * Math.pow(2, c - 1) * Math.pow(2, n);
                        o = 0;
                    }
                }
                for(; n >= 8; e[t + p] = u & 255, p += y, u /= 256, n -= 8){}
                o = o << n | u;
                s += n;
                for(; s > 0; e[t + p] = o & 255, p += y, o /= 256, s -= 8){}
                e[t + p - y] |= g * 128;
            };
        }
    };
    var r = {};
    function __nccwpck_require__(t) {
        var f = r[t];
        if (f !== undefined) {
            return f.exports;
        }
        var n = r[t] = {
            exports: {}
        };
        var i = true;
        try {
            e[t](n, n.exports, __nccwpck_require__);
            i = false;
        } finally{
            if (i) delete r[t];
        }
        return n.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
    var t = __nccwpck_require__(72);
    module.exports = t;
})();
}}),
"[project]/node_modules/react-quill/node_modules/quill/dist/quill.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/*!
 * Quill Editor v1.3.7
 * https://quilljs.com/
 * Copyright (c) 2014, Jason Chen
 * Copyright (c) 2013, salesforce.com
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/buffer/index.js [client] (ecmascript)");
(function webpackUniversalModuleDefinition(root, factory) {
    if ("TURBOPACK compile-time truthy", 1) module.exports = factory();
    else {
        "TURBOPACK unreachable";
    }
})(typeof self !== 'undefined' ? self : this, function() {
    return /******/ function(modules) {
        /******/ // The module cache
        /******/ var installedModules = {};
        /******/ /******/ // The require function
        /******/ function __webpack_require__(moduleId) {
            /******/ /******/ // Check if module is in cache
            /******/ if (installedModules[moduleId]) {
                /******/ return installedModules[moduleId].exports;
            /******/ }
            /******/ // Create a new module (and put it into the cache)
            /******/ var module1 = installedModules[moduleId] = {
                /******/ i: moduleId,
                /******/ l: false,
                /******/ exports: {}
            };
            /******/ /******/ // Execute the module function
            /******/ modules[moduleId].call(module1.exports, module1, module1.exports, __webpack_require__);
            /******/ /******/ // Flag the module as loaded
            /******/ module1.l = true;
            /******/ /******/ // Return the exports of the module
            /******/ return module1.exports;
        /******/ }
        /******/ /******/ /******/ // expose the modules object (__webpack_modules__)
        /******/ __webpack_require__.m = modules;
        /******/ /******/ // expose the module cache
        /******/ __webpack_require__.c = installedModules;
        /******/ /******/ // define getter function for harmony exports
        /******/ __webpack_require__.d = function(exports, name, getter) {
            /******/ if (!__webpack_require__.o(exports, name)) {
                /******/ Object.defineProperty(exports, name, {
                    /******/ configurable: false,
                    /******/ enumerable: true,
                    /******/ get: getter
                });
            /******/ }
        /******/ };
        /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/ __webpack_require__.n = function(module1) {
            /******/ var getter = module1 && module1.__esModule ? /******/ function getDefault() {
                return module1['default'];
            } : /******/ function getModuleExports() {
                return module1;
            };
            /******/ __webpack_require__.d(getter, 'a', getter);
            /******/ return getter;
        /******/ };
        /******/ /******/ // Object.prototype.hasOwnProperty.call
        /******/ __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
        };
        /******/ /******/ // __webpack_public_path__
        /******/ __webpack_require__.p = "";
        /******/ /******/ // Load entry module and return exports
        /******/ return __webpack_require__(__webpack_require__.s = 109);
    /******/ }([
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var container_1 = __webpack_require__(17);
            var format_1 = __webpack_require__(18);
            var leaf_1 = __webpack_require__(19);
            var scroll_1 = __webpack_require__(45);
            var inline_1 = __webpack_require__(46);
            var block_1 = __webpack_require__(47);
            var embed_1 = __webpack_require__(48);
            var text_1 = __webpack_require__(49);
            var attributor_1 = __webpack_require__(12);
            var class_1 = __webpack_require__(32);
            var style_1 = __webpack_require__(33);
            var store_1 = __webpack_require__(31);
            var Registry = __webpack_require__(1);
            var Parchment = {
                Scope: Registry.Scope,
                create: Registry.create,
                find: Registry.find,
                query: Registry.query,
                register: Registry.register,
                Container: container_1.default,
                Format: format_1.default,
                Leaf: leaf_1.default,
                Embed: embed_1.default,
                Scroll: scroll_1.default,
                Block: block_1.default,
                Inline: inline_1.default,
                Text: text_1.default,
                Attributor: {
                    Attribute: attributor_1.default,
                    Class: class_1.default,
                    Style: style_1.default,
                    Store: store_1.default
                }
            };
            exports.default = Parchment;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
                var extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
                };
                return function(d, b) {
                    extendStatics(d, b);
                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            }();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var ParchmentError = function(_super) {
                __extends(ParchmentError, _super);
                function ParchmentError(message) {
                    var _this = this;
                    message = '[Parchment] ' + message;
                    _this = _super.call(this, message) || this;
                    _this.message = message;
                    _this.name = _this.constructor.name;
                    return _this;
                }
                return ParchmentError;
            }(Error);
            exports.ParchmentError = ParchmentError;
            var attributes = {};
            var classes = {};
            var tags = {};
            var types = {};
            exports.DATA_KEY = '__blot';
            var Scope;
            (function(Scope) {
                Scope[Scope["TYPE"] = 3] = "TYPE";
                Scope[Scope["LEVEL"] = 12] = "LEVEL";
                Scope[Scope["ATTRIBUTE"] = 13] = "ATTRIBUTE";
                Scope[Scope["BLOT"] = 14] = "BLOT";
                Scope[Scope["INLINE"] = 7] = "INLINE";
                Scope[Scope["BLOCK"] = 11] = "BLOCK";
                Scope[Scope["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
                Scope[Scope["INLINE_BLOT"] = 6] = "INLINE_BLOT";
                Scope[Scope["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
                Scope[Scope["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
                Scope[Scope["ANY"] = 15] = "ANY";
            })(Scope = exports.Scope || (exports.Scope = {}));
            function create(input, value) {
                var match = query(input);
                if (match == null) {
                    throw new ParchmentError("Unable to create " + input + " blot");
                }
                var BlotClass = match;
                var node = // @ts-ignore
                input instanceof Node || input['nodeType'] === Node.TEXT_NODE ? input : BlotClass.create(value);
                return new BlotClass(node, value);
            }
            exports.create = create;
            function find(node, bubble) {
                if (bubble === void 0) {
                    bubble = false;
                }
                if (node == null) return null;
                // @ts-ignore
                if (node[exports.DATA_KEY] != null) return node[exports.DATA_KEY].blot;
                if (bubble) return find(node.parentNode, bubble);
                return null;
            }
            exports.find = find;
            function query(query, scope) {
                if (scope === void 0) {
                    scope = Scope.ANY;
                }
                var match;
                if (typeof query === 'string') {
                    match = types[query] || attributes[query];
                // @ts-ignore
                } else if (query instanceof Text || query['nodeType'] === Node.TEXT_NODE) {
                    match = types['text'];
                } else if (typeof query === 'number') {
                    if (query & Scope.LEVEL & Scope.BLOCK) {
                        match = types['block'];
                    } else if (query & Scope.LEVEL & Scope.INLINE) {
                        match = types['inline'];
                    }
                } else if (query instanceof HTMLElement) {
                    var names = (query.getAttribute('class') || '').split(/\s+/);
                    for(var i in names){
                        match = classes[names[i]];
                        if (match) break;
                    }
                    match = match || tags[query.tagName];
                }
                if (match == null) return null;
                // @ts-ignore
                if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope) return match;
                return null;
            }
            exports.query = query;
            function register() {
                var Definitions = [];
                for(var _i = 0; _i < arguments.length; _i++){
                    Definitions[_i] = arguments[_i];
                }
                if (Definitions.length > 1) {
                    return Definitions.map(function(d) {
                        return register(d);
                    });
                }
                var Definition = Definitions[0];
                if (typeof Definition.blotName !== 'string' && typeof Definition.attrName !== 'string') {
                    throw new ParchmentError('Invalid definition');
                } else if (Definition.blotName === 'abstract') {
                    throw new ParchmentError('Cannot register abstract class');
                }
                types[Definition.blotName || Definition.attrName] = Definition;
                if (typeof Definition.keyName === 'string') {
                    attributes[Definition.keyName] = Definition;
                } else {
                    if (Definition.className != null) {
                        classes[Definition.className] = Definition;
                    }
                    if (Definition.tagName != null) {
                        if (Array.isArray(Definition.tagName)) {
                            Definition.tagName = Definition.tagName.map(function(tagName) {
                                return tagName.toUpperCase();
                            });
                        } else {
                            Definition.tagName = Definition.tagName.toUpperCase();
                        }
                        var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [
                            Definition.tagName
                        ];
                        tagNames.forEach(function(tag) {
                            if (tags[tag] == null || Definition.className == null) {
                                tags[tag] = Definition;
                            }
                        });
                    }
                }
                return Definition;
            }
            exports.register = register;
        /***/ },
        function(module1, exports, __webpack_require__) {
            var diff = __webpack_require__(51);
            var equal = __webpack_require__(11);
            var extend = __webpack_require__(3);
            var op = __webpack_require__(20);
            var NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()
            var Delta = function(ops) {
                // Assume we are given a well formed ops
                if (Array.isArray(ops)) {
                    this.ops = ops;
                } else if (ops != null && Array.isArray(ops.ops)) {
                    this.ops = ops.ops;
                } else {
                    this.ops = [];
                }
            };
            Delta.prototype.insert = function(text, attributes) {
                var newOp = {};
                if (text.length === 0) return this;
                newOp.insert = text;
                if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
                    newOp.attributes = attributes;
                }
                return this.push(newOp);
            };
            Delta.prototype['delete'] = function(length) {
                if (length <= 0) return this;
                return this.push({
                    'delete': length
                });
            };
            Delta.prototype.retain = function(length, attributes) {
                if (length <= 0) return this;
                var newOp = {
                    retain: length
                };
                if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
                    newOp.attributes = attributes;
                }
                return this.push(newOp);
            };
            Delta.prototype.push = function(newOp) {
                var index = this.ops.length;
                var lastOp = this.ops[index - 1];
                newOp = extend(true, {}, newOp);
                if (typeof lastOp === 'object') {
                    if (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {
                        this.ops[index - 1] = {
                            'delete': lastOp['delete'] + newOp['delete']
                        };
                        return this;
                    }
                    // Since it does not matter if we insert before or after deleting at the same index,
                    // always prefer to insert first
                    if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {
                        index -= 1;
                        lastOp = this.ops[index - 1];
                        if (typeof lastOp !== 'object') {
                            this.ops.unshift(newOp);
                            return this;
                        }
                    }
                    if (equal(newOp.attributes, lastOp.attributes)) {
                        if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {
                            this.ops[index - 1] = {
                                insert: lastOp.insert + newOp.insert
                            };
                            if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
                            return this;
                        } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {
                            this.ops[index - 1] = {
                                retain: lastOp.retain + newOp.retain
                            };
                            if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
                            return this;
                        }
                    }
                }
                if (index === this.ops.length) {
                    this.ops.push(newOp);
                } else {
                    this.ops.splice(index, 0, newOp);
                }
                return this;
            };
            Delta.prototype.chop = function() {
                var lastOp = this.ops[this.ops.length - 1];
                if (lastOp && lastOp.retain && !lastOp.attributes) {
                    this.ops.pop();
                }
                return this;
            };
            Delta.prototype.filter = function(predicate) {
                return this.ops.filter(predicate);
            };
            Delta.prototype.forEach = function(predicate) {
                this.ops.forEach(predicate);
            };
            Delta.prototype.map = function(predicate) {
                return this.ops.map(predicate);
            };
            Delta.prototype.partition = function(predicate) {
                var passed = [], failed = [];
                this.forEach(function(op) {
                    var target = predicate(op) ? passed : failed;
                    target.push(op);
                });
                return [
                    passed,
                    failed
                ];
            };
            Delta.prototype.reduce = function(predicate, initial) {
                return this.ops.reduce(predicate, initial);
            };
            Delta.prototype.changeLength = function() {
                return this.reduce(function(length, elem) {
                    if (elem.insert) {
                        return length + op.length(elem);
                    } else if (elem.delete) {
                        return length - elem.delete;
                    }
                    return length;
                }, 0);
            };
            Delta.prototype.length = function() {
                return this.reduce(function(length, elem) {
                    return length + op.length(elem);
                }, 0);
            };
            Delta.prototype.slice = function(start, end) {
                start = start || 0;
                if (typeof end !== 'number') end = Infinity;
                var ops = [];
                var iter = op.iterator(this.ops);
                var index = 0;
                while(index < end && iter.hasNext()){
                    var nextOp;
                    if (index < start) {
                        nextOp = iter.next(start - index);
                    } else {
                        nextOp = iter.next(end - index);
                        ops.push(nextOp);
                    }
                    index += op.length(nextOp);
                }
                return new Delta(ops);
            };
            Delta.prototype.compose = function(other) {
                var thisIter = op.iterator(this.ops);
                var otherIter = op.iterator(other.ops);
                var ops = [];
                var firstOther = otherIter.peek();
                if (firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null) {
                    var firstLeft = firstOther.retain;
                    while(thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft){
                        firstLeft -= thisIter.peekLength();
                        ops.push(thisIter.next());
                    }
                    if (firstOther.retain - firstLeft > 0) {
                        otherIter.next(firstOther.retain - firstLeft);
                    }
                }
                var delta = new Delta(ops);
                while(thisIter.hasNext() || otherIter.hasNext()){
                    if (otherIter.peekType() === 'insert') {
                        delta.push(otherIter.next());
                    } else if (thisIter.peekType() === 'delete') {
                        delta.push(thisIter.next());
                    } else {
                        var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
                        var thisOp = thisIter.next(length);
                        var otherOp = otherIter.next(length);
                        if (typeof otherOp.retain === 'number') {
                            var newOp = {};
                            if (typeof thisOp.retain === 'number') {
                                newOp.retain = length;
                            } else {
                                newOp.insert = thisOp.insert;
                            }
                            // Preserve null when composing with a retain, otherwise remove it for inserts
                            var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
                            if (attributes) newOp.attributes = attributes;
                            delta.push(newOp);
                            // Optimization if rest of other is just retain
                            if (!otherIter.hasNext() && equal(delta.ops[delta.ops.length - 1], newOp)) {
                                var rest = new Delta(thisIter.rest());
                                return delta.concat(rest).chop();
                            }
                        // Other op should be delete, we could be an insert or retain
                        // Insert + delete cancels out
                        } else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {
                            delta.push(otherOp);
                        }
                    }
                }
                return delta.chop();
            };
            Delta.prototype.concat = function(other) {
                var delta = new Delta(this.ops.slice());
                if (other.ops.length > 0) {
                    delta.push(other.ops[0]);
                    delta.ops = delta.ops.concat(other.ops.slice(1));
                }
                return delta;
            };
            Delta.prototype.diff = function(other, index) {
                if (this.ops === other.ops) {
                    return new Delta();
                }
                var strings = [
                    this,
                    other
                ].map(function(delta) {
                    return delta.map(function(op) {
                        if (op.insert != null) {
                            return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
                        }
                        var prep = delta === other ? 'on' : 'with';
                        throw new Error('diff() called ' + prep + ' non-document');
                    }).join('');
                });
                var delta = new Delta();
                var diffResult = diff(strings[0], strings[1], index);
                var thisIter = op.iterator(this.ops);
                var otherIter = op.iterator(other.ops);
                diffResult.forEach(function(component) {
                    var length = component[1].length;
                    while(length > 0){
                        var opLength = 0;
                        switch(component[0]){
                            case diff.INSERT:
                                opLength = Math.min(otherIter.peekLength(), length);
                                delta.push(otherIter.next(opLength));
                                break;
                            case diff.DELETE:
                                opLength = Math.min(length, thisIter.peekLength());
                                thisIter.next(opLength);
                                delta['delete'](opLength);
                                break;
                            case diff.EQUAL:
                                opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
                                var thisOp = thisIter.next(opLength);
                                var otherOp = otherIter.next(opLength);
                                if (equal(thisOp.insert, otherOp.insert)) {
                                    delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));
                                } else {
                                    delta.push(otherOp)['delete'](opLength);
                                }
                                break;
                        }
                        length -= opLength;
                    }
                });
                return delta.chop();
            };
            Delta.prototype.eachLine = function(predicate, newline) {
                newline = newline || '\n';
                var iter = op.iterator(this.ops);
                var line = new Delta();
                var i = 0;
                while(iter.hasNext()){
                    if (iter.peekType() !== 'insert') return;
                    var thisOp = iter.peek();
                    var start = op.length(thisOp) - iter.peekLength();
                    var index = typeof thisOp.insert === 'string' ? thisOp.insert.indexOf(newline, start) - start : -1;
                    if (index < 0) {
                        line.push(iter.next());
                    } else if (index > 0) {
                        line.push(iter.next(index));
                    } else {
                        if (predicate(line, iter.next(1).attributes || {}, i) === false) {
                            return;
                        }
                        i += 1;
                        line = new Delta();
                    }
                }
                if (line.length() > 0) {
                    predicate(line, {}, i);
                }
            };
            Delta.prototype.transform = function(other, priority) {
                priority = !!priority;
                if (typeof other === 'number') {
                    return this.transformPosition(other, priority);
                }
                var thisIter = op.iterator(this.ops);
                var otherIter = op.iterator(other.ops);
                var delta = new Delta();
                while(thisIter.hasNext() || otherIter.hasNext()){
                    if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {
                        delta.retain(op.length(thisIter.next()));
                    } else if (otherIter.peekType() === 'insert') {
                        delta.push(otherIter.next());
                    } else {
                        var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
                        var thisOp = thisIter.next(length);
                        var otherOp = otherIter.next(length);
                        if (thisOp['delete']) {
                            continue;
                        } else if (otherOp['delete']) {
                            delta.push(otherOp);
                        } else {
                            // We retain either their retain or insert
                            delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));
                        }
                    }
                }
                return delta.chop();
            };
            Delta.prototype.transformPosition = function(index, priority) {
                priority = !!priority;
                var thisIter = op.iterator(this.ops);
                var offset = 0;
                while(thisIter.hasNext() && offset <= index){
                    var length = thisIter.peekLength();
                    var nextType = thisIter.peekType();
                    thisIter.next();
                    if (nextType === 'delete') {
                        index -= Math.min(length, index - offset);
                        continue;
                    } else if (nextType === 'insert' && (offset < index || !priority)) {
                        index += length;
                    }
                    offset += length;
                }
                return index;
            };
            module1.exports = Delta;
        /***/ },
        function(module1, exports) {
            'use strict';
            var hasOwn = Object.prototype.hasOwnProperty;
            var toStr = Object.prototype.toString;
            var defineProperty = Object.defineProperty;
            var gOPD = Object.getOwnPropertyDescriptor;
            var isArray = function isArray(arr) {
                if (typeof Array.isArray === 'function') {
                    return Array.isArray(arr);
                }
                return toStr.call(arr) === '[object Array]';
            };
            var isPlainObject = function isPlainObject(obj) {
                if (!obj || toStr.call(obj) !== '[object Object]') {
                    return false;
                }
                var hasOwnConstructor = hasOwn.call(obj, 'constructor');
                var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
                // Not own constructor property must be Object
                if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
                    return false;
                }
                // Own properties are enumerated firstly, so to speed up,
                // if last one is own, then all properties are own.
                var key;
                for(key in obj){}
                return typeof key === 'undefined' || hasOwn.call(obj, key);
            };
            // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
            var setProperty = function setProperty(target, options) {
                if (defineProperty && options.name === '__proto__') {
                    defineProperty(target, options.name, {
                        enumerable: true,
                        configurable: true,
                        value: options.newValue,
                        writable: true
                    });
                } else {
                    target[options.name] = options.newValue;
                }
            };
            // Return undefined instead of __proto__ if '__proto__' is not an own property
            var getProperty = function getProperty(obj, name) {
                if (name === '__proto__') {
                    if (!hasOwn.call(obj, name)) {
                        return void 0;
                    } else if (gOPD) {
                        // In early versions of node, obj['__proto__'] is buggy when obj has
                        // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
                        return gOPD(obj, name).value;
                    }
                }
                return obj[name];
            };
            module1.exports = function extend() {
                var options, name, src, copy, copyIsArray, clone;
                var target = arguments[0];
                var i = 1;
                var length = arguments.length;
                var deep = false;
                // Handle a deep copy situation
                if (typeof target === 'boolean') {
                    deep = target;
                    target = arguments[1] || {};
                    // skip the boolean and the target
                    i = 2;
                }
                if (target == null || typeof target !== 'object' && typeof target !== 'function') {
                    target = {};
                }
                for(; i < length; ++i){
                    options = arguments[i];
                    // Only deal with non-null/undefined values
                    if (options != null) {
                        // Extend the base object
                        for(name in options){
                            src = getProperty(target, name);
                            copy = getProperty(options, name);
                            // Prevent never-ending loop
                            if (target !== copy) {
                                // Recurse if we're merging plain objects or arrays
                                if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                                    if (copyIsArray) {
                                        copyIsArray = false;
                                        clone = src && isArray(src) ? src : [];
                                    } else {
                                        clone = src && isPlainObject(src) ? src : {};
                                    }
                                    // Never move original objects, clone them
                                    setProperty(target, {
                                        name: name,
                                        newValue: extend(deep, clone, copy)
                                    });
                                // Don't bring in undefined values
                                } else if (typeof copy !== 'undefined') {
                                    setProperty(target, {
                                        name: name,
                                        newValue: copy
                                    });
                                }
                            }
                        }
                    }
                }
                // Return the modified object
                return target;
            };
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.BlockEmbed = exports.bubbleFormats = undefined;
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _break = __webpack_require__(16);
            var _break2 = _interopRequireDefault(_break);
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var NEWLINE_LENGTH = 1;
            var BlockEmbed = function(_Parchment$Embed) {
                _inherits(BlockEmbed, _Parchment$Embed);
                function BlockEmbed() {
                    _classCallCheck(this, BlockEmbed);
                    return _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));
                }
                _createClass(BlockEmbed, [
                    {
                        key: 'attach',
                        value: function attach() {
                            _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'attach', this).call(this);
                            this.attributes = new _parchment2.default.Attributor.Store(this.domNode);
                        }
                    },
                    {
                        key: 'delta',
                        value: function delta() {
                            return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));
                        }
                    },
                    {
                        key: 'format',
                        value: function format(name, value) {
                            var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);
                            if (attribute != null) {
                                this.attributes.attribute(attribute, value);
                            }
                        }
                    },
                    {
                        key: 'formatAt',
                        value: function formatAt(index, length, name, value) {
                            this.format(name, value);
                        }
                    },
                    {
                        key: 'insertAt',
                        value: function insertAt(index, value, def) {
                            if (typeof value === 'string' && value.endsWith('\n')) {
                                var block = _parchment2.default.create(Block.blotName);
                                this.parent.insertBefore(block, index === 0 ? this : this.next);
                                block.insertAt(0, value.slice(0, -1));
                            } else {
                                _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'insertAt', this).call(this, index, value, def);
                            }
                        }
                    }
                ]);
                return BlockEmbed;
            }(_parchment2.default.Embed);
            BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;
            // It is important for cursor behavior BlockEmbeds use tags that are block level elements
            var Block = function(_Parchment$Block) {
                _inherits(Block, _Parchment$Block);
                function Block(domNode) {
                    _classCallCheck(this, Block);
                    var _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));
                    _this2.cache = {};
                    return _this2;
                }
                _createClass(Block, [
                    {
                        key: 'delta',
                        value: function delta() {
                            if (this.cache.delta == null) {
                                this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function(delta, leaf) {
                                    if (leaf.length() === 0) {
                                        return delta;
                                    } else {
                                        return delta.insert(leaf.value(), bubbleFormats(leaf));
                                    }
                                }, new _quillDelta2.default()).insert('\n', bubbleFormats(this));
                            }
                            return this.cache.delta;
                        }
                    },
                    {
                        key: 'deleteAt',
                        value: function deleteAt(index, length) {
                            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'deleteAt', this).call(this, index, length);
                            this.cache = {};
                        }
                    },
                    {
                        key: 'formatAt',
                        value: function formatAt(index, length, name, value) {
                            if (length <= 0) return;
                            if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
                                if (index + length === this.length()) {
                                    this.format(name, value);
                                }
                            } else {
                                _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'formatAt', this).call(this, index, Math.min(length, this.length() - index - 1), name, value);
                            }
                            this.cache = {};
                        }
                    },
                    {
                        key: 'insertAt',
                        value: function insertAt(index, value, def) {
                            if (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, index, value, def);
                            if (value.length === 0) return;
                            var lines = value.split('\n');
                            var text = lines.shift();
                            if (text.length > 0) {
                                if (index < this.length() - 1 || this.children.tail == null) {
                                    _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, Math.min(index, this.length() - 1), text);
                                } else {
                                    this.children.tail.insertAt(this.children.tail.length(), text);
                                }
                                this.cache = {};
                            }
                            var block = this;
                            lines.reduce(function(index, line) {
                                block = block.split(index, true);
                                block.insertAt(0, line);
                                return line.length;
                            }, index + text.length);
                        }
                    },
                    {
                        key: 'insertBefore',
                        value: function insertBefore(blot, ref) {
                            var head = this.children.head;
                            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertBefore', this).call(this, blot, ref);
                            if (head instanceof _break2.default) {
                                head.remove();
                            }
                            this.cache = {};
                        }
                    },
                    {
                        key: 'length',
                        value: function length() {
                            if (this.cache.length == null) {
                                this.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'length', this).call(this) + NEWLINE_LENGTH;
                            }
                            return this.cache.length;
                        }
                    },
                    {
                        key: 'moveChildren',
                        value: function moveChildren(target, ref) {
                            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'moveChildren', this).call(this, target, ref);
                            this.cache = {};
                        }
                    },
                    {
                        key: 'optimize',
                        value: function optimize(context) {
                            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'optimize', this).call(this, context);
                            this.cache = {};
                        }
                    },
                    {
                        key: 'path',
                        value: function path(index) {
                            return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'path', this).call(this, index, true);
                        }
                    },
                    {
                        key: 'removeChild',
                        value: function removeChild(child) {
                            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'removeChild', this).call(this, child);
                            this.cache = {};
                        }
                    },
                    {
                        key: 'split',
                        value: function split(index) {
                            var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                            if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
                                var clone = this.clone();
                                if (index === 0) {
                                    this.parent.insertBefore(clone, this);
                                    return this;
                                } else {
                                    this.parent.insertBefore(clone, this.next);
                                    return clone;
                                }
                            } else {
                                var next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'split', this).call(this, index, force);
                                this.cache = {};
                                return next;
                            }
                        }
                    }
                ]);
                return Block;
            }(_parchment2.default.Block);
            Block.blotName = 'block';
            Block.tagName = 'P';
            Block.defaultChild = 'break';
            Block.allowedChildren = [
                _inline2.default,
                _parchment2.default.Embed,
                _text2.default
            ];
            function bubbleFormats(blot) {
                var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                if (blot == null) return formats;
                if (typeof blot.formats === 'function') {
                    formats = (0, _extend2.default)(formats, blot.formats());
                }
                if (blot.parent == null || blot.parent.blotName == 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {
                    return formats;
                }
                return bubbleFormats(blot.parent, formats);
            }
            exports.bubbleFormats = bubbleFormats;
            exports.BlockEmbed = BlockEmbed;
            exports.default = Block;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.overload = exports.expandConfig = undefined;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj;
            } : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _slicedToArray = function() {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                            _arr.push(_s.value);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally{
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally{
                            if (_d) throw _e;
                        }
                    }
                    return _arr;
                }
                return function(arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            __webpack_require__(50);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _editor = __webpack_require__(14);
            var _editor2 = _interopRequireDefault(_editor);
            var _emitter3 = __webpack_require__(8);
            var _emitter4 = _interopRequireDefault(_emitter3);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _selection = __webpack_require__(15);
            var _selection2 = _interopRequireDefault(_selection);
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            var _theme = __webpack_require__(34);
            var _theme2 = _interopRequireDefault(_theme);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            var debug = (0, _logger2.default)('quill');
            var Quill = function() {
                _createClass(Quill, null, [
                    {
                        key: 'debug',
                        value: function debug(limit) {
                            if (limit === true) {
                                limit = 'log';
                            }
                            _logger2.default.level(limit);
                        }
                    },
                    {
                        key: 'find',
                        value: function find(node) {
                            return node.__quill || _parchment2.default.find(node);
                        }
                    },
                    {
                        key: 'import',
                        value: function _import(name) {
                            if (this.imports[name] == null) {
                                debug.error('Cannot import ' + name + '. Are you sure it was registered?');
                            }
                            return this.imports[name];
                        }
                    },
                    {
                        key: 'register',
                        value: function register(path, target) {
                            var _this = this;
                            var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                            if (typeof path !== 'string') {
                                var name = path.attrName || path.blotName;
                                if (typeof name === 'string') {
                                    // register(Blot | Attributor, overwrite)
                                    this.register('formats/' + name, path, target);
                                } else {
                                    Object.keys(path).forEach(function(key) {
                                        _this.register(key, path[key], target);
                                    });
                                }
                            } else {
                                if (this.imports[path] != null && !overwrite) {
                                    debug.warn('Overwriting ' + path + ' with', target);
                                }
                                this.imports[path] = target;
                                if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {
                                    _parchment2.default.register(target);
                                } else if (path.startsWith('modules') && typeof target.register === 'function') {
                                    target.register();
                                }
                            }
                        }
                    }
                ]);
                function Quill(container) {
                    var _this2 = this;
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    _classCallCheck(this, Quill);
                    this.options = expandConfig(container, options);
                    this.container = this.options.container;
                    if (this.container == null) {
                        return debug.error('Invalid Quill container', container);
                    }
                    if (this.options.debug) {
                        Quill.debug(this.options.debug);
                    }
                    var html = this.container.innerHTML.trim();
                    this.container.classList.add('ql-container');
                    this.container.innerHTML = '';
                    this.container.__quill = this;
                    this.root = this.addContainer('ql-editor');
                    this.root.classList.add('ql-blank');
                    this.root.setAttribute('data-gramm', false);
                    this.scrollingContainer = this.options.scrollingContainer || this.root;
                    this.emitter = new _emitter4.default();
                    this.scroll = _parchment2.default.create(this.root, {
                        emitter: this.emitter,
                        whitelist: this.options.formats
                    });
                    this.editor = new _editor2.default(this.scroll);
                    this.selection = new _selection2.default(this.scroll, this.emitter);
                    this.theme = new this.options.theme(this, this.options);
                    this.keyboard = this.theme.addModule('keyboard');
                    this.clipboard = this.theme.addModule('clipboard');
                    this.history = this.theme.addModule('history');
                    this.theme.init();
                    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function(type) {
                        if (type === _emitter4.default.events.TEXT_CHANGE) {
                            _this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());
                        }
                    });
                    this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function(source, mutations) {
                        var range = _this2.selection.lastRange;
                        var index = range && range.length === 0 ? range.index : undefined;
                        modify.call(_this2, function() {
                            return _this2.editor.update(null, mutations, index);
                        }, source);
                    });
                    var contents = this.clipboard.convert('<div class=\'ql-editor\' style="white-space: normal;">' + html + '<p><br></p></div>');
                    this.setContents(contents);
                    this.history.clear();
                    if (this.options.placeholder) {
                        this.root.setAttribute('data-placeholder', this.options.placeholder);
                    }
                    if (this.options.readOnly) {
                        this.disable();
                    }
                }
                _createClass(Quill, [
                    {
                        key: 'addContainer',
                        value: function addContainer(container) {
                            var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                            if (typeof container === 'string') {
                                var className = container;
                                container = document.createElement('div');
                                container.classList.add(className);
                            }
                            this.container.insertBefore(container, refNode);
                            return container;
                        }
                    },
                    {
                        key: 'blur',
                        value: function blur() {
                            this.selection.setRange(null);
                        }
                    },
                    {
                        key: 'deleteText',
                        value: function deleteText(index, length, source) {
                            var _this3 = this;
                            var _overload = overload(index, length, source);
                            var _overload2 = _slicedToArray(_overload, 4);
                            index = _overload2[0];
                            length = _overload2[1];
                            source = _overload2[3];
                            return modify.call(this, function() {
                                return _this3.editor.deleteText(index, length);
                            }, source, index, -1 * length);
                        }
                    },
                    {
                        key: 'disable',
                        value: function disable() {
                            this.enable(false);
                        }
                    },
                    {
                        key: 'enable',
                        value: function enable() {
                            var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                            this.scroll.enable(enabled);
                            this.container.classList.toggle('ql-disabled', !enabled);
                        }
                    },
                    {
                        key: 'focus',
                        value: function focus() {
                            var scrollTop = this.scrollingContainer.scrollTop;
                            this.selection.focus();
                            this.scrollingContainer.scrollTop = scrollTop;
                            this.scrollIntoView();
                        }
                    },
                    {
                        key: 'format',
                        value: function format(name, value) {
                            var _this4 = this;
                            var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;
                            return modify.call(this, function() {
                                var range = _this4.getSelection(true);
                                var change = new _quillDelta2.default();
                                if (range == null) {
                                    return change;
                                } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
                                    change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));
                                } else if (range.length === 0) {
                                    _this4.selection.format(name, value);
                                    return change;
                                } else {
                                    change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));
                                }
                                _this4.setSelection(range, _emitter4.default.sources.SILENT);
                                return change;
                            }, source);
                        }
                    },
                    {
                        key: 'formatLine',
                        value: function formatLine(index, length, name, value, source) {
                            var _this5 = this;
                            var formats = void 0;
                            var _overload3 = overload(index, length, name, value, source);
                            var _overload4 = _slicedToArray(_overload3, 4);
                            index = _overload4[0];
                            length = _overload4[1];
                            formats = _overload4[2];
                            source = _overload4[3];
                            return modify.call(this, function() {
                                return _this5.editor.formatLine(index, length, formats);
                            }, source, index, 0);
                        }
                    },
                    {
                        key: 'formatText',
                        value: function formatText(index, length, name, value, source) {
                            var _this6 = this;
                            var formats = void 0;
                            var _overload5 = overload(index, length, name, value, source);
                            var _overload6 = _slicedToArray(_overload5, 4);
                            index = _overload6[0];
                            length = _overload6[1];
                            formats = _overload6[2];
                            source = _overload6[3];
                            return modify.call(this, function() {
                                return _this6.editor.formatText(index, length, formats);
                            }, source, index, 0);
                        }
                    },
                    {
                        key: 'getBounds',
                        value: function getBounds(index) {
                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                            var bounds = void 0;
                            if (typeof index === 'number') {
                                bounds = this.selection.getBounds(index, length);
                            } else {
                                bounds = this.selection.getBounds(index.index, index.length);
                            }
                            var containerBounds = this.container.getBoundingClientRect();
                            return {
                                bottom: bounds.bottom - containerBounds.top,
                                height: bounds.height,
                                left: bounds.left - containerBounds.left,
                                right: bounds.right - containerBounds.left,
                                top: bounds.top - containerBounds.top,
                                width: bounds.width
                            };
                        }
                    },
                    {
                        key: 'getContents',
                        value: function getContents() {
                            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;
                            var _overload7 = overload(index, length);
                            var _overload8 = _slicedToArray(_overload7, 2);
                            index = _overload8[0];
                            length = _overload8[1];
                            return this.editor.getContents(index, length);
                        }
                    },
                    {
                        key: 'getFormat',
                        value: function getFormat() {
                            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);
                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                            if (typeof index === 'number') {
                                return this.editor.getFormat(index, length);
                            } else {
                                return this.editor.getFormat(index.index, index.length);
                            }
                        }
                    },
                    {
                        key: 'getIndex',
                        value: function getIndex(blot) {
                            return blot.offset(this.scroll);
                        }
                    },
                    {
                        key: 'getLength',
                        value: function getLength() {
                            return this.scroll.length();
                        }
                    },
                    {
                        key: 'getLeaf',
                        value: function getLeaf(index) {
                            return this.scroll.leaf(index);
                        }
                    },
                    {
                        key: 'getLine',
                        value: function getLine(index) {
                            return this.scroll.line(index);
                        }
                    },
                    {
                        key: 'getLines',
                        value: function getLines() {
                            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;
                            if (typeof index !== 'number') {
                                return this.scroll.lines(index.index, index.length);
                            } else {
                                return this.scroll.lines(index, length);
                            }
                        }
                    },
                    {
                        key: 'getModule',
                        value: function getModule(name) {
                            return this.theme.modules[name];
                        }
                    },
                    {
                        key: 'getSelection',
                        value: function getSelection() {
                            var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                            if (focus) this.focus();
                            this.update(); // Make sure we access getRange with editor in consistent state
                            return this.selection.getRange()[0];
                        }
                    },
                    {
                        key: 'getText',
                        value: function getText() {
                            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;
                            var _overload9 = overload(index, length);
                            var _overload10 = _slicedToArray(_overload9, 2);
                            index = _overload10[0];
                            length = _overload10[1];
                            return this.editor.getText(index, length);
                        }
                    },
                    {
                        key: 'hasFocus',
                        value: function hasFocus() {
                            return this.selection.hasFocus();
                        }
                    },
                    {
                        key: 'insertEmbed',
                        value: function insertEmbed(index, embed, value) {
                            var _this7 = this;
                            var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;
                            return modify.call(this, function() {
                                return _this7.editor.insertEmbed(index, embed, value);
                            }, source, index);
                        }
                    },
                    {
                        key: 'insertText',
                        value: function insertText(index, text, name, value, source) {
                            var _this8 = this;
                            var formats = void 0;
                            var _overload11 = overload(index, 0, name, value, source);
                            var _overload12 = _slicedToArray(_overload11, 4);
                            index = _overload12[0];
                            formats = _overload12[2];
                            source = _overload12[3];
                            return modify.call(this, function() {
                                return _this8.editor.insertText(index, text, formats);
                            }, source, index, text.length);
                        }
                    },
                    {
                        key: 'isEnabled',
                        value: function isEnabled() {
                            return !this.container.classList.contains('ql-disabled');
                        }
                    },
                    {
                        key: 'off',
                        value: function off() {
                            return this.emitter.off.apply(this.emitter, arguments);
                        }
                    },
                    {
                        key: 'on',
                        value: function on() {
                            return this.emitter.on.apply(this.emitter, arguments);
                        }
                    },
                    {
                        key: 'once',
                        value: function once() {
                            return this.emitter.once.apply(this.emitter, arguments);
                        }
                    },
                    {
                        key: 'pasteHTML',
                        value: function pasteHTML(index, html, source) {
                            this.clipboard.dangerouslyPasteHTML(index, html, source);
                        }
                    },
                    {
                        key: 'removeFormat',
                        value: function removeFormat(index, length, source) {
                            var _this9 = this;
                            var _overload13 = overload(index, length, source);
                            var _overload14 = _slicedToArray(_overload13, 4);
                            index = _overload14[0];
                            length = _overload14[1];
                            source = _overload14[3];
                            return modify.call(this, function() {
                                return _this9.editor.removeFormat(index, length);
                            }, source, index);
                        }
                    },
                    {
                        key: 'scrollIntoView',
                        value: function scrollIntoView() {
                            this.selection.scrollIntoView(this.scrollingContainer);
                        }
                    },
                    {
                        key: 'setContents',
                        value: function setContents(delta) {
                            var _this10 = this;
                            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;
                            return modify.call(this, function() {
                                delta = new _quillDelta2.default(delta);
                                var length = _this10.getLength();
                                var deleted = _this10.editor.deleteText(0, length);
                                var applied = _this10.editor.applyDelta(delta);
                                var lastOp = applied.ops[applied.ops.length - 1];
                                if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\n') {
                                    _this10.editor.deleteText(_this10.getLength() - 1, 1);
                                    applied.delete(1);
                                }
                                var ret = deleted.compose(applied);
                                return ret;
                            }, source);
                        }
                    },
                    {
                        key: 'setSelection',
                        value: function setSelection(index, length, source) {
                            if (index == null) {
                                this.selection.setRange(null, length || Quill.sources.API);
                            } else {
                                var _overload15 = overload(index, length, source);
                                var _overload16 = _slicedToArray(_overload15, 4);
                                index = _overload16[0];
                                length = _overload16[1];
                                source = _overload16[3];
                                this.selection.setRange(new _selection.Range(index, length), source);
                                if (source !== _emitter4.default.sources.SILENT) {
                                    this.selection.scrollIntoView(this.scrollingContainer);
                                }
                            }
                        }
                    },
                    {
                        key: 'setText',
                        value: function setText(text) {
                            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;
                            var delta = new _quillDelta2.default().insert(text);
                            return this.setContents(delta, source);
                        }
                    },
                    {
                        key: 'update',
                        value: function update() {
                            var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;
                            var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes
                            this.selection.update(source);
                            return change;
                        }
                    },
                    {
                        key: 'updateContents',
                        value: function updateContents(delta) {
                            var _this11 = this;
                            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;
                            return modify.call(this, function() {
                                delta = new _quillDelta2.default(delta);
                                return _this11.editor.applyDelta(delta, source);
                            }, source, true);
                        }
                    }
                ]);
                return Quill;
            }();
            Quill.DEFAULTS = {
                bounds: null,
                formats: null,
                modules: {},
                placeholder: '',
                readOnly: false,
                scrollingContainer: null,
                strict: true,
                theme: 'default'
            };
            Quill.events = _emitter4.default.events;
            Quill.sources = _emitter4.default.sources;
            // eslint-disable-next-line no-undef
            Quill.version = ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : "1.3.7";
            Quill.imports = {
                'delta': _quillDelta2.default,
                'parchment': _parchment2.default,
                'core/module': _module2.default,
                'core/theme': _theme2.default
            };
            function expandConfig(container, userConfig) {
                userConfig = (0, _extend2.default)(true, {
                    container: container,
                    modules: {
                        clipboard: true,
                        keyboard: true,
                        history: true
                    }
                }, userConfig);
                if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {
                    userConfig.theme = _theme2.default;
                } else {
                    userConfig.theme = Quill.import('themes/' + userConfig.theme);
                    if (userConfig.theme == null) {
                        throw new Error('Invalid theme ' + userConfig.theme + '. Did you register it?');
                    }
                }
                var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);
                [
                    themeConfig,
                    userConfig
                ].forEach(function(config) {
                    config.modules = config.modules || {};
                    Object.keys(config.modules).forEach(function(module1) {
                        if (config.modules[module1] === true) {
                            config.modules[module1] = {};
                        }
                    });
                });
                var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
                var moduleConfig = moduleNames.reduce(function(config, name) {
                    var moduleClass = Quill.import('modules/' + name);
                    if (moduleClass == null) {
                        debug.error('Cannot load ' + name + ' module. Are you sure you registered it?');
                    } else {
                        config[name] = moduleClass.DEFAULTS || {};
                    }
                    return config;
                }, {});
                // Special case toolbar shorthand
                if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
                    userConfig.modules.toolbar = {
                        container: userConfig.modules.toolbar
                    };
                }
                userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, {
                    modules: moduleConfig
                }, themeConfig, userConfig);
                [
                    'bounds',
                    'container',
                    'scrollingContainer'
                ].forEach(function(key) {
                    if (typeof userConfig[key] === 'string') {
                        userConfig[key] = document.querySelector(userConfig[key]);
                    }
                });
                userConfig.modules = Object.keys(userConfig.modules).reduce(function(config, name) {
                    if (userConfig.modules[name]) {
                        config[name] = userConfig.modules[name];
                    }
                    return config;
                }, {});
                return userConfig;
            }
            // Handle selection preservation and TEXT_CHANGE emission
            // common to modification APIs
            function modify(modifier, source, index, shift) {
                if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {
                    return new _quillDelta2.default();
                }
                var range = index == null ? null : this.getSelection();
                var oldDelta = this.editor.delta;
                var change = modifier();
                if (range != null) {
                    if (index === true) index = range.index;
                    if (shift == null) {
                        range = shiftRange(range, change, source);
                    } else if (shift !== 0) {
                        range = shiftRange(range, index, shift, source);
                    }
                    this.setSelection(range, _emitter4.default.sources.SILENT);
                }
                if (change.length() > 0) {
                    var _emitter;
                    var args = [
                        _emitter4.default.events.TEXT_CHANGE,
                        change,
                        oldDelta,
                        source
                    ];
                    (_emitter = this.emitter).emit.apply(_emitter, [
                        _emitter4.default.events.EDITOR_CHANGE
                    ].concat(args));
                    if (source !== _emitter4.default.sources.SILENT) {
                        var _emitter2;
                        (_emitter2 = this.emitter).emit.apply(_emitter2, args);
                    }
                }
                return change;
            }
            function overload(index, length, name, value, source) {
                var formats = {};
                if (typeof index.index === 'number' && typeof index.length === 'number') {
                    // Allow for throwaway end (used by insertText/insertEmbed)
                    if (typeof length !== 'number') {
                        source = value, value = name, name = length, length = index.length, index = index.index;
                    } else {
                        length = index.length, index = index.index;
                    }
                } else if (typeof length !== 'number') {
                    source = value, value = name, name = length, length = 0;
                }
                // Handle format being object, two format name/value strings or excluded
                if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
                    formats = name;
                    source = value;
                } else if (typeof name === 'string') {
                    if (value != null) {
                        formats[name] = value;
                    } else {
                        source = name;
                    }
                }
                // Handle optional source
                source = source || _emitter4.default.sources.API;
                return [
                    index,
                    length,
                    formats,
                    source
                ];
            }
            function shiftRange(range, index, length, source) {
                if (range == null) return null;
                var start = void 0, end = void 0;
                if (index instanceof _quillDelta2.default) {
                    var _map = [
                        range.index,
                        range.index + range.length
                    ].map(function(pos) {
                        return index.transformPosition(pos, source !== _emitter4.default.sources.USER);
                    });
                    var _map2 = _slicedToArray(_map, 2);
                    start = _map2[0];
                    end = _map2[1];
                } else {
                    var _map3 = [
                        range.index,
                        range.index + range.length
                    ].map(function(pos) {
                        if (pos < index || pos === index && source === _emitter4.default.sources.USER) return pos;
                        if (length >= 0) {
                            return pos + length;
                        } else {
                            return Math.max(index, pos + length);
                        }
                    });
                    var _map4 = _slicedToArray(_map3, 2);
                    start = _map4[0];
                    end = _map4[1];
                }
                return new _selection.Range(start, end - start);
            }
            exports.expandConfig = expandConfig;
            exports.overload = overload;
            exports.default = Quill;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Inline = function(_Parchment$Inline) {
                _inherits(Inline, _Parchment$Inline);
                function Inline() {
                    _classCallCheck(this, Inline);
                    return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));
                }
                _createClass(Inline, [
                    {
                        key: 'formatAt',
                        value: function formatAt(index, length, name, value) {
                            if (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {
                                var blot = this.isolate(index, length);
                                if (value) {
                                    blot.wrap(name, value);
                                }
                            } else {
                                _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'formatAt', this).call(this, index, length, name, value);
                            }
                        }
                    },
                    {
                        key: 'optimize',
                        value: function optimize(context) {
                            _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'optimize', this).call(this, context);
                            if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
                                var parent = this.parent.isolate(this.offset(), this.length());
                                this.moveChildren(parent);
                                parent.wrap(this);
                            }
                        }
                    }
                ], [
                    {
                        key: 'compare',
                        value: function compare(self1, other) {
                            var selfIndex = Inline.order.indexOf(self1);
                            var otherIndex = Inline.order.indexOf(other);
                            if (selfIndex >= 0 || otherIndex >= 0) {
                                return selfIndex - otherIndex;
                            } else if (self1 === other) {
                                return 0;
                            } else if (self1 < other) {
                                return -1;
                            } else {
                                return 1;
                            }
                        }
                    }
                ]);
                return Inline;
            }(_parchment2.default.Inline);
            Inline.allowedChildren = [
                Inline,
                _parchment2.default.Embed,
                _text2.default
            ];
            // Lower index means deeper in the DOM tree, since not found (-1) is for embeds
            Inline.order = [
                'cursor',
                'inline',
                'underline',
                'strike',
                'italic',
                'bold',
                'script',
                'link',
                'code' // Must be higher
            ];
            exports.default = Inline;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var TextBlot = function(_Parchment$Text) {
                _inherits(TextBlot, _Parchment$Text);
                function TextBlot() {
                    _classCallCheck(this, TextBlot);
                    return _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));
                }
                return TextBlot;
            }(_parchment2.default.Text);
            exports.default = TextBlot;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _eventemitter = __webpack_require__(54);
            var _eventemitter2 = _interopRequireDefault(_eventemitter);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var debug = (0, _logger2.default)('quill:events');
            var EVENTS = [
                'selectionchange',
                'mousedown',
                'mouseup',
                'click'
            ];
            EVENTS.forEach(function(eventName) {
                document.addEventListener(eventName, function() {
                    for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    [].slice.call(document.querySelectorAll('.ql-container')).forEach(function(node) {
                        // TODO use WeakMap
                        if (node.__quill && node.__quill.emitter) {
                            var _node$__quill$emitter;
                            (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);
                        }
                    });
                });
            });
            var Emitter = function(_EventEmitter) {
                _inherits(Emitter, _EventEmitter);
                function Emitter() {
                    _classCallCheck(this, Emitter);
                    var _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));
                    _this.listeners = {};
                    _this.on('error', debug.error);
                    return _this;
                }
                _createClass(Emitter, [
                    {
                        key: 'emit',
                        value: function emit() {
                            debug.log.apply(debug, arguments);
                            _get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), 'emit', this).apply(this, arguments);
                        }
                    },
                    {
                        key: 'handleDOM',
                        value: function handleDOM(event) {
                            for(var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){
                                args[_key2 - 1] = arguments[_key2];
                            }
                            (this.listeners[event.type] || []).forEach(function(_ref) {
                                var node = _ref.node, handler = _ref.handler;
                                if (event.target === node || node.contains(event.target)) {
                                    handler.apply(undefined, [
                                        event
                                    ].concat(args));
                                }
                            });
                        }
                    },
                    {
                        key: 'listenDOM',
                        value: function listenDOM(eventName, node, handler) {
                            if (!this.listeners[eventName]) {
                                this.listeners[eventName] = [];
                            }
                            this.listeners[eventName].push({
                                node: node,
                                handler: handler
                            });
                        }
                    }
                ]);
                return Emitter;
            }(_eventemitter2.default);
            Emitter.events = {
                EDITOR_CHANGE: 'editor-change',
                SCROLL_BEFORE_UPDATE: 'scroll-before-update',
                SCROLL_OPTIMIZE: 'scroll-optimize',
                SCROLL_UPDATE: 'scroll-update',
                SELECTION_CHANGE: 'selection-change',
                TEXT_CHANGE: 'text-change'
            };
            Emitter.sources = {
                API: 'api',
                SILENT: 'silent',
                USER: 'user'
            };
            exports.default = Emitter;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            var Module = function Module(quill) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                _classCallCheck(this, Module);
                this.quill = quill;
                this.options = options;
            };
            Module.DEFAULTS = {};
            exports.default = Module;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var levels = [
                'error',
                'warn',
                'log',
                'info'
            ];
            var level = 'warn';
            function debug(method) {
                if (levels.indexOf(method) <= levels.indexOf(level)) {
                    var _console;
                    for(var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                        args[_key - 1] = arguments[_key];
                    }
                    (_console = console)[method].apply(_console, args); // eslint-disable-line no-console
                }
            }
            function namespace(ns) {
                return levels.reduce(function(logger, method) {
                    logger[method] = debug.bind(console, method, ns);
                    return logger;
                }, {});
            }
            debug.level = namespace.level = function(newLevel) {
                level = newLevel;
            };
            exports.default = namespace;
        /***/ },
        function(module1, exports, __webpack_require__) {
            var pSlice = Array.prototype.slice;
            var objectKeys = __webpack_require__(52);
            var isArguments = __webpack_require__(53);
            var deepEqual = module1.exports = function(actual, expected, opts) {
                if (!opts) opts = {};
                // 7.1. All identical values are equivalent, as determined by ===.
                if (actual === expected) {
                    return true;
                } else if (actual instanceof Date && expected instanceof Date) {
                    return actual.getTime() === expected.getTime();
                // 7.3. Other pairs that do not both pass typeof value == 'object',
                // equivalence is determined by ==.
                } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
                    return opts.strict ? actual === expected : actual == expected;
                // 7.4. For all other Object pairs, including Array objects, equivalence is
                // determined by having the same number of owned properties (as verified
                // with Object.prototype.hasOwnProperty.call), the same set of keys
                // (although not necessarily the same order), equivalent values for every
                // corresponding key, and an identical 'prototype' property. Note: this
                // accounts for both named and indexed properties on Arrays.
                } else {
                    return objEquiv(actual, expected, opts);
                }
            };
            function isUndefinedOrNull(value) {
                return value === null || value === undefined;
            }
            function isBuffer(x) {
                if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
                if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
                    return false;
                }
                if (x.length > 0 && typeof x[0] !== 'number') return false;
                return true;
            }
            function objEquiv(a, b, opts) {
                var i, key;
                if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) return false;
                // an identical 'prototype' property.
                if (a.prototype !== b.prototype) return false;
                //~~~I've managed to break Object.keys through screwy arguments passing.
                //   Converting to array solves the problem.
                if (isArguments(a)) {
                    if (!isArguments(b)) {
                        return false;
                    }
                    a = pSlice.call(a);
                    b = pSlice.call(b);
                    return deepEqual(a, b, opts);
                }
                if (isBuffer(a)) {
                    if (!isBuffer(b)) {
                        return false;
                    }
                    if (a.length !== b.length) return false;
                    for(i = 0; i < a.length; i++){
                        if (a[i] !== b[i]) return false;
                    }
                    return true;
                }
                try {
                    var ka = objectKeys(a), kb = objectKeys(b);
                } catch (e) {
                    return false;
                }
                // having the same number of owned properties (keys incorporates
                // hasOwnProperty)
                if (ka.length != kb.length) return false;
                //the same set of keys (although not necessarily the same order),
                ka.sort();
                kb.sort();
                //~~~cheap key test
                for(i = ka.length - 1; i >= 0; i--){
                    if (ka[i] != kb[i]) return false;
                }
                //equivalent values for every corresponding key, and
                //~~~possibly expensive deep test
                for(i = ka.length - 1; i >= 0; i--){
                    key = ka[i];
                    if (!deepEqual(a[key], b[key], opts)) return false;
                }
                return typeof a === typeof b;
            }
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Registry = __webpack_require__(1);
            var Attributor = function() {
                function Attributor(attrName, keyName, options) {
                    if (options === void 0) {
                        options = {};
                    }
                    this.attrName = attrName;
                    this.keyName = keyName;
                    var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;
                    if (options.scope != null) {
                        // Ignore type bits, force attribute bit
                        this.scope = options.scope & Registry.Scope.LEVEL | attributeBit;
                    } else {
                        this.scope = Registry.Scope.ATTRIBUTE;
                    }
                    if (options.whitelist != null) this.whitelist = options.whitelist;
                }
                Attributor.keys = function(node) {
                    return [].map.call(node.attributes, function(item) {
                        return item.name;
                    });
                };
                Attributor.prototype.add = function(node, value) {
                    if (!this.canAdd(node, value)) return false;
                    node.setAttribute(this.keyName, value);
                    return true;
                };
                Attributor.prototype.canAdd = function(node, value) {
                    var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));
                    if (match == null) return false;
                    if (this.whitelist == null) return true;
                    if (typeof value === 'string') {
                        return this.whitelist.indexOf(value.replace(/["']/g, '')) > -1;
                    } else {
                        return this.whitelist.indexOf(value) > -1;
                    }
                };
                Attributor.prototype.remove = function(node) {
                    node.removeAttribute(this.keyName);
                };
                Attributor.prototype.value = function(node) {
                    var value = node.getAttribute(this.keyName);
                    if (this.canAdd(node, value) && value) {
                        return value;
                    }
                    return '';
                };
                return Attributor;
            }();
            exports.default = Attributor;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.Code = undefined;
            var _slicedToArray = function() {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                            _arr.push(_s.value);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally{
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally{
                            if (_d) throw _e;
                        }
                    }
                    return _arr;
                }
                return function(arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Code = function(_Inline) {
                _inherits(Code, _Inline);
                function Code() {
                    _classCallCheck(this, Code);
                    return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));
                }
                return Code;
            }(_inline2.default);
            Code.blotName = 'code';
            Code.tagName = 'CODE';
            var CodeBlock = function(_Block) {
                _inherits(CodeBlock, _Block);
                function CodeBlock() {
                    _classCallCheck(this, CodeBlock);
                    return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));
                }
                _createClass(CodeBlock, [
                    {
                        key: 'delta',
                        value: function delta() {
                            var _this3 = this;
                            var text = this.domNode.textContent;
                            if (text.endsWith('\n')) {
                                // Should always be true
                                text = text.slice(0, -1);
                            }
                            return text.split('\n').reduce(function(delta, frag) {
                                return delta.insert(frag).insert('\n', _this3.formats());
                            }, new _quillDelta2.default());
                        }
                    },
                    {
                        key: 'format',
                        value: function format(name, value) {
                            if (name === this.statics.blotName && value) return;
                            var _descendant = this.descendant(_text2.default, this.length() - 1), _descendant2 = _slicedToArray(_descendant, 1), text = _descendant2[0];
                            if (text != null) {
                                text.deleteAt(text.length() - 1, 1);
                            }
                            _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'format', this).call(this, name, value);
                        }
                    },
                    {
                        key: 'formatAt',
                        value: function formatAt(index, length, name, value) {
                            if (length === 0) return;
                            if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {
                                return;
                            }
                            var nextNewline = this.newlineIndex(index);
                            if (nextNewline < 0 || nextNewline >= index + length) return;
                            var prevNewline = this.newlineIndex(index, true) + 1;
                            var isolateLength = nextNewline - prevNewline + 1;
                            var blot = this.isolate(prevNewline, isolateLength);
                            var next = blot.next;
                            blot.format(name, value);
                            if (next instanceof CodeBlock) {
                                next.formatAt(0, index - prevNewline + length - isolateLength, name, value);
                            }
                        }
                    },
                    {
                        key: 'insertAt',
                        value: function insertAt(index, value, def) {
                            if (def != null) return;
                            var _descendant3 = this.descendant(_text2.default, index), _descendant4 = _slicedToArray(_descendant3, 2), text = _descendant4[0], offset = _descendant4[1];
                            text.insertAt(offset, value);
                        }
                    },
                    {
                        key: 'length',
                        value: function length() {
                            var length = this.domNode.textContent.length;
                            if (!this.domNode.textContent.endsWith('\n')) {
                                return length + 1;
                            }
                            return length;
                        }
                    },
                    {
                        key: 'newlineIndex',
                        value: function newlineIndex(searchIndex) {
                            var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                            if (!reverse) {
                                var offset = this.domNode.textContent.slice(searchIndex).indexOf('\n');
                                return offset > -1 ? searchIndex + offset : -1;
                            } else {
                                return this.domNode.textContent.slice(0, searchIndex).lastIndexOf('\n');
                            }
                        }
                    },
                    {
                        key: 'optimize',
                        value: function optimize(context) {
                            if (!this.domNode.textContent.endsWith('\n')) {
                                this.appendChild(_parchment2.default.create('text', '\n'));
                            }
                            _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'optimize', this).call(this, context);
                            var next = this.next;
                            if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {
                                next.optimize(context);
                                next.moveChildren(this);
                                next.remove();
                            }
                        }
                    },
                    {
                        key: 'replace',
                        value: function replace(target) {
                            _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'replace', this).call(this, target);
                            [].slice.call(this.domNode.querySelectorAll('*')).forEach(function(node) {
                                var blot = _parchment2.default.find(node);
                                if (blot == null) {
                                    node.parentNode.removeChild(node);
                                } else if (blot instanceof _parchment2.default.Embed) {
                                    blot.remove();
                                } else {
                                    blot.unwrap();
                                }
                            });
                        }
                    }
                ], [
                    {
                        key: 'create',
                        value: function create(value) {
                            var domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), 'create', this).call(this, value);
                            domNode.setAttribute('spellcheck', false);
                            return domNode;
                        }
                    },
                    {
                        key: 'formats',
                        value: function formats() {
                            return true;
                        }
                    }
                ]);
                return CodeBlock;
            }(_block2.default);
            CodeBlock.blotName = 'code-block';
            CodeBlock.tagName = 'PRE';
            CodeBlock.TAB = '  ';
            exports.Code = Code;
            exports.default = CodeBlock;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj;
            } : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _slicedToArray = function() {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                            _arr.push(_s.value);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally{
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally{
                            if (_d) throw _e;
                        }
                    }
                    return _arr;
                }
                return function(arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _op = __webpack_require__(20);
            var _op2 = _interopRequireDefault(_op);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            var _cursor = __webpack_require__(24);
            var _cursor2 = _interopRequireDefault(_cursor);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _break = __webpack_require__(16);
            var _break2 = _interopRequireDefault(_break);
            var _clone = __webpack_require__(21);
            var _clone2 = _interopRequireDefault(_clone);
            var _deepEqual = __webpack_require__(11);
            var _deepEqual2 = _interopRequireDefault(_deepEqual);
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            var ASCII = /^[ -~]*$/;
            var Editor = function() {
                function Editor(scroll) {
                    _classCallCheck(this, Editor);
                    this.scroll = scroll;
                    this.delta = this.getDelta();
                }
                _createClass(Editor, [
                    {
                        key: 'applyDelta',
                        value: function applyDelta(delta) {
                            var _this = this;
                            var consumeNextNewline = false;
                            this.scroll.update();
                            var scrollLength = this.scroll.length();
                            this.scroll.batchStart();
                            delta = normalizeDelta(delta);
                            delta.reduce(function(index, op) {
                                var length = op.retain || op.delete || op.insert.length || 1;
                                var attributes = op.attributes || {};
                                if (op.insert != null) {
                                    if (typeof op.insert === 'string') {
                                        var text = op.insert;
                                        if (text.endsWith('\n') && consumeNextNewline) {
                                            consumeNextNewline = false;
                                            text = text.slice(0, -1);
                                        }
                                        if (index >= scrollLength && !text.endsWith('\n')) {
                                            consumeNextNewline = true;
                                        }
                                        _this.scroll.insertAt(index, text);
                                        var _scroll$line = _this.scroll.line(index), _scroll$line2 = _slicedToArray(_scroll$line, 2), line = _scroll$line2[0], offset = _scroll$line2[1];
                                        var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));
                                        if (line instanceof _block2.default) {
                                            var _line$descendant = line.descendant(_parchment2.default.Leaf, offset), _line$descendant2 = _slicedToArray(_line$descendant, 1), leaf = _line$descendant2[0];
                                            formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));
                                        }
                                        attributes = _op2.default.attributes.diff(formats, attributes) || {};
                                    } else if (_typeof(op.insert) === 'object') {
                                        var key = Object.keys(op.insert)[0]; // There should only be one key
                                        if (key == null) return index;
                                        _this.scroll.insertAt(index, key, op.insert[key]);
                                    }
                                    scrollLength += length;
                                }
                                Object.keys(attributes).forEach(function(name) {
                                    _this.scroll.formatAt(index, length, name, attributes[name]);
                                });
                                return index + length;
                            }, 0);
                            delta.reduce(function(index, op) {
                                if (typeof op.delete === 'number') {
                                    _this.scroll.deleteAt(index, op.delete);
                                    return index;
                                }
                                return index + (op.retain || op.insert.length || 1);
                            }, 0);
                            this.scroll.batchEnd();
                            return this.update(delta);
                        }
                    },
                    {
                        key: 'deleteText',
                        value: function deleteText(index, length) {
                            this.scroll.deleteAt(index, length);
                            return this.update(new _quillDelta2.default().retain(index).delete(length));
                        }
                    },
                    {
                        key: 'formatLine',
                        value: function formatLine(index, length) {
                            var _this2 = this;
                            var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                            this.scroll.update();
                            Object.keys(formats).forEach(function(format) {
                                if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;
                                var lines = _this2.scroll.lines(index, Math.max(length, 1));
                                var lengthRemaining = length;
                                lines.forEach(function(line) {
                                    var lineLength = line.length();
                                    if (!(line instanceof _code2.default)) {
                                        line.format(format, formats[format]);
                                    } else {
                                        var codeIndex = index - line.offset(_this2.scroll);
                                        var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;
                                        line.formatAt(codeIndex, codeLength, format, formats[format]);
                                    }
                                    lengthRemaining -= lineLength;
                                });
                            });
                            this.scroll.optimize();
                            return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
                        }
                    },
                    {
                        key: 'formatText',
                        value: function formatText(index, length) {
                            var _this3 = this;
                            var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                            Object.keys(formats).forEach(function(format) {
                                _this3.scroll.formatAt(index, length, format, formats[format]);
                            });
                            return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
                        }
                    },
                    {
                        key: 'getContents',
                        value: function getContents(index, length) {
                            return this.delta.slice(index, index + length);
                        }
                    },
                    {
                        key: 'getDelta',
                        value: function getDelta() {
                            return this.scroll.lines().reduce(function(delta, line) {
                                return delta.concat(line.delta());
                            }, new _quillDelta2.default());
                        }
                    },
                    {
                        key: 'getFormat',
                        value: function getFormat(index) {
                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                            var lines = [], leaves = [];
                            if (length === 0) {
                                this.scroll.path(index).forEach(function(path) {
                                    var _path = _slicedToArray(path, 1), blot = _path[0];
                                    if (blot instanceof _block2.default) {
                                        lines.push(blot);
                                    } else if (blot instanceof _parchment2.default.Leaf) {
                                        leaves.push(blot);
                                    }
                                });
                            } else {
                                lines = this.scroll.lines(index, length);
                                leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);
                            }
                            var formatsArr = [
                                lines,
                                leaves
                            ].map(function(blots) {
                                if (blots.length === 0) return {};
                                var formats = (0, _block.bubbleFormats)(blots.shift());
                                while(Object.keys(formats).length > 0){
                                    var blot = blots.shift();
                                    if (blot == null) return formats;
                                    formats = combineFormats((0, _block.bubbleFormats)(blot), formats);
                                }
                                return formats;
                            });
                            return _extend2.default.apply(_extend2.default, formatsArr);
                        }
                    },
                    {
                        key: 'getText',
                        value: function getText(index, length) {
                            return this.getContents(index, length).filter(function(op) {
                                return typeof op.insert === 'string';
                            }).map(function(op) {
                                return op.insert;
                            }).join('');
                        }
                    },
                    {
                        key: 'insertEmbed',
                        value: function insertEmbed(index, embed, value) {
                            this.scroll.insertAt(index, embed, value);
                            return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));
                        }
                    },
                    {
                        key: 'insertText',
                        value: function insertText(index, text) {
                            var _this4 = this;
                            var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                            text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
                            this.scroll.insertAt(index, text);
                            Object.keys(formats).forEach(function(format) {
                                _this4.scroll.formatAt(index, text.length, format, formats[format]);
                            });
                            return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));
                        }
                    },
                    {
                        key: 'isBlank',
                        value: function isBlank() {
                            if (this.scroll.children.length == 0) return true;
                            if (this.scroll.children.length > 1) return false;
                            var block = this.scroll.children.head;
                            if (block.statics.blotName !== _block2.default.blotName) return false;
                            if (block.children.length > 1) return false;
                            return block.children.head instanceof _break2.default;
                        }
                    },
                    {
                        key: 'removeFormat',
                        value: function removeFormat(index, length) {
                            var text = this.getText(index, length);
                            var _scroll$line3 = this.scroll.line(index + length), _scroll$line4 = _slicedToArray(_scroll$line3, 2), line = _scroll$line4[0], offset = _scroll$line4[1];
                            var suffixLength = 0, suffix = new _quillDelta2.default();
                            if (line != null) {
                                if (!(line instanceof _code2.default)) {
                                    suffixLength = line.length() - offset;
                                } else {
                                    suffixLength = line.newlineIndex(offset) - offset + 1;
                                }
                                suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\n');
                            }
                            var contents = this.getContents(index, length + suffixLength);
                            var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));
                            var delta = new _quillDelta2.default().retain(index).concat(diff);
                            return this.applyDelta(delta);
                        }
                    },
                    {
                        key: 'update',
                        value: function update(change) {
                            var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
                            var cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
                            var oldDelta = this.delta;
                            if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {
                                // Optimization for character changes
                                var textBlot = _parchment2.default.find(mutations[0].target);
                                var formats = (0, _block.bubbleFormats)(textBlot);
                                var index = textBlot.offset(this.scroll);
                                var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');
                                var oldText = new _quillDelta2.default().insert(oldValue);
                                var newText = new _quillDelta2.default().insert(textBlot.value());
                                var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));
                                change = diffDelta.reduce(function(delta, op) {
                                    if (op.insert) {
                                        return delta.insert(op.insert, formats);
                                    } else {
                                        return delta.push(op);
                                    }
                                }, new _quillDelta2.default());
                                this.delta = oldDelta.compose(change);
                            } else {
                                this.delta = this.getDelta();
                                if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {
                                    change = oldDelta.diff(this.delta, cursorIndex);
                                }
                            }
                            return change;
                        }
                    }
                ]);
                return Editor;
            }();
            function combineFormats(formats, combined) {
                return Object.keys(combined).reduce(function(merged, name) {
                    if (formats[name] == null) return merged;
                    if (combined[name] === formats[name]) {
                        merged[name] = combined[name];
                    } else if (Array.isArray(combined[name])) {
                        if (combined[name].indexOf(formats[name]) < 0) {
                            merged[name] = combined[name].concat([
                                formats[name]
                            ]);
                        }
                    } else {
                        merged[name] = [
                            combined[name],
                            formats[name]
                        ];
                    }
                    return merged;
                }, {});
            }
            function normalizeDelta(delta) {
                return delta.reduce(function(delta, op) {
                    if (op.insert === 1) {
                        var attributes = (0, _clone2.default)(op.attributes);
                        delete attributes['image'];
                        return delta.insert({
                            image: op.attributes.image
                        }, attributes);
                    }
                    if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {
                        op = (0, _clone2.default)(op);
                        if (op.attributes.list) {
                            op.attributes.list = 'ordered';
                        } else {
                            op.attributes.list = 'bullet';
                            delete op.attributes.bullet;
                        }
                    }
                    if (typeof op.insert === 'string') {
                        var text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
                        return delta.insert(text, op.attributes);
                    }
                    return delta.push(op);
                }, new _quillDelta2.default());
            }
            exports.default = Editor;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.Range = undefined;
            var _slicedToArray = function() {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                            _arr.push(_s.value);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally{
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally{
                            if (_d) throw _e;
                        }
                    }
                    return _arr;
                }
                return function(arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _clone = __webpack_require__(21);
            var _clone2 = _interopRequireDefault(_clone);
            var _deepEqual = __webpack_require__(11);
            var _deepEqual2 = _interopRequireDefault(_deepEqual);
            var _emitter3 = __webpack_require__(8);
            var _emitter4 = _interopRequireDefault(_emitter3);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for(var i = 0, arr2 = Array(arr.length); i < arr.length; i++){
                        arr2[i] = arr[i];
                    }
                    return arr2;
                } else {
                    return Array.from(arr);
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            var debug = (0, _logger2.default)('quill:selection');
            var Range = function Range(index) {
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                _classCallCheck(this, Range);
                this.index = index;
                this.length = length;
            };
            var Selection = function() {
                function Selection(scroll, emitter) {
                    var _this = this;
                    _classCallCheck(this, Selection);
                    this.emitter = emitter;
                    this.scroll = scroll;
                    this.composing = false;
                    this.mouseDown = false;
                    this.root = this.scroll.domNode;
                    this.cursor = _parchment2.default.create('cursor', this);
                    // savedRange is last non-null range
                    this.lastRange = this.savedRange = new Range(0, 0);
                    this.handleComposition();
                    this.handleDragging();
                    this.emitter.listenDOM('selectionchange', document, function() {
                        if (!_this.mouseDown) {
                            setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);
                        }
                    });
                    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function(type, delta) {
                        if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {
                            _this.update(_emitter4.default.sources.SILENT);
                        }
                    });
                    this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function() {
                        if (!_this.hasFocus()) return;
                        var native = _this.getNativeRange();
                        if (native == null) return;
                        if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle
                        // TODO unclear if this has negative side effects
                        _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function() {
                            try {
                                _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
                            } catch (ignored) {}
                        });
                    });
                    this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function(mutations, context) {
                        if (context.range) {
                            var _context$range = context.range, startNode = _context$range.startNode, startOffset = _context$range.startOffset, endNode = _context$range.endNode, endOffset = _context$range.endOffset;
                            _this.setNativeRange(startNode, startOffset, endNode, endOffset);
                        }
                    });
                    this.update(_emitter4.default.sources.SILENT);
                }
                _createClass(Selection, [
                    {
                        key: 'handleComposition',
                        value: function handleComposition() {
                            var _this2 = this;
                            this.root.addEventListener('compositionstart', function() {
                                _this2.composing = true;
                            });
                            this.root.addEventListener('compositionend', function() {
                                _this2.composing = false;
                                if (_this2.cursor.parent) {
                                    var range = _this2.cursor.restore();
                                    if (!range) return;
                                    setTimeout(function() {
                                        _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
                                    }, 1);
                                }
                            });
                        }
                    },
                    {
                        key: 'handleDragging',
                        value: function handleDragging() {
                            var _this3 = this;
                            this.emitter.listenDOM('mousedown', document.body, function() {
                                _this3.mouseDown = true;
                            });
                            this.emitter.listenDOM('mouseup', document.body, function() {
                                _this3.mouseDown = false;
                                _this3.update(_emitter4.default.sources.USER);
                            });
                        }
                    },
                    {
                        key: 'focus',
                        value: function focus() {
                            if (this.hasFocus()) return;
                            this.root.focus();
                            this.setRange(this.savedRange);
                        }
                    },
                    {
                        key: 'format',
                        value: function format(_format, value) {
                            if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;
                            this.scroll.update();
                            var nativeRange = this.getNativeRange();
                            if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;
                            if (nativeRange.start.node !== this.cursor.textNode) {
                                var blot = _parchment2.default.find(nativeRange.start.node, false);
                                if (blot == null) return;
                                // TODO Give blot ability to not split
                                if (blot instanceof _parchment2.default.Leaf) {
                                    var after = blot.split(nativeRange.start.offset);
                                    blot.parent.insertBefore(this.cursor, after);
                                } else {
                                    blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen
                                }
                                this.cursor.attach();
                            }
                            this.cursor.format(_format, value);
                            this.scroll.optimize();
                            this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
                            this.update();
                        }
                    },
                    {
                        key: 'getBounds',
                        value: function getBounds(index) {
                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                            var scrollLength = this.scroll.length();
                            index = Math.min(index, scrollLength - 1);
                            length = Math.min(index + length, scrollLength - 1) - index;
                            var node = void 0, _scroll$leaf = this.scroll.leaf(index), _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2), leaf = _scroll$leaf2[0], offset = _scroll$leaf2[1];
                            if (leaf == null) return null;
                            var _leaf$position = leaf.position(offset, true);
                            var _leaf$position2 = _slicedToArray(_leaf$position, 2);
                            node = _leaf$position2[0];
                            offset = _leaf$position2[1];
                            var range = document.createRange();
                            if (length > 0) {
                                range.setStart(node, offset);
                                var _scroll$leaf3 = this.scroll.leaf(index + length);
                                var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);
                                leaf = _scroll$leaf4[0];
                                offset = _scroll$leaf4[1];
                                if (leaf == null) return null;
                                var _leaf$position3 = leaf.position(offset, true);
                                var _leaf$position4 = _slicedToArray(_leaf$position3, 2);
                                node = _leaf$position4[0];
                                offset = _leaf$position4[1];
                                range.setEnd(node, offset);
                                return range.getBoundingClientRect();
                            } else {
                                var side = 'left';
                                var rect = void 0;
                                if (node instanceof Text) {
                                    if (offset < node.data.length) {
                                        range.setStart(node, offset);
                                        range.setEnd(node, offset + 1);
                                    } else {
                                        range.setStart(node, offset - 1);
                                        range.setEnd(node, offset);
                                        side = 'right';
                                    }
                                    rect = range.getBoundingClientRect();
                                } else {
                                    rect = leaf.domNode.getBoundingClientRect();
                                    if (offset > 0) side = 'right';
                                }
                                return {
                                    bottom: rect.top + rect.height,
                                    height: rect.height,
                                    left: rect[side],
                                    right: rect[side],
                                    top: rect.top,
                                    width: 0
                                };
                            }
                        }
                    },
                    {
                        key: 'getNativeRange',
                        value: function getNativeRange() {
                            var selection = document.getSelection();
                            if (selection == null || selection.rangeCount <= 0) return null;
                            var nativeRange = selection.getRangeAt(0);
                            if (nativeRange == null) return null;
                            var range = this.normalizeNative(nativeRange);
                            debug.info('getNativeRange', range);
                            return range;
                        }
                    },
                    {
                        key: 'getRange',
                        value: function getRange() {
                            var normalized = this.getNativeRange();
                            if (normalized == null) return [
                                null,
                                null
                            ];
                            var range = this.normalizedToRange(normalized);
                            return [
                                range,
                                normalized
                            ];
                        }
                    },
                    {
                        key: 'hasFocus',
                        value: function hasFocus() {
                            return document.activeElement === this.root;
                        }
                    },
                    {
                        key: 'normalizedToRange',
                        value: function normalizedToRange(range) {
                            var _this4 = this;
                            var positions = [
                                [
                                    range.start.node,
                                    range.start.offset
                                ]
                            ];
                            if (!range.native.collapsed) {
                                positions.push([
                                    range.end.node,
                                    range.end.offset
                                ]);
                            }
                            var indexes = positions.map(function(position) {
                                var _position = _slicedToArray(position, 2), node = _position[0], offset = _position[1];
                                var blot = _parchment2.default.find(node, true);
                                var index = blot.offset(_this4.scroll);
                                if (offset === 0) {
                                    return index;
                                } else if (blot instanceof _parchment2.default.Container) {
                                    return index + blot.length();
                                } else {
                                    return index + blot.index(node, offset);
                                }
                            });
                            var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);
                            var start = Math.min.apply(Math, [
                                end
                            ].concat(_toConsumableArray(indexes)));
                            return new Range(start, end - start);
                        }
                    },
                    {
                        key: 'normalizeNative',
                        value: function normalizeNative(nativeRange) {
                            if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
                                return null;
                            }
                            var range = {
                                start: {
                                    node: nativeRange.startContainer,
                                    offset: nativeRange.startOffset
                                },
                                end: {
                                    node: nativeRange.endContainer,
                                    offset: nativeRange.endOffset
                                },
                                native: nativeRange
                            };
                            [
                                range.start,
                                range.end
                            ].forEach(function(position) {
                                var node = position.node, offset = position.offset;
                                while(!(node instanceof Text) && node.childNodes.length > 0){
                                    if (node.childNodes.length > offset) {
                                        node = node.childNodes[offset];
                                        offset = 0;
                                    } else if (node.childNodes.length === offset) {
                                        node = node.lastChild;
                                        offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;
                                    } else {
                                        break;
                                    }
                                }
                                position.node = node, position.offset = offset;
                            });
                            return range;
                        }
                    },
                    {
                        key: 'rangeToNative',
                        value: function rangeToNative(range) {
                            var _this5 = this;
                            var indexes = range.collapsed ? [
                                range.index
                            ] : [
                                range.index,
                                range.index + range.length
                            ];
                            var args = [];
                            var scrollLength = this.scroll.length();
                            indexes.forEach(function(index, i) {
                                index = Math.min(scrollLength - 1, index);
                                var node = void 0, _scroll$leaf5 = _this5.scroll.leaf(index), _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2), leaf = _scroll$leaf6[0], offset = _scroll$leaf6[1];
                                var _leaf$position5 = leaf.position(offset, i !== 0);
                                var _leaf$position6 = _slicedToArray(_leaf$position5, 2);
                                node = _leaf$position6[0];
                                offset = _leaf$position6[1];
                                args.push(node, offset);
                            });
                            if (args.length < 2) {
                                args = args.concat(args);
                            }
                            return args;
                        }
                    },
                    {
                        key: 'scrollIntoView',
                        value: function scrollIntoView(scrollingContainer) {
                            var range = this.lastRange;
                            if (range == null) return;
                            var bounds = this.getBounds(range.index, range.length);
                            if (bounds == null) return;
                            var limit = this.scroll.length() - 1;
                            var _scroll$line = this.scroll.line(Math.min(range.index, limit)), _scroll$line2 = _slicedToArray(_scroll$line, 1), first = _scroll$line2[0];
                            var last = first;
                            if (range.length > 0) {
                                var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));
                                var _scroll$line4 = _slicedToArray(_scroll$line3, 1);
                                last = _scroll$line4[0];
                            }
                            if (first == null || last == null) return;
                            var scrollBounds = scrollingContainer.getBoundingClientRect();
                            if (bounds.top < scrollBounds.top) {
                                scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
                            } else if (bounds.bottom > scrollBounds.bottom) {
                                scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
                            }
                        }
                    },
                    {
                        key: 'setNativeRange',
                        value: function setNativeRange(startNode, startOffset) {
                            var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;
                            var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;
                            var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
                            debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);
                            if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
                                return;
                            }
                            var selection = document.getSelection();
                            if (selection == null) return;
                            if (startNode != null) {
                                if (!this.hasFocus()) this.root.focus();
                                var native = (this.getNativeRange() || {}).native;
                                if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {
                                    if (startNode.tagName == "BR") {
                                        startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);
                                        startNode = startNode.parentNode;
                                    }
                                    if (endNode.tagName == "BR") {
                                        endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);
                                        endNode = endNode.parentNode;
                                    }
                                    var range = document.createRange();
                                    range.setStart(startNode, startOffset);
                                    range.setEnd(endNode, endOffset);
                                    selection.removeAllRanges();
                                    selection.addRange(range);
                                }
                            } else {
                                selection.removeAllRanges();
                                this.root.blur();
                                document.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)
                            }
                        }
                    },
                    {
                        key: 'setRange',
                        value: function setRange(range) {
                            var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                            var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;
                            if (typeof force === 'string') {
                                source = force;
                                force = false;
                            }
                            debug.info('setRange', range);
                            if (range != null) {
                                var args = this.rangeToNative(range);
                                this.setNativeRange.apply(this, _toConsumableArray(args).concat([
                                    force
                                ]));
                            } else {
                                this.setNativeRange(null);
                            }
                            this.update(source);
                        }
                    },
                    {
                        key: 'update',
                        value: function update() {
                            var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;
                            var oldRange = this.lastRange;
                            var _getRange = this.getRange(), _getRange2 = _slicedToArray(_getRange, 2), lastRange = _getRange2[0], nativeRange = _getRange2[1];
                            this.lastRange = lastRange;
                            if (this.lastRange != null) {
                                this.savedRange = this.lastRange;
                            }
                            if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
                                var _emitter;
                                if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
                                    this.cursor.restore();
                                }
                                var args = [
                                    _emitter4.default.events.SELECTION_CHANGE,
                                    (0, _clone2.default)(this.lastRange),
                                    (0, _clone2.default)(oldRange),
                                    source
                                ];
                                (_emitter = this.emitter).emit.apply(_emitter, [
                                    _emitter4.default.events.EDITOR_CHANGE
                                ].concat(args));
                                if (source !== _emitter4.default.sources.SILENT) {
                                    var _emitter2;
                                    (_emitter2 = this.emitter).emit.apply(_emitter2, args);
                                }
                            }
                        }
                    }
                ]);
                return Selection;
            }();
            function contains(parent, descendant) {
                try {
                    // Firefox inserts inaccessible nodes around video elements
                    descendant.parentNode;
                } catch (e) {
                    return false;
                }
                // IE11 has bug with Text nodes
                // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect
                if (descendant instanceof Text) {
                    descendant = descendant.parentNode;
                }
                return parent.contains(descendant);
            }
            exports.Range = Range;
            exports.default = Selection;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Break = function(_Parchment$Embed) {
                _inherits(Break, _Parchment$Embed);
                function Break() {
                    _classCallCheck(this, Break);
                    return _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));
                }
                _createClass(Break, [
                    {
                        key: 'insertInto',
                        value: function insertInto(parent, ref) {
                            if (parent.children.length === 0) {
                                _get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), 'insertInto', this).call(this, parent, ref);
                            } else {
                                this.remove();
                            }
                        }
                    },
                    {
                        key: 'length',
                        value: function length() {
                            return 0;
                        }
                    },
                    {
                        key: 'value',
                        value: function value() {
                            return '';
                        }
                    }
                ], [
                    {
                        key: 'value',
                        value: function value() {
                            return undefined;
                        }
                    }
                ]);
                return Break;
            }(_parchment2.default.Embed);
            Break.blotName = 'break';
            Break.tagName = 'BR';
            exports.default = Break;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
                var extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
                };
                return function(d, b) {
                    extendStatics(d, b);
                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            }();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var linked_list_1 = __webpack_require__(44);
            var shadow_1 = __webpack_require__(30);
            var Registry = __webpack_require__(1);
            var ContainerBlot = function(_super) {
                __extends(ContainerBlot, _super);
                function ContainerBlot(domNode) {
                    var _this = _super.call(this, domNode) || this;
                    _this.build();
                    return _this;
                }
                ContainerBlot.prototype.appendChild = function(other) {
                    this.insertBefore(other);
                };
                ContainerBlot.prototype.attach = function() {
                    _super.prototype.attach.call(this);
                    this.children.forEach(function(child) {
                        child.attach();
                    });
                };
                ContainerBlot.prototype.build = function() {
                    var _this = this;
                    this.children = new linked_list_1.default();
                    // Need to be reversed for if DOM nodes already in order
                    [].slice.call(this.domNode.childNodes).reverse().forEach(function(node) {
                        try {
                            var child = makeBlot(node);
                            _this.insertBefore(child, _this.children.head || undefined);
                        } catch (err) {
                            if (err instanceof Registry.ParchmentError) return;
                            else throw err;
                        }
                    });
                };
                ContainerBlot.prototype.deleteAt = function(index, length) {
                    if (index === 0 && length === this.length()) {
                        return this.remove();
                    }
                    this.children.forEachAt(index, length, function(child, offset, length) {
                        child.deleteAt(offset, length);
                    });
                };
                ContainerBlot.prototype.descendant = function(criteria, index) {
                    var _a = this.children.find(index), child = _a[0], offset = _a[1];
                    if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {
                        return [
                            child,
                            offset
                        ];
                    } else if (child instanceof ContainerBlot) {
                        return child.descendant(criteria, offset);
                    } else {
                        return [
                            null,
                            -1
                        ];
                    }
                };
                ContainerBlot.prototype.descendants = function(criteria, index, length) {
                    if (index === void 0) {
                        index = 0;
                    }
                    if (length === void 0) {
                        length = Number.MAX_VALUE;
                    }
                    var descendants = [];
                    var lengthLeft = length;
                    this.children.forEachAt(index, length, function(child, index, length) {
                        if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {
                            descendants.push(child);
                        }
                        if (child instanceof ContainerBlot) {
                            descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));
                        }
                        lengthLeft -= length;
                    });
                    return descendants;
                };
                ContainerBlot.prototype.detach = function() {
                    this.children.forEach(function(child) {
                        child.detach();
                    });
                    _super.prototype.detach.call(this);
                };
                ContainerBlot.prototype.formatAt = function(index, length, name, value) {
                    this.children.forEachAt(index, length, function(child, offset, length) {
                        child.formatAt(offset, length, name, value);
                    });
                };
                ContainerBlot.prototype.insertAt = function(index, value, def) {
                    var _a = this.children.find(index), child = _a[0], offset = _a[1];
                    if (child) {
                        child.insertAt(offset, value, def);
                    } else {
                        var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
                        this.appendChild(blot);
                    }
                };
                ContainerBlot.prototype.insertBefore = function(childBlot, refBlot) {
                    if (this.statics.allowedChildren != null && !this.statics.allowedChildren.some(function(child) {
                        return childBlot instanceof child;
                    })) {
                        throw new Registry.ParchmentError("Cannot insert " + childBlot.statics.blotName + " into " + this.statics.blotName);
                    }
                    childBlot.insertInto(this, refBlot);
                };
                ContainerBlot.prototype.length = function() {
                    return this.children.reduce(function(memo, child) {
                        return memo + child.length();
                    }, 0);
                };
                ContainerBlot.prototype.moveChildren = function(targetParent, refNode) {
                    this.children.forEach(function(child) {
                        targetParent.insertBefore(child, refNode);
                    });
                };
                ContainerBlot.prototype.optimize = function(context) {
                    _super.prototype.optimize.call(this, context);
                    if (this.children.length === 0) {
                        if (this.statics.defaultChild != null) {
                            var child = Registry.create(this.statics.defaultChild);
                            this.appendChild(child);
                            child.optimize(context);
                        } else {
                            this.remove();
                        }
                    }
                };
                ContainerBlot.prototype.path = function(index, inclusive) {
                    if (inclusive === void 0) {
                        inclusive = false;
                    }
                    var _a = this.children.find(index, inclusive), child = _a[0], offset = _a[1];
                    var position = [
                        [
                            this,
                            index
                        ]
                    ];
                    if (child instanceof ContainerBlot) {
                        return position.concat(child.path(offset, inclusive));
                    } else if (child != null) {
                        position.push([
                            child,
                            offset
                        ]);
                    }
                    return position;
                };
                ContainerBlot.prototype.removeChild = function(child) {
                    this.children.remove(child);
                };
                ContainerBlot.prototype.replace = function(target) {
                    if (target instanceof ContainerBlot) {
                        target.moveChildren(this);
                    }
                    _super.prototype.replace.call(this, target);
                };
                ContainerBlot.prototype.split = function(index, force) {
                    if (force === void 0) {
                        force = false;
                    }
                    if (!force) {
                        if (index === 0) return this;
                        if (index === this.length()) return this.next;
                    }
                    var after = this.clone();
                    this.parent.insertBefore(after, this.next);
                    this.children.forEachAt(index, this.length(), function(child, offset, length) {
                        child = child.split(offset, force);
                        after.appendChild(child);
                    });
                    return after;
                };
                ContainerBlot.prototype.unwrap = function() {
                    this.moveChildren(this.parent, this.next);
                    this.remove();
                };
                ContainerBlot.prototype.update = function(mutations, context) {
                    var _this = this;
                    var addedNodes = [];
                    var removedNodes = [];
                    mutations.forEach(function(mutation) {
                        if (mutation.target === _this.domNode && mutation.type === 'childList') {
                            addedNodes.push.apply(addedNodes, mutation.addedNodes);
                            removedNodes.push.apply(removedNodes, mutation.removedNodes);
                        }
                    });
                    removedNodes.forEach(function(node) {
                        // Check node has actually been removed
                        // One exception is Chrome does not immediately remove IFRAMEs
                        // from DOM but MutationRecord is correct in its reported removal
                        if (node.parentNode != null && // @ts-ignore
                        node.tagName !== 'IFRAME' && document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                            return;
                        }
                        var blot = Registry.find(node);
                        if (blot == null) return;
                        if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {
                            blot.detach();
                        }
                    });
                    addedNodes.filter(function(node) {
                        return node.parentNode == _this.domNode;
                    }).sort(function(a, b) {
                        if (a === b) return 0;
                        if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {
                            return 1;
                        }
                        return -1;
                    }).forEach(function(node) {
                        var refBlot = null;
                        if (node.nextSibling != null) {
                            refBlot = Registry.find(node.nextSibling);
                        }
                        var blot = makeBlot(node);
                        if (blot.next != refBlot || blot.next == null) {
                            if (blot.parent != null) {
                                blot.parent.removeChild(_this);
                            }
                            _this.insertBefore(blot, refBlot || undefined);
                        }
                    });
                };
                return ContainerBlot;
            }(shadow_1.default);
            function makeBlot(node) {
                var blot = Registry.find(node);
                if (blot == null) {
                    try {
                        blot = Registry.create(node);
                    } catch (e) {
                        blot = Registry.create(Registry.Scope.INLINE);
                        [].slice.call(node.childNodes).forEach(function(child) {
                            // @ts-ignore
                            blot.domNode.appendChild(child);
                        });
                        if (node.parentNode) {
                            node.parentNode.replaceChild(blot.domNode, node);
                        }
                        blot.attach();
                    }
                }
                return blot;
            }
            exports.default = ContainerBlot;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
                var extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
                };
                return function(d, b) {
                    extendStatics(d, b);
                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            }();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var attributor_1 = __webpack_require__(12);
            var store_1 = __webpack_require__(31);
            var container_1 = __webpack_require__(17);
            var Registry = __webpack_require__(1);
            var FormatBlot = function(_super) {
                __extends(FormatBlot, _super);
                function FormatBlot(domNode) {
                    var _this = _super.call(this, domNode) || this;
                    _this.attributes = new store_1.default(_this.domNode);
                    return _this;
                }
                FormatBlot.formats = function(domNode) {
                    if (typeof this.tagName === 'string') {
                        return true;
                    } else if (Array.isArray(this.tagName)) {
                        return domNode.tagName.toLowerCase();
                    }
                    return undefined;
                };
                FormatBlot.prototype.format = function(name, value) {
                    var format = Registry.query(name);
                    if (format instanceof attributor_1.default) {
                        this.attributes.attribute(format, value);
                    } else if (value) {
                        if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {
                            this.replaceWith(name, value);
                        }
                    }
                };
                FormatBlot.prototype.formats = function() {
                    var formats = this.attributes.values();
                    var format = this.statics.formats(this.domNode);
                    if (format != null) {
                        formats[this.statics.blotName] = format;
                    }
                    return formats;
                };
                FormatBlot.prototype.replaceWith = function(name, value) {
                    var replacement = _super.prototype.replaceWith.call(this, name, value);
                    this.attributes.copy(replacement);
                    return replacement;
                };
                FormatBlot.prototype.update = function(mutations, context) {
                    var _this = this;
                    _super.prototype.update.call(this, mutations, context);
                    if (mutations.some(function(mutation) {
                        return mutation.target === _this.domNode && mutation.type === 'attributes';
                    })) {
                        this.attributes.build();
                    }
                };
                FormatBlot.prototype.wrap = function(name, value) {
                    var wrapper = _super.prototype.wrap.call(this, name, value);
                    if (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {
                        this.attributes.move(wrapper);
                    }
                    return wrapper;
                };
                return FormatBlot;
            }(container_1.default);
            exports.default = FormatBlot;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
                var extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
                };
                return function(d, b) {
                    extendStatics(d, b);
                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            }();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var shadow_1 = __webpack_require__(30);
            var Registry = __webpack_require__(1);
            var LeafBlot = function(_super) {
                __extends(LeafBlot, _super);
                function LeafBlot() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                LeafBlot.value = function(domNode) {
                    return true;
                };
                LeafBlot.prototype.index = function(node, offset) {
                    if (this.domNode === node || this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                        return Math.min(offset, 1);
                    }
                    return -1;
                };
                LeafBlot.prototype.position = function(index, inclusive) {
                    var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);
                    if (index > 0) offset += 1;
                    return [
                        this.parent.domNode,
                        offset
                    ];
                };
                LeafBlot.prototype.value = function() {
                    var _a;
                    return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;
                };
                LeafBlot.scope = Registry.Scope.INLINE_BLOT;
                return LeafBlot;
            }(shadow_1.default);
            exports.default = LeafBlot;
        /***/ },
        function(module1, exports, __webpack_require__) {
            var equal = __webpack_require__(11);
            var extend = __webpack_require__(3);
            var lib = {
                attributes: {
                    compose: function(a, b, keepNull) {
                        if (typeof a !== 'object') a = {};
                        if (typeof b !== 'object') b = {};
                        var attributes = extend(true, {}, b);
                        if (!keepNull) {
                            attributes = Object.keys(attributes).reduce(function(copy, key) {
                                if (attributes[key] != null) {
                                    copy[key] = attributes[key];
                                }
                                return copy;
                            }, {});
                        }
                        for(var key in a){
                            if (a[key] !== undefined && b[key] === undefined) {
                                attributes[key] = a[key];
                            }
                        }
                        return Object.keys(attributes).length > 0 ? attributes : undefined;
                    },
                    diff: function(a, b) {
                        if (typeof a !== 'object') a = {};
                        if (typeof b !== 'object') b = {};
                        var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function(attributes, key) {
                            if (!equal(a[key], b[key])) {
                                attributes[key] = b[key] === undefined ? null : b[key];
                            }
                            return attributes;
                        }, {});
                        return Object.keys(attributes).length > 0 ? attributes : undefined;
                    },
                    transform: function(a, b, priority) {
                        if (typeof a !== 'object') return b;
                        if (typeof b !== 'object') return undefined;
                        if (!priority) return b; // b simply overwrites us without priority
                        var attributes = Object.keys(b).reduce(function(attributes, key) {
                            if (a[key] === undefined) attributes[key] = b[key]; // null is a valid value
                            return attributes;
                        }, {});
                        return Object.keys(attributes).length > 0 ? attributes : undefined;
                    }
                },
                iterator: function(ops) {
                    return new Iterator(ops);
                },
                length: function(op) {
                    if (typeof op['delete'] === 'number') {
                        return op['delete'];
                    } else if (typeof op.retain === 'number') {
                        return op.retain;
                    } else {
                        return typeof op.insert === 'string' ? op.insert.length : 1;
                    }
                }
            };
            function Iterator(ops) {
                this.ops = ops;
                this.index = 0;
                this.offset = 0;
            }
            ;
            Iterator.prototype.hasNext = function() {
                return this.peekLength() < Infinity;
            };
            Iterator.prototype.next = function(length) {
                if (!length) length = Infinity;
                var nextOp = this.ops[this.index];
                if (nextOp) {
                    var offset = this.offset;
                    var opLength = lib.length(nextOp);
                    if (length >= opLength - offset) {
                        length = opLength - offset;
                        this.index += 1;
                        this.offset = 0;
                    } else {
                        this.offset += length;
                    }
                    if (typeof nextOp['delete'] === 'number') {
                        return {
                            'delete': length
                        };
                    } else {
                        var retOp = {};
                        if (nextOp.attributes) {
                            retOp.attributes = nextOp.attributes;
                        }
                        if (typeof nextOp.retain === 'number') {
                            retOp.retain = length;
                        } else if (typeof nextOp.insert === 'string') {
                            retOp.insert = nextOp.insert.substr(offset, length);
                        } else {
                            // offset should === 0, length should === 1
                            retOp.insert = nextOp.insert;
                        }
                        return retOp;
                    }
                } else {
                    return {
                        retain: Infinity
                    };
                }
            };
            Iterator.prototype.peek = function() {
                return this.ops[this.index];
            };
            Iterator.prototype.peekLength = function() {
                if (this.ops[this.index]) {
                    // Should never return 0 if our index is being managed correctly
                    return lib.length(this.ops[this.index]) - this.offset;
                } else {
                    return Infinity;
                }
            };
            Iterator.prototype.peekType = function() {
                if (this.ops[this.index]) {
                    if (typeof this.ops[this.index]['delete'] === 'number') {
                        return 'delete';
                    } else if (typeof this.ops[this.index].retain === 'number') {
                        return 'retain';
                    } else {
                        return 'insert';
                    }
                }
                return 'retain';
            };
            Iterator.prototype.rest = function() {
                if (!this.hasNext()) {
                    return [];
                } else if (this.offset === 0) {
                    return this.ops.slice(this.index);
                } else {
                    var offset = this.offset;
                    var index = this.index;
                    var next = this.next();
                    var rest = this.ops.slice(this.index);
                    this.offset = offset;
                    this.index = index;
                    return [
                        next
                    ].concat(rest);
                }
            };
            module1.exports = lib;
        /***/ },
        function(module1, exports) {
            var clone = function() {
                'use strict';
                function _instanceof(obj, type) {
                    return type != null && obj instanceof type;
                }
                var nativeMap;
                try {
                    nativeMap = Map;
                } catch (_) {
                    // maybe a reference error because no `Map`. Give it a dummy value that no
                    // value will ever be an instanceof.
                    nativeMap = function() {};
                }
                var nativeSet;
                try {
                    nativeSet = Set;
                } catch (_) {
                    nativeSet = function() {};
                }
                var nativePromise;
                try {
                    nativePromise = Promise;
                } catch (_) {
                    nativePromise = function() {};
                }
                /**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
 *    should be cloned as well. Non-enumerable properties on the prototype
 *    chain will be ignored. (optional - false by default)
*/ function clone(parent, circular, depth, prototype, includeNonEnumerable) {
                    if (typeof circular === 'object') {
                        depth = circular.depth;
                        prototype = circular.prototype;
                        includeNonEnumerable = circular.includeNonEnumerable;
                        circular = circular.circular;
                    }
                    // maintain two arrays for circular references, where corresponding parents
                    // and children have the same index
                    var allParents = [];
                    var allChildren = [];
                    var useBuffer = typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Buffer"] != 'undefined';
                    if (typeof circular == 'undefined') circular = true;
                    if (typeof depth == 'undefined') depth = Infinity;
                    // recurse this function so we don't reset allParents and allChildren
                    function _clone(parent, depth) {
                        // cloning null always returns null
                        if (parent === null) return null;
                        if (depth === 0) return parent;
                        var child;
                        var proto;
                        if (typeof parent != 'object') {
                            return parent;
                        }
                        if (_instanceof(parent, nativeMap)) {
                            child = new nativeMap();
                        } else if (_instanceof(parent, nativeSet)) {
                            child = new nativeSet();
                        } else if (_instanceof(parent, nativePromise)) {
                            child = new nativePromise(function(resolve, reject) {
                                parent.then(function(value) {
                                    resolve(_clone(value, depth - 1));
                                }, function(err) {
                                    reject(_clone(err, depth - 1));
                                });
                            });
                        } else if (clone.__isArray(parent)) {
                            child = [];
                        } else if (clone.__isRegExp(parent)) {
                            child = new RegExp(parent.source, __getRegExpFlags(parent));
                            if (parent.lastIndex) child.lastIndex = parent.lastIndex;
                        } else if (clone.__isDate(parent)) {
                            child = new Date(parent.getTime());
                        } else if (useBuffer && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Buffer"].isBuffer(parent)) {
                            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Buffer"].allocUnsafe) {
                                // Node.js >= 4.5.0
                                child = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Buffer"].allocUnsafe(parent.length);
                            } else {
                                // Older Node.js versions
                                child = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Buffer"](parent.length);
                            }
                            parent.copy(child);
                            return child;
                        } else if (_instanceof(parent, Error)) {
                            child = Object.create(parent);
                        } else {
                            if (typeof prototype == 'undefined') {
                                proto = Object.getPrototypeOf(parent);
                                child = Object.create(proto);
                            } else {
                                child = Object.create(prototype);
                                proto = prototype;
                            }
                        }
                        if (circular) {
                            var index = allParents.indexOf(parent);
                            if (index != -1) {
                                return allChildren[index];
                            }
                            allParents.push(parent);
                            allChildren.push(child);
                        }
                        if (_instanceof(parent, nativeMap)) {
                            parent.forEach(function(value, key) {
                                var keyChild = _clone(key, depth - 1);
                                var valueChild = _clone(value, depth - 1);
                                child.set(keyChild, valueChild);
                            });
                        }
                        if (_instanceof(parent, nativeSet)) {
                            parent.forEach(function(value) {
                                var entryChild = _clone(value, depth - 1);
                                child.add(entryChild);
                            });
                        }
                        for(var i in parent){
                            var attrs;
                            if (proto) {
                                attrs = Object.getOwnPropertyDescriptor(proto, i);
                            }
                            if (attrs && attrs.set == null) {
                                continue;
                            }
                            child[i] = _clone(parent[i], depth - 1);
                        }
                        if (Object.getOwnPropertySymbols) {
                            var symbols = Object.getOwnPropertySymbols(parent);
                            for(var i = 0; i < symbols.length; i++){
                                // Don't need to worry about cloning a symbol because it is a primitive,
                                // like a number or string.
                                var symbol = symbols[i];
                                var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
                                if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                                    continue;
                                }
                                child[symbol] = _clone(parent[symbol], depth - 1);
                                if (!descriptor.enumerable) {
                                    Object.defineProperty(child, symbol, {
                                        enumerable: false
                                    });
                                }
                            }
                        }
                        if (includeNonEnumerable) {
                            var allPropertyNames = Object.getOwnPropertyNames(parent);
                            for(var i = 0; i < allPropertyNames.length; i++){
                                var propertyName = allPropertyNames[i];
                                var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
                                if (descriptor && descriptor.enumerable) {
                                    continue;
                                }
                                child[propertyName] = _clone(parent[propertyName], depth - 1);
                                Object.defineProperty(child, propertyName, {
                                    enumerable: false
                                });
                            }
                        }
                        return child;
                    }
                    return _clone(parent, depth);
                }
                /**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */ clone.clonePrototype = function clonePrototype(parent) {
                    if (parent === null) return null;
                    var c = function() {};
                    c.prototype = parent;
                    return new c();
                };
                // private utility functions
                function __objToStr(o) {
                    return Object.prototype.toString.call(o);
                }
                clone.__objToStr = __objToStr;
                function __isDate(o) {
                    return typeof o === 'object' && __objToStr(o) === '[object Date]';
                }
                clone.__isDate = __isDate;
                function __isArray(o) {
                    return typeof o === 'object' && __objToStr(o) === '[object Array]';
                }
                clone.__isArray = __isArray;
                function __isRegExp(o) {
                    return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
                }
                clone.__isRegExp = __isRegExp;
                function __getRegExpFlags(re) {
                    var flags = '';
                    if (re.global) flags += 'g';
                    if (re.ignoreCase) flags += 'i';
                    if (re.multiline) flags += 'm';
                    return flags;
                }
                clone.__getRegExpFlags = __getRegExpFlags;
                return clone;
            }();
            if (typeof module1 === 'object' && module1.exports) {
                module1.exports = clone;
            }
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _slicedToArray = function() {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                            _arr.push(_s.value);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally{
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally{
                            if (_d) throw _e;
                        }
                    }
                    return _arr;
                }
                return function(arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _emitter = __webpack_require__(8);
            var _emitter2 = _interopRequireDefault(_emitter);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _break = __webpack_require__(16);
            var _break2 = _interopRequireDefault(_break);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            var _container = __webpack_require__(25);
            var _container2 = _interopRequireDefault(_container);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            function isLine(blot) {
                return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;
            }
            var Scroll = function(_Parchment$Scroll) {
                _inherits(Scroll, _Parchment$Scroll);
                function Scroll(domNode, config) {
                    _classCallCheck(this, Scroll);
                    var _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));
                    _this.emitter = config.emitter;
                    if (Array.isArray(config.whitelist)) {
                        _this.whitelist = config.whitelist.reduce(function(whitelist, format) {
                            whitelist[format] = true;
                            return whitelist;
                        }, {});
                    }
                    // Some reason fixes composition issues with character languages in Windows/Chrome, Safari
                    _this.domNode.addEventListener('DOMNodeInserted', function() {});
                    _this.optimize();
                    _this.enable();
                    return _this;
                }
                _createClass(Scroll, [
                    {
                        key: 'batchStart',
                        value: function batchStart() {
                            this.batch = true;
                        }
                    },
                    {
                        key: 'batchEnd',
                        value: function batchEnd() {
                            this.batch = false;
                            this.optimize();
                        }
                    },
                    {
                        key: 'deleteAt',
                        value: function deleteAt(index, length) {
                            var _line = this.line(index), _line2 = _slicedToArray(_line, 2), first = _line2[0], offset = _line2[1];
                            var _line3 = this.line(index + length), _line4 = _slicedToArray(_line3, 1), last = _line4[0];
                            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'deleteAt', this).call(this, index, length);
                            if (last != null && first !== last && offset > 0) {
                                if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {
                                    this.optimize();
                                    return;
                                }
                                if (first instanceof _code2.default) {
                                    var newlineIndex = first.newlineIndex(first.length(), true);
                                    if (newlineIndex > -1) {
                                        first = first.split(newlineIndex + 1);
                                        if (first === last) {
                                            this.optimize();
                                            return;
                                        }
                                    }
                                } else if (last instanceof _code2.default) {
                                    var _newlineIndex = last.newlineIndex(0);
                                    if (_newlineIndex > -1) {
                                        last.split(_newlineIndex + 1);
                                    }
                                }
                                var ref = last.children.head instanceof _break2.default ? null : last.children.head;
                                first.moveChildren(last, ref);
                                first.remove();
                            }
                            this.optimize();
                        }
                    },
                    {
                        key: 'enable',
                        value: function enable() {
                            var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                            this.domNode.setAttribute('contenteditable', enabled);
                        }
                    },
                    {
                        key: 'formatAt',
                        value: function formatAt(index, length, format, value) {
                            if (this.whitelist != null && !this.whitelist[format]) return;
                            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'formatAt', this).call(this, index, length, format, value);
                            this.optimize();
                        }
                    },
                    {
                        key: 'insertAt',
                        value: function insertAt(index, value, def) {
                            if (def != null && this.whitelist != null && !this.whitelist[value]) return;
                            if (index >= this.length()) {
                                if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {
                                    var blot = _parchment2.default.create(this.statics.defaultChild);
                                    this.appendChild(blot);
                                    if (def == null && value.endsWith('\n')) {
                                        value = value.slice(0, -1);
                                    }
                                    blot.insertAt(0, value, def);
                                } else {
                                    var embed = _parchment2.default.create(value, def);
                                    this.appendChild(embed);
                                }
                            } else {
                                _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertAt', this).call(this, index, value, def);
                            }
                            this.optimize();
                        }
                    },
                    {
                        key: 'insertBefore',
                        value: function insertBefore(blot, ref) {
                            if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {
                                var wrapper = _parchment2.default.create(this.statics.defaultChild);
                                wrapper.appendChild(blot);
                                blot = wrapper;
                            }
                            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertBefore', this).call(this, blot, ref);
                        }
                    },
                    {
                        key: 'leaf',
                        value: function leaf(index) {
                            return this.path(index).pop() || [
                                null,
                                -1
                            ];
                        }
                    },
                    {
                        key: 'line',
                        value: function line(index) {
                            if (index === this.length()) {
                                return this.line(index - 1);
                            }
                            return this.descendant(isLine, index);
                        }
                    },
                    {
                        key: 'lines',
                        value: function lines() {
                            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;
                            var getLines = function getLines(blot, index, length) {
                                var lines = [], lengthLeft = length;
                                blot.children.forEachAt(index, length, function(child, index, length) {
                                    if (isLine(child)) {
                                        lines.push(child);
                                    } else if (child instanceof _parchment2.default.Container) {
                                        lines = lines.concat(getLines(child, index, lengthLeft));
                                    }
                                    lengthLeft -= length;
                                });
                                return lines;
                            };
                            return getLines(this, index, length);
                        }
                    },
                    {
                        key: 'optimize',
                        value: function optimize() {
                            var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                            if (this.batch === true) return;
                            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'optimize', this).call(this, mutations, context);
                            if (mutations.length > 0) {
                                this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);
                            }
                        }
                    },
                    {
                        key: 'path',
                        value: function path(index) {
                            return _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'path', this).call(this, index).slice(1); // Exclude self
                        }
                    },
                    {
                        key: 'update',
                        value: function update(mutations) {
                            if (this.batch === true) return;
                            var source = _emitter2.default.sources.USER;
                            if (typeof mutations === 'string') {
                                source = mutations;
                            }
                            if (!Array.isArray(mutations)) {
                                mutations = this.observer.takeRecords();
                            }
                            if (mutations.length > 0) {
                                this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);
                            }
                            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'update', this).call(this, mutations.concat([])); // pass copy
                            if (mutations.length > 0) {
                                this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);
                            }
                        }
                    }
                ]);
                return Scroll;
            }(_parchment2.default.Scroll);
            Scroll.blotName = 'scroll';
            Scroll.className = 'ql-editor';
            Scroll.tagName = 'DIV';
            Scroll.defaultChild = 'block';
            Scroll.allowedChildren = [
                _block2.default,
                _block.BlockEmbed,
                _container2.default
            ];
            exports.default = Scroll;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.SHORTKEY = exports.default = undefined;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj;
            } : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _slicedToArray = function() {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                            _arr.push(_s.value);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally{
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally{
                            if (_d) throw _e;
                        }
                    }
                    return _arr;
                }
                return function(arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _clone = __webpack_require__(21);
            var _clone2 = _interopRequireDefault(_clone);
            var _deepEqual = __webpack_require__(11);
            var _deepEqual2 = _interopRequireDefault(_deepEqual);
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _op = __webpack_require__(20);
            var _op2 = _interopRequireDefault(_op);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var debug = (0, _logger2.default)('quill:keyboard');
            var SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';
            var Keyboard = function(_Module) {
                _inherits(Keyboard, _Module);
                _createClass(Keyboard, null, [
                    {
                        key: 'match',
                        value: function match(evt, binding) {
                            binding = normalize(binding);
                            if ([
                                'altKey',
                                'ctrlKey',
                                'metaKey',
                                'shiftKey'
                            ].some(function(key) {
                                return !!binding[key] !== evt[key] && binding[key] !== null;
                            })) {
                                return false;
                            }
                            return binding.key === (evt.which || evt.keyCode);
                        }
                    }
                ]);
                function Keyboard(quill, options) {
                    _classCallCheck(this, Keyboard);
                    var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));
                    _this.bindings = {};
                    Object.keys(_this.options.bindings).forEach(function(name) {
                        if (name === 'list autofill' && quill.scroll.whitelist != null && !quill.scroll.whitelist['list']) {
                            return;
                        }
                        if (_this.options.bindings[name]) {
                            _this.addBinding(_this.options.bindings[name]);
                        }
                    });
                    _this.addBinding({
                        key: Keyboard.keys.ENTER,
                        shiftKey: null
                    }, handleEnter);
                    _this.addBinding({
                        key: Keyboard.keys.ENTER,
                        metaKey: null,
                        ctrlKey: null,
                        altKey: null
                    }, function() {});
                    if (/Firefox/i.test(navigator.userAgent)) {
                        // Need to handle delete and backspace for Firefox in the general case #1171
                        _this.addBinding({
                            key: Keyboard.keys.BACKSPACE
                        }, {
                            collapsed: true
                        }, handleBackspace);
                        _this.addBinding({
                            key: Keyboard.keys.DELETE
                        }, {
                            collapsed: true
                        }, handleDelete);
                    } else {
                        _this.addBinding({
                            key: Keyboard.keys.BACKSPACE
                        }, {
                            collapsed: true,
                            prefix: /^.?$/
                        }, handleBackspace);
                        _this.addBinding({
                            key: Keyboard.keys.DELETE
                        }, {
                            collapsed: true,
                            suffix: /^.?$/
                        }, handleDelete);
                    }
                    _this.addBinding({
                        key: Keyboard.keys.BACKSPACE
                    }, {
                        collapsed: false
                    }, handleDeleteRange);
                    _this.addBinding({
                        key: Keyboard.keys.DELETE
                    }, {
                        collapsed: false
                    }, handleDeleteRange);
                    _this.addBinding({
                        key: Keyboard.keys.BACKSPACE,
                        altKey: null,
                        ctrlKey: null,
                        metaKey: null,
                        shiftKey: null
                    }, {
                        collapsed: true,
                        offset: 0
                    }, handleBackspace);
                    _this.listen();
                    return _this;
                }
                _createClass(Keyboard, [
                    {
                        key: 'addBinding',
                        value: function addBinding(key) {
                            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                            var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                            var binding = normalize(key);
                            if (binding == null || binding.key == null) {
                                return debug.warn('Attempted to add invalid keyboard binding', binding);
                            }
                            if (typeof context === 'function') {
                                context = {
                                    handler: context
                                };
                            }
                            if (typeof handler === 'function') {
                                handler = {
                                    handler: handler
                                };
                            }
                            binding = (0, _extend2.default)(binding, context, handler);
                            this.bindings[binding.key] = this.bindings[binding.key] || [];
                            this.bindings[binding.key].push(binding);
                        }
                    },
                    {
                        key: 'listen',
                        value: function listen() {
                            var _this2 = this;
                            this.quill.root.addEventListener('keydown', function(evt) {
                                if (evt.defaultPrevented) return;
                                var which = evt.which || evt.keyCode;
                                var bindings = (_this2.bindings[which] || []).filter(function(binding) {
                                    return Keyboard.match(evt, binding);
                                });
                                if (bindings.length === 0) return;
                                var range = _this2.quill.getSelection();
                                if (range == null || !_this2.quill.hasFocus()) return;
                                var _quill$getLine = _this2.quill.getLine(range.index), _quill$getLine2 = _slicedToArray(_quill$getLine, 2), line = _quill$getLine2[0], offset = _quill$getLine2[1];
                                var _quill$getLeaf = _this2.quill.getLeaf(range.index), _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2), leafStart = _quill$getLeaf2[0], offsetStart = _quill$getLeaf2[1];
                                var _ref = range.length === 0 ? [
                                    leafStart,
                                    offsetStart
                                ] : _this2.quill.getLeaf(range.index + range.length), _ref2 = _slicedToArray(_ref, 2), leafEnd = _ref2[0], offsetEnd = _ref2[1];
                                var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : '';
                                var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : '';
                                var curContext = {
                                    collapsed: range.length === 0,
                                    empty: range.length === 0 && line.length() <= 1,
                                    format: _this2.quill.getFormat(range),
                                    offset: offset,
                                    prefix: prefixText,
                                    suffix: suffixText
                                };
                                var prevented = bindings.some(function(binding) {
                                    if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;
                                    if (binding.empty != null && binding.empty !== curContext.empty) return false;
                                    if (binding.offset != null && binding.offset !== curContext.offset) return false;
                                    if (Array.isArray(binding.format)) {
                                        // any format is present
                                        if (binding.format.every(function(name) {
                                            return curContext.format[name] == null;
                                        })) {
                                            return false;
                                        }
                                    } else if (_typeof(binding.format) === 'object') {
                                        // all formats must match
                                        if (!Object.keys(binding.format).every(function(name) {
                                            if (binding.format[name] === true) return curContext.format[name] != null;
                                            if (binding.format[name] === false) return curContext.format[name] == null;
                                            return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);
                                        })) {
                                            return false;
                                        }
                                    }
                                    if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;
                                    if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;
                                    return binding.handler.call(_this2, range, curContext) !== true;
                                });
                                if (prevented) {
                                    evt.preventDefault();
                                }
                            });
                        }
                    }
                ]);
                return Keyboard;
            }(_module2.default);
            Keyboard.keys = {
                BACKSPACE: 8,
                TAB: 9,
                ENTER: 13,
                ESCAPE: 27,
                LEFT: 37,
                UP: 38,
                RIGHT: 39,
                DOWN: 40,
                DELETE: 46
            };
            Keyboard.DEFAULTS = {
                bindings: {
                    'bold': makeFormatHandler('bold'),
                    'italic': makeFormatHandler('italic'),
                    'underline': makeFormatHandler('underline'),
                    'indent': {
                        // highlight tab or tab at beginning of list, indent or blockquote
                        key: Keyboard.keys.TAB,
                        format: [
                            'blockquote',
                            'indent',
                            'list'
                        ],
                        handler: function handler(range, context) {
                            if (context.collapsed && context.offset !== 0) return true;
                            this.quill.format('indent', '+1', _quill2.default.sources.USER);
                        }
                    },
                    'outdent': {
                        key: Keyboard.keys.TAB,
                        shiftKey: true,
                        format: [
                            'blockquote',
                            'indent',
                            'list'
                        ],
                        // highlight tab or tab at beginning of list, indent or blockquote
                        handler: function handler(range, context) {
                            if (context.collapsed && context.offset !== 0) return true;
                            this.quill.format('indent', '-1', _quill2.default.sources.USER);
                        }
                    },
                    'outdent backspace': {
                        key: Keyboard.keys.BACKSPACE,
                        collapsed: true,
                        shiftKey: null,
                        metaKey: null,
                        ctrlKey: null,
                        altKey: null,
                        format: [
                            'indent',
                            'list'
                        ],
                        offset: 0,
                        handler: function handler(range, context) {
                            if (context.format.indent != null) {
                                this.quill.format('indent', '-1', _quill2.default.sources.USER);
                            } else if (context.format.list != null) {
                                this.quill.format('list', false, _quill2.default.sources.USER);
                            }
                        }
                    },
                    'indent code-block': makeCodeBlockHandler(true),
                    'outdent code-block': makeCodeBlockHandler(false),
                    'remove tab': {
                        key: Keyboard.keys.TAB,
                        shiftKey: true,
                        collapsed: true,
                        prefix: /\t$/,
                        handler: function handler(range) {
                            this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);
                        }
                    },
                    'tab': {
                        key: Keyboard.keys.TAB,
                        handler: function handler(range) {
                            this.quill.history.cutoff();
                            var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert('\t');
                            this.quill.updateContents(delta, _quill2.default.sources.USER);
                            this.quill.history.cutoff();
                            this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                        }
                    },
                    'list empty enter': {
                        key: Keyboard.keys.ENTER,
                        collapsed: true,
                        format: [
                            'list'
                        ],
                        empty: true,
                        handler: function handler(range, context) {
                            this.quill.format('list', false, _quill2.default.sources.USER);
                            if (context.format.indent) {
                                this.quill.format('indent', false, _quill2.default.sources.USER);
                            }
                        }
                    },
                    'checklist enter': {
                        key: Keyboard.keys.ENTER,
                        collapsed: true,
                        format: {
                            list: 'checked'
                        },
                        handler: function handler(range) {
                            var _quill$getLine3 = this.quill.getLine(range.index), _quill$getLine4 = _slicedToArray(_quill$getLine3, 2), line = _quill$getLine4[0], offset = _quill$getLine4[1];
                            var formats = (0, _extend2.default)({}, line.formats(), {
                                list: 'checked'
                            });
                            var delta = new _quillDelta2.default().retain(range.index).insert('\n', formats).retain(line.length() - offset - 1).retain(1, {
                                list: 'unchecked'
                            });
                            this.quill.updateContents(delta, _quill2.default.sources.USER);
                            this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                            this.quill.scrollIntoView();
                        }
                    },
                    'header enter': {
                        key: Keyboard.keys.ENTER,
                        collapsed: true,
                        format: [
                            'header'
                        ],
                        suffix: /^$/,
                        handler: function handler(range, context) {
                            var _quill$getLine5 = this.quill.getLine(range.index), _quill$getLine6 = _slicedToArray(_quill$getLine5, 2), line = _quill$getLine6[0], offset = _quill$getLine6[1];
                            var delta = new _quillDelta2.default().retain(range.index).insert('\n', context.format).retain(line.length() - offset - 1).retain(1, {
                                header: null
                            });
                            this.quill.updateContents(delta, _quill2.default.sources.USER);
                            this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                            this.quill.scrollIntoView();
                        }
                    },
                    'list autofill': {
                        key: ' ',
                        collapsed: true,
                        format: {
                            list: false
                        },
                        prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
                        handler: function handler(range, context) {
                            var length = context.prefix.length;
                            var _quill$getLine7 = this.quill.getLine(range.index), _quill$getLine8 = _slicedToArray(_quill$getLine7, 2), line = _quill$getLine8[0], offset = _quill$getLine8[1];
                            if (offset > length) return true;
                            var value = void 0;
                            switch(context.prefix.trim()){
                                case '[]':
                                case '[ ]':
                                    value = 'unchecked';
                                    break;
                                case '[x]':
                                    value = 'checked';
                                    break;
                                case '-':
                                case '*':
                                    value = 'bullet';
                                    break;
                                default:
                                    value = 'ordered';
                            }
                            this.quill.insertText(range.index, ' ', _quill2.default.sources.USER);
                            this.quill.history.cutoff();
                            var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, {
                                list: value
                            });
                            this.quill.updateContents(delta, _quill2.default.sources.USER);
                            this.quill.history.cutoff();
                            this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);
                        }
                    },
                    'code exit': {
                        key: Keyboard.keys.ENTER,
                        collapsed: true,
                        format: [
                            'code-block'
                        ],
                        prefix: /\n\n$/,
                        suffix: /^\s+$/,
                        handler: function handler(range) {
                            var _quill$getLine9 = this.quill.getLine(range.index), _quill$getLine10 = _slicedToArray(_quill$getLine9, 2), line = _quill$getLine10[0], offset = _quill$getLine10[1];
                            var delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, {
                                'code-block': null
                            }).delete(1);
                            this.quill.updateContents(delta, _quill2.default.sources.USER);
                        }
                    },
                    'embed left': makeEmbedArrowHandler(Keyboard.keys.LEFT, false),
                    'embed left shift': makeEmbedArrowHandler(Keyboard.keys.LEFT, true),
                    'embed right': makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),
                    'embed right shift': makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)
                }
            };
            function makeEmbedArrowHandler(key, shiftKey) {
                var _ref3;
                var where = key === Keyboard.keys.LEFT ? 'prefix' : 'suffix';
                return _ref3 = {
                    key: key,
                    shiftKey: shiftKey,
                    altKey: null
                }, _defineProperty(_ref3, where, /^$/), _defineProperty(_ref3, 'handler', function handler(range) {
                    var index = range.index;
                    if (key === Keyboard.keys.RIGHT) {
                        index += range.length + 1;
                    }
                    var _quill$getLeaf3 = this.quill.getLeaf(index), _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1), leaf = _quill$getLeaf4[0];
                    if (!(leaf instanceof _parchment2.default.Embed)) return true;
                    if (key === Keyboard.keys.LEFT) {
                        if (shiftKey) {
                            this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);
                        } else {
                            this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);
                        }
                    } else {
                        if (shiftKey) {
                            this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);
                        } else {
                            this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);
                        }
                    }
                    return false;
                }), _ref3;
            }
            function handleBackspace(range, context) {
                if (range.index === 0 || this.quill.getLength() <= 1) return;
                var _quill$getLine11 = this.quill.getLine(range.index), _quill$getLine12 = _slicedToArray(_quill$getLine11, 1), line = _quill$getLine12[0];
                var formats = {};
                if (context.offset === 0) {
                    var _quill$getLine13 = this.quill.getLine(range.index - 1), _quill$getLine14 = _slicedToArray(_quill$getLine13, 1), prev = _quill$getLine14[0];
                    if (prev != null && prev.length() > 1) {
                        var curFormats = line.formats();
                        var prevFormats = this.quill.getFormat(range.index - 1, 1);
                        formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};
                    }
                }
                // Check for astral symbols
                var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
                this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);
                if (Object.keys(formats).length > 0) {
                    this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);
                }
                this.quill.focus();
            }
            function handleDelete(range, context) {
                // Check for astral symbols
                var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
                if (range.index >= this.quill.getLength() - length) return;
                var formats = {}, nextLength = 0;
                var _quill$getLine15 = this.quill.getLine(range.index), _quill$getLine16 = _slicedToArray(_quill$getLine15, 1), line = _quill$getLine16[0];
                if (context.offset >= line.length() - 1) {
                    var _quill$getLine17 = this.quill.getLine(range.index + 1), _quill$getLine18 = _slicedToArray(_quill$getLine17, 1), next = _quill$getLine18[0];
                    if (next) {
                        var curFormats = line.formats();
                        var nextFormats = this.quill.getFormat(range.index, 1);
                        formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};
                        nextLength = next.length();
                    }
                }
                this.quill.deleteText(range.index, length, _quill2.default.sources.USER);
                if (Object.keys(formats).length > 0) {
                    this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);
                }
            }
            function handleDeleteRange(range) {
                var lines = this.quill.getLines(range);
                var formats = {};
                if (lines.length > 1) {
                    var firstFormats = lines[0].formats();
                    var lastFormats = lines[lines.length - 1].formats();
                    formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};
                }
                this.quill.deleteText(range, _quill2.default.sources.USER);
                if (Object.keys(formats).length > 0) {
                    this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);
                }
                this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
                this.quill.focus();
            }
            function handleEnter(range, context) {
                var _this3 = this;
                if (range.length > 0) {
                    this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change
                }
                var lineFormats = Object.keys(context.format).reduce(function(lineFormats, format) {
                    if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {
                        lineFormats[format] = context.format[format];
                    }
                    return lineFormats;
                }, {});
                this.quill.insertText(range.index, '\n', lineFormats, _quill2.default.sources.USER);
                // Earlier scroll.deleteAt might have messed up our selection,
                // so insertText's built in selection preservation is not reliable
                this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                this.quill.focus();
                Object.keys(context.format).forEach(function(name) {
                    if (lineFormats[name] != null) return;
                    if (Array.isArray(context.format[name])) return;
                    if (name === 'link') return;
                    _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);
                });
            }
            function makeCodeBlockHandler(indent) {
                return {
                    key: Keyboard.keys.TAB,
                    shiftKey: !indent,
                    format: {
                        'code-block': true
                    },
                    handler: function handler(range) {
                        var CodeBlock = _parchment2.default.query('code-block');
                        var index = range.index, length = range.length;
                        var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index), _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2), block = _quill$scroll$descend2[0], offset = _quill$scroll$descend2[1];
                        if (block == null) return;
                        var scrollIndex = this.quill.getIndex(block);
                        var start = block.newlineIndex(offset, true) + 1;
                        var end = block.newlineIndex(scrollIndex + offset + length);
                        var lines = block.domNode.textContent.slice(start, end).split('\n');
                        offset = 0;
                        lines.forEach(function(line, i) {
                            if (indent) {
                                block.insertAt(start + offset, CodeBlock.TAB);
                                offset += CodeBlock.TAB.length;
                                if (i === 0) {
                                    index += CodeBlock.TAB.length;
                                } else {
                                    length += CodeBlock.TAB.length;
                                }
                            } else if (line.startsWith(CodeBlock.TAB)) {
                                block.deleteAt(start + offset, CodeBlock.TAB.length);
                                offset -= CodeBlock.TAB.length;
                                if (i === 0) {
                                    index -= CodeBlock.TAB.length;
                                } else {
                                    length -= CodeBlock.TAB.length;
                                }
                            }
                            offset += line.length + 1;
                        });
                        this.quill.update(_quill2.default.sources.USER);
                        this.quill.setSelection(index, length, _quill2.default.sources.SILENT);
                    }
                };
            }
            function makeFormatHandler(format) {
                return {
                    key: format[0].toUpperCase(),
                    shortKey: true,
                    handler: function handler(range, context) {
                        this.quill.format(format, !context.format[format], _quill2.default.sources.USER);
                    }
                };
            }
            function normalize(binding) {
                if (typeof binding === 'string' || typeof binding === 'number') {
                    return normalize({
                        key: binding
                    });
                }
                if ((typeof binding === 'undefined' ? 'undefined' : _typeof(binding)) === 'object') {
                    binding = (0, _clone2.default)(binding, false);
                }
                if (typeof binding.key === 'string') {
                    if (Keyboard.keys[binding.key.toUpperCase()] != null) {
                        binding.key = Keyboard.keys[binding.key.toUpperCase()];
                    } else if (binding.key.length === 1) {
                        binding.key = binding.key.toUpperCase().charCodeAt(0);
                    } else {
                        return null;
                    }
                }
                if (binding.shortKey) {
                    binding[SHORTKEY] = binding.shortKey;
                    delete binding.shortKey;
                }
                return binding;
            }
            exports.default = Keyboard;
            exports.SHORTKEY = SHORTKEY;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _slicedToArray = function() {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                            _arr.push(_s.value);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally{
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally{
                            if (_d) throw _e;
                        }
                    }
                    return _arr;
                }
                return function(arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Cursor = function(_Parchment$Embed) {
                _inherits(Cursor, _Parchment$Embed);
                _createClass(Cursor, null, [
                    {
                        key: 'value',
                        value: function value() {
                            return undefined;
                        }
                    }
                ]);
                function Cursor(domNode, selection) {
                    _classCallCheck(this, Cursor);
                    var _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));
                    _this.selection = selection;
                    _this.textNode = document.createTextNode(Cursor.CONTENTS);
                    _this.domNode.appendChild(_this.textNode);
                    _this._length = 0;
                    return _this;
                }
                _createClass(Cursor, [
                    {
                        key: 'detach',
                        value: function detach() {
                            // super.detach() will also clear domNode.__blot
                            if (this.parent != null) this.parent.removeChild(this);
                        }
                    },
                    {
                        key: 'format',
                        value: function format(name, value) {
                            if (this._length !== 0) {
                                return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'format', this).call(this, name, value);
                            }
                            var target = this, index = 0;
                            while(target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT){
                                index += target.offset(target.parent);
                                target = target.parent;
                            }
                            if (target != null) {
                                this._length = Cursor.CONTENTS.length;
                                target.optimize();
                                target.formatAt(index, Cursor.CONTENTS.length, name, value);
                                this._length = 0;
                            }
                        }
                    },
                    {
                        key: 'index',
                        value: function index(node, offset) {
                            if (node === this.textNode) return 0;
                            return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'index', this).call(this, node, offset);
                        }
                    },
                    {
                        key: 'length',
                        value: function length() {
                            return this._length;
                        }
                    },
                    {
                        key: 'position',
                        value: function position() {
                            return [
                                this.textNode,
                                this.textNode.data.length
                            ];
                        }
                    },
                    {
                        key: 'remove',
                        value: function remove() {
                            _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'remove', this).call(this);
                            this.parent = null;
                        }
                    },
                    {
                        key: 'restore',
                        value: function restore() {
                            if (this.selection.composing || this.parent == null) return;
                            var textNode = this.textNode;
                            var range = this.selection.getNativeRange();
                            var restoreText = void 0, start = void 0, end = void 0;
                            if (range != null && range.start.node === textNode && range.end.node === textNode) {
                                var _ref = [
                                    textNode,
                                    range.start.offset,
                                    range.end.offset
                                ];
                                restoreText = _ref[0];
                                start = _ref[1];
                                end = _ref[2];
                            }
                            // Link format will insert text outside of anchor tag
                            while(this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode){
                                this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
                            }
                            if (this.textNode.data !== Cursor.CONTENTS) {
                                var text = this.textNode.data.split(Cursor.CONTENTS).join('');
                                if (this.next instanceof _text2.default) {
                                    restoreText = this.next.domNode;
                                    this.next.insertAt(0, text);
                                    this.textNode.data = Cursor.CONTENTS;
                                } else {
                                    this.textNode.data = text;
                                    this.parent.insertBefore(_parchment2.default.create(this.textNode), this);
                                    this.textNode = document.createTextNode(Cursor.CONTENTS);
                                    this.domNode.appendChild(this.textNode);
                                }
                            }
                            this.remove();
                            if (start != null) {
                                var _map = [
                                    start,
                                    end
                                ].map(function(offset) {
                                    return Math.max(0, Math.min(restoreText.data.length, offset - 1));
                                });
                                var _map2 = _slicedToArray(_map, 2);
                                start = _map2[0];
                                end = _map2[1];
                                return {
                                    startNode: restoreText,
                                    startOffset: start,
                                    endNode: restoreText,
                                    endOffset: end
                                };
                            }
                        }
                    },
                    {
                        key: 'update',
                        value: function update(mutations, context) {
                            var _this2 = this;
                            if (mutations.some(function(mutation) {
                                return mutation.type === 'characterData' && mutation.target === _this2.textNode;
                            })) {
                                var range = this.restore();
                                if (range) context.range = range;
                            }
                        }
                    },
                    {
                        key: 'value',
                        value: function value() {
                            return '';
                        }
                    }
                ]);
                return Cursor;
            }(_parchment2.default.Embed);
            Cursor.blotName = 'cursor';
            Cursor.className = 'ql-cursor';
            Cursor.tagName = 'span';
            Cursor.CONTENTS = '\uFEFF'; // Zero width no break space
            exports.default = Cursor;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Container = function(_Parchment$Container) {
                _inherits(Container, _Parchment$Container);
                function Container() {
                    _classCallCheck(this, Container);
                    return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
                }
                return Container;
            }(_parchment2.default.Container);
            Container.allowedChildren = [
                _block2.default,
                _block.BlockEmbed,
                Container
            ];
            exports.default = Container;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ColorAttributor = function(_Parchment$Attributor) {
                _inherits(ColorAttributor, _Parchment$Attributor);
                function ColorAttributor() {
                    _classCallCheck(this, ColorAttributor);
                    return _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));
                }
                _createClass(ColorAttributor, [
                    {
                        key: 'value',
                        value: function value(domNode) {
                            var value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), 'value', this).call(this, domNode);
                            if (!value.startsWith('rgb(')) return value;
                            value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
                            return '#' + value.split(',').map(function(component) {
                                return ('00' + parseInt(component).toString(16)).slice(-2);
                            }).join('');
                        }
                    }
                ]);
                return ColorAttributor;
            }(_parchment2.default.Attributor.Style);
            var ColorClass = new _parchment2.default.Attributor.Class('color', 'ql-color', {
                scope: _parchment2.default.Scope.INLINE
            });
            var ColorStyle = new ColorAttributor('color', 'color', {
                scope: _parchment2.default.Scope.INLINE
            });
            exports.ColorAttributor = ColorAttributor;
            exports.ColorClass = ColorClass;
            exports.ColorStyle = ColorStyle;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.sanitize = exports.default = undefined;
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Link = function(_Inline) {
                _inherits(Link, _Inline);
                function Link() {
                    _classCallCheck(this, Link);
                    return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));
                }
                _createClass(Link, [
                    {
                        key: 'format',
                        value: function format(name, value) {
                            if (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), 'format', this).call(this, name, value);
                            value = this.constructor.sanitize(value);
                            this.domNode.setAttribute('href', value);
                        }
                    }
                ], [
                    {
                        key: 'create',
                        value: function create(value) {
                            var node = _get(Link.__proto__ || Object.getPrototypeOf(Link), 'create', this).call(this, value);
                            value = this.sanitize(value);
                            node.setAttribute('href', value);
                            node.setAttribute('rel', 'noopener noreferrer');
                            node.setAttribute('target', '_blank');
                            return node;
                        }
                    },
                    {
                        key: 'formats',
                        value: function formats(domNode) {
                            return domNode.getAttribute('href');
                        }
                    },
                    {
                        key: 'sanitize',
                        value: function sanitize(url) {
                            return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
                        }
                    }
                ]);
                return Link;
            }(_inline2.default);
            Link.blotName = 'link';
            Link.tagName = 'A';
            Link.SANITIZED_URL = 'about:blank';
            Link.PROTOCOL_WHITELIST = [
                'http',
                'https',
                'mailto',
                'tel'
            ];
            function _sanitize(url, protocols) {
                var anchor = document.createElement('a');
                anchor.href = url;
                var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
                return protocols.indexOf(protocol) > -1;
            }
            exports.default = Link;
            exports.sanitize = _sanitize;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj;
            } : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _keyboard = __webpack_require__(23);
            var _keyboard2 = _interopRequireDefault(_keyboard);
            var _dropdown = __webpack_require__(107);
            var _dropdown2 = _interopRequireDefault(_dropdown);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            var optionsCounter = 0;
            function toggleAriaAttribute(element, attribute) {
                element.setAttribute(attribute, !(element.getAttribute(attribute) === 'true'));
            }
            var Picker = function() {
                function Picker(select) {
                    var _this = this;
                    _classCallCheck(this, Picker);
                    this.select = select;
                    this.container = document.createElement('span');
                    this.buildPicker();
                    this.select.style.display = 'none';
                    this.select.parentNode.insertBefore(this.container, this.select);
                    this.label.addEventListener('mousedown', function() {
                        _this.togglePicker();
                    });
                    this.label.addEventListener('keydown', function(event) {
                        switch(event.keyCode){
                            // Allows the "Enter" key to open the picker
                            case _keyboard2.default.keys.ENTER:
                                _this.togglePicker();
                                break;
                            // Allows the "Escape" key to close the picker
                            case _keyboard2.default.keys.ESCAPE:
                                _this.escape();
                                event.preventDefault();
                                break;
                            default:
                        }
                    });
                    this.select.addEventListener('change', this.update.bind(this));
                }
                _createClass(Picker, [
                    {
                        key: 'togglePicker',
                        value: function togglePicker() {
                            this.container.classList.toggle('ql-expanded');
                            // Toggle aria-expanded and aria-hidden to make the picker accessible
                            toggleAriaAttribute(this.label, 'aria-expanded');
                            toggleAriaAttribute(this.options, 'aria-hidden');
                        }
                    },
                    {
                        key: 'buildItem',
                        value: function buildItem(option) {
                            var _this2 = this;
                            var item = document.createElement('span');
                            item.tabIndex = '0';
                            item.setAttribute('role', 'button');
                            item.classList.add('ql-picker-item');
                            if (option.hasAttribute('value')) {
                                item.setAttribute('data-value', option.getAttribute('value'));
                            }
                            if (option.textContent) {
                                item.setAttribute('data-label', option.textContent);
                            }
                            item.addEventListener('click', function() {
                                _this2.selectItem(item, true);
                            });
                            item.addEventListener('keydown', function(event) {
                                switch(event.keyCode){
                                    // Allows the "Enter" key to select an item
                                    case _keyboard2.default.keys.ENTER:
                                        _this2.selectItem(item, true);
                                        event.preventDefault();
                                        break;
                                    // Allows the "Escape" key to close the picker
                                    case _keyboard2.default.keys.ESCAPE:
                                        _this2.escape();
                                        event.preventDefault();
                                        break;
                                    default:
                                }
                            });
                            return item;
                        }
                    },
                    {
                        key: 'buildLabel',
                        value: function buildLabel() {
                            var label = document.createElement('span');
                            label.classList.add('ql-picker-label');
                            label.innerHTML = _dropdown2.default;
                            label.tabIndex = '0';
                            label.setAttribute('role', 'button');
                            label.setAttribute('aria-expanded', 'false');
                            this.container.appendChild(label);
                            return label;
                        }
                    },
                    {
                        key: 'buildOptions',
                        value: function buildOptions() {
                            var _this3 = this;
                            var options = document.createElement('span');
                            options.classList.add('ql-picker-options');
                            // Don't want screen readers to read this until options are visible
                            options.setAttribute('aria-hidden', 'true');
                            options.tabIndex = '-1';
                            // Need a unique id for aria-controls
                            options.id = 'ql-picker-options-' + optionsCounter;
                            optionsCounter += 1;
                            this.label.setAttribute('aria-controls', options.id);
                            this.options = options;
                            [].slice.call(this.select.options).forEach(function(option) {
                                var item = _this3.buildItem(option);
                                options.appendChild(item);
                                if (option.selected === true) {
                                    _this3.selectItem(item);
                                }
                            });
                            this.container.appendChild(options);
                        }
                    },
                    {
                        key: 'buildPicker',
                        value: function buildPicker() {
                            var _this4 = this;
                            [].slice.call(this.select.attributes).forEach(function(item) {
                                _this4.container.setAttribute(item.name, item.value);
                            });
                            this.container.classList.add('ql-picker');
                            this.label = this.buildLabel();
                            this.buildOptions();
                        }
                    },
                    {
                        key: 'escape',
                        value: function escape() {
                            var _this5 = this;
                            // Close menu and return focus to trigger label
                            this.close();
                            // Need setTimeout for accessibility to ensure that the browser executes
                            // focus on the next process thread and after any DOM content changes
                            setTimeout(function() {
                                return _this5.label.focus();
                            }, 1);
                        }
                    },
                    {
                        key: 'close',
                        value: function close() {
                            this.container.classList.remove('ql-expanded');
                            this.label.setAttribute('aria-expanded', 'false');
                            this.options.setAttribute('aria-hidden', 'true');
                        }
                    },
                    {
                        key: 'selectItem',
                        value: function selectItem(item) {
                            var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                            var selected = this.container.querySelector('.ql-selected');
                            if (item === selected) return;
                            if (selected != null) {
                                selected.classList.remove('ql-selected');
                            }
                            if (item == null) return;
                            item.classList.add('ql-selected');
                            this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);
                            if (item.hasAttribute('data-value')) {
                                this.label.setAttribute('data-value', item.getAttribute('data-value'));
                            } else {
                                this.label.removeAttribute('data-value');
                            }
                            if (item.hasAttribute('data-label')) {
                                this.label.setAttribute('data-label', item.getAttribute('data-label'));
                            } else {
                                this.label.removeAttribute('data-label');
                            }
                            if (trigger) {
                                if (typeof Event === 'function') {
                                    this.select.dispatchEvent(new Event('change'));
                                } else if ((typeof Event === 'undefined' ? 'undefined' : _typeof(Event)) === 'object') {
                                    // IE11
                                    var event = document.createEvent('Event');
                                    event.initEvent('change', true, true);
                                    this.select.dispatchEvent(event);
                                }
                                this.close();
                            }
                        }
                    },
                    {
                        key: 'update',
                        value: function update() {
                            var option = void 0;
                            if (this.select.selectedIndex > -1) {
                                var item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];
                                option = this.select.options[this.select.selectedIndex];
                                this.selectItem(item);
                            } else {
                                this.selectItem(null);
                            }
                            var isActive = option != null && option !== this.select.querySelector('option[selected]');
                            this.label.classList.toggle('ql-active', isActive);
                        }
                    }
                ]);
                return Picker;
            }();
            exports.default = Picker;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _break = __webpack_require__(16);
            var _break2 = _interopRequireDefault(_break);
            var _container = __webpack_require__(25);
            var _container2 = _interopRequireDefault(_container);
            var _cursor = __webpack_require__(24);
            var _cursor2 = _interopRequireDefault(_cursor);
            var _embed = __webpack_require__(35);
            var _embed2 = _interopRequireDefault(_embed);
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            var _scroll = __webpack_require__(22);
            var _scroll2 = _interopRequireDefault(_scroll);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            var _clipboard = __webpack_require__(55);
            var _clipboard2 = _interopRequireDefault(_clipboard);
            var _history = __webpack_require__(42);
            var _history2 = _interopRequireDefault(_history);
            var _keyboard = __webpack_require__(23);
            var _keyboard2 = _interopRequireDefault(_keyboard);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            _quill2.default.register({
                'blots/block': _block2.default,
                'blots/block/embed': _block.BlockEmbed,
                'blots/break': _break2.default,
                'blots/container': _container2.default,
                'blots/cursor': _cursor2.default,
                'blots/embed': _embed2.default,
                'blots/inline': _inline2.default,
                'blots/scroll': _scroll2.default,
                'blots/text': _text2.default,
                'modules/clipboard': _clipboard2.default,
                'modules/history': _history2.default,
                'modules/keyboard': _keyboard2.default
            });
            _parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);
            exports.default = _quill2.default;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Registry = __webpack_require__(1);
            var ShadowBlot = function() {
                function ShadowBlot(domNode) {
                    this.domNode = domNode;
                    // @ts-ignore
                    this.domNode[Registry.DATA_KEY] = {
                        blot: this
                    };
                }
                Object.defineProperty(ShadowBlot.prototype, "statics", {
                    // Hack for accessing inherited static methods
                    get: function() {
                        return this.constructor;
                    },
                    enumerable: true,
                    configurable: true
                });
                ShadowBlot.create = function(value) {
                    if (this.tagName == null) {
                        throw new Registry.ParchmentError('Blot definition missing tagName');
                    }
                    var node;
                    if (Array.isArray(this.tagName)) {
                        if (typeof value === 'string') {
                            value = value.toUpperCase();
                            if (parseInt(value).toString() === value) {
                                value = parseInt(value);
                            }
                        }
                        if (typeof value === 'number') {
                            node = document.createElement(this.tagName[value - 1]);
                        } else if (this.tagName.indexOf(value) > -1) {
                            node = document.createElement(value);
                        } else {
                            node = document.createElement(this.tagName[0]);
                        }
                    } else {
                        node = document.createElement(this.tagName);
                    }
                    if (this.className) {
                        node.classList.add(this.className);
                    }
                    return node;
                };
                ShadowBlot.prototype.attach = function() {
                    if (this.parent != null) {
                        this.scroll = this.parent.scroll;
                    }
                };
                ShadowBlot.prototype.clone = function() {
                    var domNode = this.domNode.cloneNode(false);
                    return Registry.create(domNode);
                };
                ShadowBlot.prototype.detach = function() {
                    if (this.parent != null) this.parent.removeChild(this);
                    // @ts-ignore
                    delete this.domNode[Registry.DATA_KEY];
                };
                ShadowBlot.prototype.deleteAt = function(index, length) {
                    var blot = this.isolate(index, length);
                    blot.remove();
                };
                ShadowBlot.prototype.formatAt = function(index, length, name, value) {
                    var blot = this.isolate(index, length);
                    if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
                        blot.wrap(name, value);
                    } else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
                        var parent = Registry.create(this.statics.scope);
                        blot.wrap(parent);
                        parent.format(name, value);
                    }
                };
                ShadowBlot.prototype.insertAt = function(index, value, def) {
                    var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
                    var ref = this.split(index);
                    this.parent.insertBefore(blot, ref);
                };
                ShadowBlot.prototype.insertInto = function(parentBlot, refBlot) {
                    if (refBlot === void 0) {
                        refBlot = null;
                    }
                    if (this.parent != null) {
                        this.parent.children.remove(this);
                    }
                    var refDomNode = null;
                    parentBlot.children.insertBefore(this, refBlot);
                    if (refBlot != null) {
                        refDomNode = refBlot.domNode;
                    }
                    if (this.domNode.parentNode != parentBlot.domNode || this.domNode.nextSibling != refDomNode) {
                        parentBlot.domNode.insertBefore(this.domNode, refDomNode);
                    }
                    this.parent = parentBlot;
                    this.attach();
                };
                ShadowBlot.prototype.isolate = function(index, length) {
                    var target = this.split(index);
                    target.split(length);
                    return target;
                };
                ShadowBlot.prototype.length = function() {
                    return 1;
                };
                ShadowBlot.prototype.offset = function(root) {
                    if (root === void 0) {
                        root = this.parent;
                    }
                    if (this.parent == null || this == root) return 0;
                    return this.parent.children.offset(this) + this.parent.offset(root);
                };
                ShadowBlot.prototype.optimize = function(context) {
                    // TODO clean up once we use WeakMap
                    // @ts-ignore
                    if (this.domNode[Registry.DATA_KEY] != null) {
                        // @ts-ignore
                        delete this.domNode[Registry.DATA_KEY].mutations;
                    }
                };
                ShadowBlot.prototype.remove = function() {
                    if (this.domNode.parentNode != null) {
                        this.domNode.parentNode.removeChild(this.domNode);
                    }
                    this.detach();
                };
                ShadowBlot.prototype.replace = function(target) {
                    if (target.parent == null) return;
                    target.parent.insertBefore(this, target.next);
                    target.remove();
                };
                ShadowBlot.prototype.replaceWith = function(name, value) {
                    var replacement = typeof name === 'string' ? Registry.create(name, value) : name;
                    replacement.replace(this);
                    return replacement;
                };
                ShadowBlot.prototype.split = function(index, force) {
                    return index === 0 ? this : this.next;
                };
                ShadowBlot.prototype.update = function(mutations, context) {
                // Nothing to do by default
                };
                ShadowBlot.prototype.wrap = function(name, value) {
                    var wrapper = typeof name === 'string' ? Registry.create(name, value) : name;
                    if (this.parent != null) {
                        this.parent.insertBefore(wrapper, this.next);
                    }
                    wrapper.appendChild(this);
                    return wrapper;
                };
                ShadowBlot.blotName = 'abstract';
                return ShadowBlot;
            }();
            exports.default = ShadowBlot;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var attributor_1 = __webpack_require__(12);
            var class_1 = __webpack_require__(32);
            var style_1 = __webpack_require__(33);
            var Registry = __webpack_require__(1);
            var AttributorStore = function() {
                function AttributorStore(domNode) {
                    this.attributes = {};
                    this.domNode = domNode;
                    this.build();
                }
                AttributorStore.prototype.attribute = function(attribute, value) {
                    // verb
                    if (value) {
                        if (attribute.add(this.domNode, value)) {
                            if (attribute.value(this.domNode) != null) {
                                this.attributes[attribute.attrName] = attribute;
                            } else {
                                delete this.attributes[attribute.attrName];
                            }
                        }
                    } else {
                        attribute.remove(this.domNode);
                        delete this.attributes[attribute.attrName];
                    }
                };
                AttributorStore.prototype.build = function() {
                    var _this = this;
                    this.attributes = {};
                    var attributes = attributor_1.default.keys(this.domNode);
                    var classes = class_1.default.keys(this.domNode);
                    var styles = style_1.default.keys(this.domNode);
                    attributes.concat(classes).concat(styles).forEach(function(name) {
                        var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);
                        if (attr instanceof attributor_1.default) {
                            _this.attributes[attr.attrName] = attr;
                        }
                    });
                };
                AttributorStore.prototype.copy = function(target) {
                    var _this = this;
                    Object.keys(this.attributes).forEach(function(key) {
                        var value = _this.attributes[key].value(_this.domNode);
                        target.format(key, value);
                    });
                };
                AttributorStore.prototype.move = function(target) {
                    var _this = this;
                    this.copy(target);
                    Object.keys(this.attributes).forEach(function(key) {
                        _this.attributes[key].remove(_this.domNode);
                    });
                    this.attributes = {};
                };
                AttributorStore.prototype.values = function() {
                    var _this = this;
                    return Object.keys(this.attributes).reduce(function(attributes, name) {
                        attributes[name] = _this.attributes[name].value(_this.domNode);
                        return attributes;
                    }, {});
                };
                return AttributorStore;
            }();
            exports.default = AttributorStore;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
                var extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
                };
                return function(d, b) {
                    extendStatics(d, b);
                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            }();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var attributor_1 = __webpack_require__(12);
            function match(node, prefix) {
                var className = node.getAttribute('class') || '';
                return className.split(/\s+/).filter(function(name) {
                    return name.indexOf(prefix + "-") === 0;
                });
            }
            var ClassAttributor = function(_super) {
                __extends(ClassAttributor, _super);
                function ClassAttributor() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ClassAttributor.keys = function(node) {
                    return (node.getAttribute('class') || '').split(/\s+/).map(function(name) {
                        return name.split('-').slice(0, -1).join('-');
                    });
                };
                ClassAttributor.prototype.add = function(node, value) {
                    if (!this.canAdd(node, value)) return false;
                    this.remove(node);
                    node.classList.add(this.keyName + "-" + value);
                    return true;
                };
                ClassAttributor.prototype.remove = function(node) {
                    var matches = match(node, this.keyName);
                    matches.forEach(function(name) {
                        node.classList.remove(name);
                    });
                    if (node.classList.length === 0) {
                        node.removeAttribute('class');
                    }
                };
                ClassAttributor.prototype.value = function(node) {
                    var result = match(node, this.keyName)[0] || '';
                    var value = result.slice(this.keyName.length + 1); // +1 for hyphen
                    return this.canAdd(node, value) ? value : '';
                };
                return ClassAttributor;
            }(attributor_1.default);
            exports.default = ClassAttributor;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
                var extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
                };
                return function(d, b) {
                    extendStatics(d, b);
                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            }();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var attributor_1 = __webpack_require__(12);
            function camelize(name) {
                var parts = name.split('-');
                var rest = parts.slice(1).map(function(part) {
                    return part[0].toUpperCase() + part.slice(1);
                }).join('');
                return parts[0] + rest;
            }
            var StyleAttributor = function(_super) {
                __extends(StyleAttributor, _super);
                function StyleAttributor() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                StyleAttributor.keys = function(node) {
                    return (node.getAttribute('style') || '').split(';').map(function(value) {
                        var arr = value.split(':');
                        return arr[0].trim();
                    });
                };
                StyleAttributor.prototype.add = function(node, value) {
                    if (!this.canAdd(node, value)) return false;
                    // @ts-ignore
                    node.style[camelize(this.keyName)] = value;
                    return true;
                };
                StyleAttributor.prototype.remove = function(node) {
                    // @ts-ignore
                    node.style[camelize(this.keyName)] = '';
                    if (!node.getAttribute('style')) {
                        node.removeAttribute('style');
                    }
                };
                StyleAttributor.prototype.value = function(node) {
                    // @ts-ignore
                    var value = node.style[camelize(this.keyName)];
                    return this.canAdd(node, value) ? value : '';
                };
                return StyleAttributor;
            }(attributor_1.default);
            exports.default = StyleAttributor;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            var Theme = function() {
                function Theme(quill, options) {
                    _classCallCheck(this, Theme);
                    this.quill = quill;
                    this.options = options;
                    this.modules = {};
                }
                _createClass(Theme, [
                    {
                        key: 'init',
                        value: function init() {
                            var _this = this;
                            Object.keys(this.options.modules).forEach(function(name) {
                                if (_this.modules[name] == null) {
                                    _this.addModule(name);
                                }
                            });
                        }
                    },
                    {
                        key: 'addModule',
                        value: function addModule(name) {
                            var moduleClass = this.quill.constructor.import('modules/' + name);
                            this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});
                            return this.modules[name];
                        }
                    }
                ]);
                return Theme;
            }();
            Theme.DEFAULTS = {
                modules: {}
            };
            Theme.themes = {
                'default': Theme
            };
            exports.default = Theme;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var GUARD_TEXT = '\uFEFF';
            var Embed = function(_Parchment$Embed) {
                _inherits(Embed, _Parchment$Embed);
                function Embed(node) {
                    _classCallCheck(this, Embed);
                    var _this = _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).call(this, node));
                    _this.contentNode = document.createElement('span');
                    _this.contentNode.setAttribute('contenteditable', false);
                    [].slice.call(_this.domNode.childNodes).forEach(function(childNode) {
                        _this.contentNode.appendChild(childNode);
                    });
                    _this.leftGuard = document.createTextNode(GUARD_TEXT);
                    _this.rightGuard = document.createTextNode(GUARD_TEXT);
                    _this.domNode.appendChild(_this.leftGuard);
                    _this.domNode.appendChild(_this.contentNode);
                    _this.domNode.appendChild(_this.rightGuard);
                    return _this;
                }
                _createClass(Embed, [
                    {
                        key: 'index',
                        value: function index(node, offset) {
                            if (node === this.leftGuard) return 0;
                            if (node === this.rightGuard) return 1;
                            return _get(Embed.prototype.__proto__ || Object.getPrototypeOf(Embed.prototype), 'index', this).call(this, node, offset);
                        }
                    },
                    {
                        key: 'restore',
                        value: function restore(node) {
                            var range = void 0, textNode = void 0;
                            var text = node.data.split(GUARD_TEXT).join('');
                            if (node === this.leftGuard) {
                                if (this.prev instanceof _text2.default) {
                                    var prevLength = this.prev.length();
                                    this.prev.insertAt(prevLength, text);
                                    range = {
                                        startNode: this.prev.domNode,
                                        startOffset: prevLength + text.length
                                    };
                                } else {
                                    textNode = document.createTextNode(text);
                                    this.parent.insertBefore(_parchment2.default.create(textNode), this);
                                    range = {
                                        startNode: textNode,
                                        startOffset: text.length
                                    };
                                }
                            } else if (node === this.rightGuard) {
                                if (this.next instanceof _text2.default) {
                                    this.next.insertAt(0, text);
                                    range = {
                                        startNode: this.next.domNode,
                                        startOffset: text.length
                                    };
                                } else {
                                    textNode = document.createTextNode(text);
                                    this.parent.insertBefore(_parchment2.default.create(textNode), this.next);
                                    range = {
                                        startNode: textNode,
                                        startOffset: text.length
                                    };
                                }
                            }
                            node.data = GUARD_TEXT;
                            return range;
                        }
                    },
                    {
                        key: 'update',
                        value: function update(mutations, context) {
                            var _this2 = this;
                            mutations.forEach(function(mutation) {
                                if (mutation.type === 'characterData' && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {
                                    var range = _this2.restore(mutation.target);
                                    if (range) context.range = range;
                                }
                            });
                        }
                    }
                ]);
                return Embed;
            }(_parchment2.default.Embed);
            exports.default = Embed;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            var config = {
                scope: _parchment2.default.Scope.BLOCK,
                whitelist: [
                    'right',
                    'center',
                    'justify'
                ]
            };
            var AlignAttribute = new _parchment2.default.Attributor.Attribute('align', 'align', config);
            var AlignClass = new _parchment2.default.Attributor.Class('align', 'ql-align', config);
            var AlignStyle = new _parchment2.default.Attributor.Style('align', 'text-align', config);
            exports.AlignAttribute = AlignAttribute;
            exports.AlignClass = AlignClass;
            exports.AlignStyle = AlignStyle;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.BackgroundStyle = exports.BackgroundClass = undefined;
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _color = __webpack_require__(26);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            var BackgroundClass = new _parchment2.default.Attributor.Class('background', 'ql-bg', {
                scope: _parchment2.default.Scope.INLINE
            });
            var BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {
                scope: _parchment2.default.Scope.INLINE
            });
            exports.BackgroundClass = BackgroundClass;
            exports.BackgroundStyle = BackgroundStyle;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            var config = {
                scope: _parchment2.default.Scope.BLOCK,
                whitelist: [
                    'rtl'
                ]
            };
            var DirectionAttribute = new _parchment2.default.Attributor.Attribute('direction', 'dir', config);
            var DirectionClass = new _parchment2.default.Attributor.Class('direction', 'ql-direction', config);
            var DirectionStyle = new _parchment2.default.Attributor.Style('direction', 'direction', config);
            exports.DirectionAttribute = DirectionAttribute;
            exports.DirectionClass = DirectionClass;
            exports.DirectionStyle = DirectionStyle;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.FontClass = exports.FontStyle = undefined;
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var config = {
                scope: _parchment2.default.Scope.INLINE,
                whitelist: [
                    'serif',
                    'monospace'
                ]
            };
            var FontClass = new _parchment2.default.Attributor.Class('font', 'ql-font', config);
            var FontStyleAttributor = function(_Parchment$Attributor) {
                _inherits(FontStyleAttributor, _Parchment$Attributor);
                function FontStyleAttributor() {
                    _classCallCheck(this, FontStyleAttributor);
                    return _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));
                }
                _createClass(FontStyleAttributor, [
                    {
                        key: 'value',
                        value: function value(node) {
                            return _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), 'value', this).call(this, node).replace(/["']/g, '');
                        }
                    }
                ]);
                return FontStyleAttributor;
            }(_parchment2.default.Attributor.Style);
            var FontStyle = new FontStyleAttributor('font', 'font-family', config);
            exports.FontStyle = FontStyle;
            exports.FontClass = FontClass;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.SizeStyle = exports.SizeClass = undefined;
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            var SizeClass = new _parchment2.default.Attributor.Class('size', 'ql-size', {
                scope: _parchment2.default.Scope.INLINE,
                whitelist: [
                    'small',
                    'large',
                    'huge'
                ]
            });
            var SizeStyle = new _parchment2.default.Attributor.Style('size', 'font-size', {
                scope: _parchment2.default.Scope.INLINE,
                whitelist: [
                    '10px',
                    '18px',
                    '32px'
                ]
            });
            exports.SizeClass = SizeClass;
            exports.SizeStyle = SizeStyle;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            module1.exports = {
                'align': {
                    '': __webpack_require__(76),
                    'center': __webpack_require__(77),
                    'right': __webpack_require__(78),
                    'justify': __webpack_require__(79)
                },
                'background': __webpack_require__(80),
                'blockquote': __webpack_require__(81),
                'bold': __webpack_require__(82),
                'clean': __webpack_require__(83),
                'code': __webpack_require__(58),
                'code-block': __webpack_require__(58),
                'color': __webpack_require__(84),
                'direction': {
                    '': __webpack_require__(85),
                    'rtl': __webpack_require__(86)
                },
                'float': {
                    'center': __webpack_require__(87),
                    'full': __webpack_require__(88),
                    'left': __webpack_require__(89),
                    'right': __webpack_require__(90)
                },
                'formula': __webpack_require__(91),
                'header': {
                    '1': __webpack_require__(92),
                    '2': __webpack_require__(93)
                },
                'italic': __webpack_require__(94),
                'image': __webpack_require__(95),
                'indent': {
                    '+1': __webpack_require__(96),
                    '-1': __webpack_require__(97)
                },
                'link': __webpack_require__(98),
                'list': {
                    'ordered': __webpack_require__(99),
                    'bullet': __webpack_require__(100),
                    'check': __webpack_require__(101)
                },
                'script': {
                    'sub': __webpack_require__(102),
                    'super': __webpack_require__(103)
                },
                'strike': __webpack_require__(104),
                'underline': __webpack_require__(105),
                'video': __webpack_require__(106)
            };
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.getLastChangeIndex = exports.default = undefined;
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var History = function(_Module) {
                _inherits(History, _Module);
                function History(quill, options) {
                    _classCallCheck(this, History);
                    var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));
                    _this.lastRecorded = 0;
                    _this.ignoreChange = false;
                    _this.clear();
                    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function(eventName, delta, oldDelta, source) {
                        if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;
                        if (!_this.options.userOnly || source === _quill2.default.sources.USER) {
                            _this.record(delta, oldDelta);
                        } else {
                            _this.transform(delta);
                        }
                    });
                    _this.quill.keyboard.addBinding({
                        key: 'Z',
                        shortKey: true
                    }, _this.undo.bind(_this));
                    _this.quill.keyboard.addBinding({
                        key: 'Z',
                        shortKey: true,
                        shiftKey: true
                    }, _this.redo.bind(_this));
                    if (/Win/i.test(navigator.platform)) {
                        _this.quill.keyboard.addBinding({
                            key: 'Y',
                            shortKey: true
                        }, _this.redo.bind(_this));
                    }
                    return _this;
                }
                _createClass(History, [
                    {
                        key: 'change',
                        value: function change(source, dest) {
                            if (this.stack[source].length === 0) return;
                            var delta = this.stack[source].pop();
                            this.stack[dest].push(delta);
                            this.lastRecorded = 0;
                            this.ignoreChange = true;
                            this.quill.updateContents(delta[source], _quill2.default.sources.USER);
                            this.ignoreChange = false;
                            var index = getLastChangeIndex(delta[source]);
                            this.quill.setSelection(index);
                        }
                    },
                    {
                        key: 'clear',
                        value: function clear() {
                            this.stack = {
                                undo: [],
                                redo: []
                            };
                        }
                    },
                    {
                        key: 'cutoff',
                        value: function cutoff() {
                            this.lastRecorded = 0;
                        }
                    },
                    {
                        key: 'record',
                        value: function record(changeDelta, oldDelta) {
                            if (changeDelta.ops.length === 0) return;
                            this.stack.redo = [];
                            var undoDelta = this.quill.getContents().diff(oldDelta);
                            var timestamp = Date.now();
                            if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
                                var delta = this.stack.undo.pop();
                                undoDelta = undoDelta.compose(delta.undo);
                                changeDelta = delta.redo.compose(changeDelta);
                            } else {
                                this.lastRecorded = timestamp;
                            }
                            this.stack.undo.push({
                                redo: changeDelta,
                                undo: undoDelta
                            });
                            if (this.stack.undo.length > this.options.maxStack) {
                                this.stack.undo.shift();
                            }
                        }
                    },
                    {
                        key: 'redo',
                        value: function redo() {
                            this.change('redo', 'undo');
                        }
                    },
                    {
                        key: 'transform',
                        value: function transform(delta) {
                            this.stack.undo.forEach(function(change) {
                                change.undo = delta.transform(change.undo, true);
                                change.redo = delta.transform(change.redo, true);
                            });
                            this.stack.redo.forEach(function(change) {
                                change.undo = delta.transform(change.undo, true);
                                change.redo = delta.transform(change.redo, true);
                            });
                        }
                    },
                    {
                        key: 'undo',
                        value: function undo() {
                            this.change('undo', 'redo');
                        }
                    }
                ]);
                return History;
            }(_module2.default);
            History.DEFAULTS = {
                delay: 1000,
                maxStack: 100,
                userOnly: false
            };
            function endsWithNewlineChange(delta) {
                var lastOp = delta.ops[delta.ops.length - 1];
                if (lastOp == null) return false;
                if (lastOp.insert != null) {
                    return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n');
                }
                if (lastOp.attributes != null) {
                    return Object.keys(lastOp.attributes).some(function(attr) {
                        return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;
                    });
                }
                return false;
            }
            function getLastChangeIndex(delta) {
                var deleteLength = delta.reduce(function(length, op) {
                    length += op.delete || 0;
                    return length;
                }, 0);
                var changeIndex = delta.length() - deleteLength;
                if (endsWithNewlineChange(delta)) {
                    changeIndex -= 1;
                }
                return changeIndex;
            }
            exports.default = History;
            exports.getLastChangeIndex = getLastChangeIndex;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.BaseTooltip = undefined;
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _emitter = __webpack_require__(8);
            var _emitter2 = _interopRequireDefault(_emitter);
            var _keyboard = __webpack_require__(23);
            var _keyboard2 = _interopRequireDefault(_keyboard);
            var _theme = __webpack_require__(34);
            var _theme2 = _interopRequireDefault(_theme);
            var _colorPicker = __webpack_require__(59);
            var _colorPicker2 = _interopRequireDefault(_colorPicker);
            var _iconPicker = __webpack_require__(60);
            var _iconPicker2 = _interopRequireDefault(_iconPicker);
            var _picker = __webpack_require__(28);
            var _picker2 = _interopRequireDefault(_picker);
            var _tooltip = __webpack_require__(61);
            var _tooltip2 = _interopRequireDefault(_tooltip);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ALIGNS = [
                false,
                'center',
                'right',
                'justify'
            ];
            var COLORS = [
                "#000000",
                "#e60000",
                "#ff9900",
                "#ffff00",
                "#008a00",
                "#0066cc",
                "#9933ff",
                "#ffffff",
                "#facccc",
                "#ffebcc",
                "#ffffcc",
                "#cce8cc",
                "#cce0f5",
                "#ebd6ff",
                "#bbbbbb",
                "#f06666",
                "#ffc266",
                "#ffff66",
                "#66b966",
                "#66a3e0",
                "#c285ff",
                "#888888",
                "#a10000",
                "#b26b00",
                "#b2b200",
                "#006100",
                "#0047b2",
                "#6b24b2",
                "#444444",
                "#5c0000",
                "#663d00",
                "#666600",
                "#003700",
                "#002966",
                "#3d1466"
            ];
            var FONTS = [
                false,
                'serif',
                'monospace'
            ];
            var HEADERS = [
                '1',
                '2',
                '3',
                false
            ];
            var SIZES = [
                'small',
                false,
                'large',
                'huge'
            ];
            var BaseTheme = function(_Theme) {
                _inherits(BaseTheme, _Theme);
                function BaseTheme(quill, options) {
                    _classCallCheck(this, BaseTheme);
                    var _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));
                    var listener = function listener(e) {
                        if (!document.body.contains(quill.root)) {
                            return document.body.removeEventListener('click', listener);
                        }
                        if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
                            _this.tooltip.hide();
                        }
                        if (_this.pickers != null) {
                            _this.pickers.forEach(function(picker) {
                                if (!picker.container.contains(e.target)) {
                                    picker.close();
                                }
                            });
                        }
                    };
                    quill.emitter.listenDOM('click', document.body, listener);
                    return _this;
                }
                _createClass(BaseTheme, [
                    {
                        key: 'addModule',
                        value: function addModule(name) {
                            var module1 = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), 'addModule', this).call(this, name);
                            if (name === 'toolbar') {
                                this.extendToolbar(module1);
                            }
                            return module1;
                        }
                    },
                    {
                        key: 'buildButtons',
                        value: function buildButtons(buttons, icons) {
                            buttons.forEach(function(button) {
                                var className = button.getAttribute('class') || '';
                                className.split(/\s+/).forEach(function(name) {
                                    if (!name.startsWith('ql-')) return;
                                    name = name.slice('ql-'.length);
                                    if (icons[name] == null) return;
                                    if (name === 'direction') {
                                        button.innerHTML = icons[name][''] + icons[name]['rtl'];
                                    } else if (typeof icons[name] === 'string') {
                                        button.innerHTML = icons[name];
                                    } else {
                                        var value = button.value || '';
                                        if (value != null && icons[name][value]) {
                                            button.innerHTML = icons[name][value];
                                        }
                                    }
                                });
                            });
                        }
                    },
                    {
                        key: 'buildPickers',
                        value: function buildPickers(selects, icons) {
                            var _this2 = this;
                            this.pickers = selects.map(function(select) {
                                if (select.classList.contains('ql-align')) {
                                    if (select.querySelector('option') == null) {
                                        fillSelect(select, ALIGNS);
                                    }
                                    return new _iconPicker2.default(select, icons.align);
                                } else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
                                    var format = select.classList.contains('ql-background') ? 'background' : 'color';
                                    if (select.querySelector('option') == null) {
                                        fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
                                    }
                                    return new _colorPicker2.default(select, icons[format]);
                                } else {
                                    if (select.querySelector('option') == null) {
                                        if (select.classList.contains('ql-font')) {
                                            fillSelect(select, FONTS);
                                        } else if (select.classList.contains('ql-header')) {
                                            fillSelect(select, HEADERS);
                                        } else if (select.classList.contains('ql-size')) {
                                            fillSelect(select, SIZES);
                                        }
                                    }
                                    return new _picker2.default(select);
                                }
                            });
                            var update = function update() {
                                _this2.pickers.forEach(function(picker) {
                                    picker.update();
                                });
                            };
                            this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);
                        }
                    }
                ]);
                return BaseTheme;
            }(_theme2.default);
            BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {
                modules: {
                    toolbar: {
                        handlers: {
                            formula: function formula() {
                                this.quill.theme.tooltip.edit('formula');
                            },
                            image: function image() {
                                var _this3 = this;
                                var fileInput = this.container.querySelector('input.ql-image[type=file]');
                                if (fileInput == null) {
                                    fileInput = document.createElement('input');
                                    fileInput.setAttribute('type', 'file');
                                    fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');
                                    fileInput.classList.add('ql-image');
                                    fileInput.addEventListener('change', function() {
                                        if (fileInput.files != null && fileInput.files[0] != null) {
                                            var reader = new FileReader();
                                            reader.onload = function(e) {
                                                var range = _this3.quill.getSelection(true);
                                                _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({
                                                    image: e.target.result
                                                }), _emitter2.default.sources.USER);
                                                _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);
                                                fileInput.value = "";
                                            };
                                            reader.readAsDataURL(fileInput.files[0]);
                                        }
                                    });
                                    this.container.appendChild(fileInput);
                                }
                                fileInput.click();
                            },
                            video: function video() {
                                this.quill.theme.tooltip.edit('video');
                            }
                        }
                    }
                }
            });
            var BaseTooltip = function(_Tooltip) {
                _inherits(BaseTooltip, _Tooltip);
                function BaseTooltip(quill, boundsContainer) {
                    _classCallCheck(this, BaseTooltip);
                    var _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));
                    _this4.textbox = _this4.root.querySelector('input[type="text"]');
                    _this4.listen();
                    return _this4;
                }
                _createClass(BaseTooltip, [
                    {
                        key: 'listen',
                        value: function listen() {
                            var _this5 = this;
                            this.textbox.addEventListener('keydown', function(event) {
                                if (_keyboard2.default.match(event, 'enter')) {
                                    _this5.save();
                                    event.preventDefault();
                                } else if (_keyboard2.default.match(event, 'escape')) {
                                    _this5.cancel();
                                    event.preventDefault();
                                }
                            });
                        }
                    },
                    {
                        key: 'cancel',
                        value: function cancel() {
                            this.hide();
                        }
                    },
                    {
                        key: 'edit',
                        value: function edit() {
                            var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
                            var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                            this.root.classList.remove('ql-hidden');
                            this.root.classList.add('ql-editing');
                            if (preview != null) {
                                this.textbox.value = preview;
                            } else if (mode !== this.root.getAttribute('data-mode')) {
                                this.textbox.value = '';
                            }
                            this.position(this.quill.getBounds(this.quill.selection.savedRange));
                            this.textbox.select();
                            this.textbox.setAttribute('placeholder', this.textbox.getAttribute('data-' + mode) || '');
                            this.root.setAttribute('data-mode', mode);
                        }
                    },
                    {
                        key: 'restoreFocus',
                        value: function restoreFocus() {
                            var scrollTop = this.quill.scrollingContainer.scrollTop;
                            this.quill.focus();
                            this.quill.scrollingContainer.scrollTop = scrollTop;
                        }
                    },
                    {
                        key: 'save',
                        value: function save() {
                            var value = this.textbox.value;
                            switch(this.root.getAttribute('data-mode')){
                                case 'link':
                                    {
                                        var scrollTop = this.quill.root.scrollTop;
                                        if (this.linkRange) {
                                            this.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);
                                            delete this.linkRange;
                                        } else {
                                            this.restoreFocus();
                                            this.quill.format('link', value, _emitter2.default.sources.USER);
                                        }
                                        this.quill.root.scrollTop = scrollTop;
                                        break;
                                    }
                                case 'video':
                                    {
                                        value = extractVideoUrl(value);
                                    }
                                case 'formula':
                                    {
                                        if (!value) break;
                                        var range = this.quill.getSelection(true);
                                        if (range != null) {
                                            var index = range.index + range.length;
                                            this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);
                                            if (this.root.getAttribute('data-mode') === 'formula') {
                                                this.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);
                                            }
                                            this.quill.setSelection(index + 2, _emitter2.default.sources.USER);
                                        }
                                        break;
                                    }
                                default:
                            }
                            this.textbox.value = '';
                            this.hide();
                        }
                    }
                ]);
                return BaseTooltip;
            }(_tooltip2.default);
            function extractVideoUrl(url) {
                var match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
                if (match) {
                    return (match[1] || 'https') + '://www.youtube.com/embed/' + match[2] + '?showinfo=0';
                }
                if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
                    // eslint-disable-line no-cond-assign
                    return (match[1] || 'https') + '://player.vimeo.com/video/' + match[2] + '/';
                }
                return url;
            }
            function fillSelect(select, values) {
                var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                values.forEach(function(value) {
                    var option = document.createElement('option');
                    if (value === defaultValue) {
                        option.setAttribute('selected', 'selected');
                    } else {
                        option.setAttribute('value', value);
                    }
                    select.appendChild(option);
                });
            }
            exports.BaseTooltip = BaseTooltip;
            exports.default = BaseTheme;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var LinkedList = function() {
                function LinkedList() {
                    this.head = this.tail = null;
                    this.length = 0;
                }
                LinkedList.prototype.append = function() {
                    var nodes = [];
                    for(var _i = 0; _i < arguments.length; _i++){
                        nodes[_i] = arguments[_i];
                    }
                    this.insertBefore(nodes[0], null);
                    if (nodes.length > 1) {
                        this.append.apply(this, nodes.slice(1));
                    }
                };
                LinkedList.prototype.contains = function(node) {
                    var cur, next = this.iterator();
                    while(cur = next()){
                        if (cur === node) return true;
                    }
                    return false;
                };
                LinkedList.prototype.insertBefore = function(node, refNode) {
                    if (!node) return;
                    node.next = refNode;
                    if (refNode != null) {
                        node.prev = refNode.prev;
                        if (refNode.prev != null) {
                            refNode.prev.next = node;
                        }
                        refNode.prev = node;
                        if (refNode === this.head) {
                            this.head = node;
                        }
                    } else if (this.tail != null) {
                        this.tail.next = node;
                        node.prev = this.tail;
                        this.tail = node;
                    } else {
                        node.prev = null;
                        this.head = this.tail = node;
                    }
                    this.length += 1;
                };
                LinkedList.prototype.offset = function(target) {
                    var index = 0, cur = this.head;
                    while(cur != null){
                        if (cur === target) return index;
                        index += cur.length();
                        cur = cur.next;
                    }
                    return -1;
                };
                LinkedList.prototype.remove = function(node) {
                    if (!this.contains(node)) return;
                    if (node.prev != null) node.prev.next = node.next;
                    if (node.next != null) node.next.prev = node.prev;
                    if (node === this.head) this.head = node.next;
                    if (node === this.tail) this.tail = node.prev;
                    this.length -= 1;
                };
                LinkedList.prototype.iterator = function(curNode) {
                    if (curNode === void 0) {
                        curNode = this.head;
                    }
                    // TODO use yield when we can
                    return function() {
                        var ret = curNode;
                        if (curNode != null) curNode = curNode.next;
                        return ret;
                    };
                };
                LinkedList.prototype.find = function(index, inclusive) {
                    if (inclusive === void 0) {
                        inclusive = false;
                    }
                    var cur, next = this.iterator();
                    while(cur = next()){
                        var length = cur.length();
                        if (index < length || inclusive && index === length && (cur.next == null || cur.next.length() !== 0)) {
                            return [
                                cur,
                                index
                            ];
                        }
                        index -= length;
                    }
                    return [
                        null,
                        0
                    ];
                };
                LinkedList.prototype.forEach = function(callback) {
                    var cur, next = this.iterator();
                    while(cur = next()){
                        callback(cur);
                    }
                };
                LinkedList.prototype.forEachAt = function(index, length, callback) {
                    if (length <= 0) return;
                    var _a = this.find(index), startNode = _a[0], offset = _a[1];
                    var cur, curIndex = index - offset, next = this.iterator(startNode);
                    while((cur = next()) && curIndex < index + length){
                        var curLength = cur.length();
                        if (index > curIndex) {
                            callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));
                        } else {
                            callback(cur, 0, Math.min(curLength, index + length - curIndex));
                        }
                        curIndex += curLength;
                    }
                };
                LinkedList.prototype.map = function(callback) {
                    return this.reduce(function(memo, cur) {
                        memo.push(callback(cur));
                        return memo;
                    }, []);
                };
                LinkedList.prototype.reduce = function(callback, memo) {
                    var cur, next = this.iterator();
                    while(cur = next()){
                        memo = callback(memo, cur);
                    }
                    return memo;
                };
                return LinkedList;
            }();
            exports.default = LinkedList;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
                var extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
                };
                return function(d, b) {
                    extendStatics(d, b);
                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            }();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var container_1 = __webpack_require__(17);
            var Registry = __webpack_require__(1);
            var OBSERVER_CONFIG = {
                attributes: true,
                characterData: true,
                characterDataOldValue: true,
                childList: true,
                subtree: true
            };
            var MAX_OPTIMIZE_ITERATIONS = 100;
            var ScrollBlot = function(_super) {
                __extends(ScrollBlot, _super);
                function ScrollBlot(node) {
                    var _this = _super.call(this, node) || this;
                    _this.scroll = _this;
                    _this.observer = new MutationObserver(function(mutations) {
                        _this.update(mutations);
                    });
                    _this.observer.observe(_this.domNode, OBSERVER_CONFIG);
                    _this.attach();
                    return _this;
                }
                ScrollBlot.prototype.detach = function() {
                    _super.prototype.detach.call(this);
                    this.observer.disconnect();
                };
                ScrollBlot.prototype.deleteAt = function(index, length) {
                    this.update();
                    if (index === 0 && length === this.length()) {
                        this.children.forEach(function(child) {
                            child.remove();
                        });
                    } else {
                        _super.prototype.deleteAt.call(this, index, length);
                    }
                };
                ScrollBlot.prototype.formatAt = function(index, length, name, value) {
                    this.update();
                    _super.prototype.formatAt.call(this, index, length, name, value);
                };
                ScrollBlot.prototype.insertAt = function(index, value, def) {
                    this.update();
                    _super.prototype.insertAt.call(this, index, value, def);
                };
                ScrollBlot.prototype.optimize = function(mutations, context) {
                    var _this = this;
                    if (mutations === void 0) {
                        mutations = [];
                    }
                    if (context === void 0) {
                        context = {};
                    }
                    _super.prototype.optimize.call(this, context);
                    // We must modify mutations directly, cannot make copy and then modify
                    var records = [].slice.call(this.observer.takeRecords());
                    // Array.push currently seems to be implemented by a non-tail recursive function
                    // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());
                    while(records.length > 0)mutations.push(records.pop());
                    // TODO use WeakMap
                    var mark = function(blot, markParent) {
                        if (markParent === void 0) {
                            markParent = true;
                        }
                        if (blot == null || blot === _this) return;
                        if (blot.domNode.parentNode == null) return;
                        // @ts-ignore
                        if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                            // @ts-ignore
                            blot.domNode[Registry.DATA_KEY].mutations = [];
                        }
                        if (markParent) mark(blot.parent);
                    };
                    var optimize = function(blot) {
                        // Post-order traversal
                        if (// @ts-ignore
                        blot.domNode[Registry.DATA_KEY] == null || // @ts-ignore
                        blot.domNode[Registry.DATA_KEY].mutations == null) {
                            return;
                        }
                        if (blot instanceof container_1.default) {
                            blot.children.forEach(optimize);
                        }
                        blot.optimize(context);
                    };
                    var remaining = mutations;
                    for(var i = 0; remaining.length > 0; i += 1){
                        if (i >= MAX_OPTIMIZE_ITERATIONS) {
                            throw new Error('[Parchment] Maximum optimize iterations reached');
                        }
                        remaining.forEach(function(mutation) {
                            var blot = Registry.find(mutation.target, true);
                            if (blot == null) return;
                            if (blot.domNode === mutation.target) {
                                if (mutation.type === 'childList') {
                                    mark(Registry.find(mutation.previousSibling, false));
                                    [].forEach.call(mutation.addedNodes, function(node) {
                                        var child = Registry.find(node, false);
                                        mark(child, false);
                                        if (child instanceof container_1.default) {
                                            child.children.forEach(function(grandChild) {
                                                mark(grandChild, false);
                                            });
                                        }
                                    });
                                } else if (mutation.type === 'attributes') {
                                    mark(blot.prev);
                                }
                            }
                            mark(blot);
                        });
                        this.children.forEach(optimize);
                        remaining = [].slice.call(this.observer.takeRecords());
                        records = remaining.slice();
                        while(records.length > 0)mutations.push(records.pop());
                    }
                };
                ScrollBlot.prototype.update = function(mutations, context) {
                    var _this = this;
                    if (context === void 0) {
                        context = {};
                    }
                    mutations = mutations || this.observer.takeRecords();
                    // TODO use WeakMap
                    mutations.map(function(mutation) {
                        var blot = Registry.find(mutation.target, true);
                        if (blot == null) return null;
                        // @ts-ignore
                        if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                            // @ts-ignore
                            blot.domNode[Registry.DATA_KEY].mutations = [
                                mutation
                            ];
                            return blot;
                        } else {
                            // @ts-ignore
                            blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
                            return null;
                        }
                    }).forEach(function(blot) {
                        if (blot == null || blot === _this || //@ts-ignore
                        blot.domNode[Registry.DATA_KEY] == null) return;
                        // @ts-ignore
                        blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);
                    });
                    // @ts-ignore
                    if (this.domNode[Registry.DATA_KEY].mutations != null) {
                        // @ts-ignore
                        _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);
                    }
                    this.optimize(mutations, context);
                };
                ScrollBlot.blotName = 'scroll';
                ScrollBlot.defaultChild = 'block';
                ScrollBlot.scope = Registry.Scope.BLOCK_BLOT;
                ScrollBlot.tagName = 'DIV';
                return ScrollBlot;
            }(container_1.default);
            exports.default = ScrollBlot;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
                var extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
                };
                return function(d, b) {
                    extendStatics(d, b);
                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            }();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var format_1 = __webpack_require__(18);
            var Registry = __webpack_require__(1);
            // Shallow object comparison
            function isEqual(obj1, obj2) {
                if (Object.keys(obj1).length !== Object.keys(obj2).length) return false;
                // @ts-ignore
                for(var prop in obj1){
                    // @ts-ignore
                    if (obj1[prop] !== obj2[prop]) return false;
                }
                return true;
            }
            var InlineBlot = function(_super) {
                __extends(InlineBlot, _super);
                function InlineBlot() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                InlineBlot.formats = function(domNode) {
                    if (domNode.tagName === InlineBlot.tagName) return undefined;
                    return _super.formats.call(this, domNode);
                };
                InlineBlot.prototype.format = function(name, value) {
                    var _this = this;
                    if (name === this.statics.blotName && !value) {
                        this.children.forEach(function(child) {
                            if (!(child instanceof format_1.default)) {
                                child = child.wrap(InlineBlot.blotName, true);
                            }
                            _this.attributes.copy(child);
                        });
                        this.unwrap();
                    } else {
                        _super.prototype.format.call(this, name, value);
                    }
                };
                InlineBlot.prototype.formatAt = function(index, length, name, value) {
                    if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {
                        var blot = this.isolate(index, length);
                        blot.format(name, value);
                    } else {
                        _super.prototype.formatAt.call(this, index, length, name, value);
                    }
                };
                InlineBlot.prototype.optimize = function(context) {
                    _super.prototype.optimize.call(this, context);
                    var formats = this.formats();
                    if (Object.keys(formats).length === 0) {
                        return this.unwrap(); // unformatted span
                    }
                    var next = this.next;
                    if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {
                        next.moveChildren(this);
                        next.remove();
                    }
                };
                InlineBlot.blotName = 'inline';
                InlineBlot.scope = Registry.Scope.INLINE_BLOT;
                InlineBlot.tagName = 'SPAN';
                return InlineBlot;
            }(format_1.default);
            exports.default = InlineBlot;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
                var extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
                };
                return function(d, b) {
                    extendStatics(d, b);
                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            }();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var format_1 = __webpack_require__(18);
            var Registry = __webpack_require__(1);
            var BlockBlot = function(_super) {
                __extends(BlockBlot, _super);
                function BlockBlot() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                BlockBlot.formats = function(domNode) {
                    var tagName = Registry.query(BlockBlot.blotName).tagName;
                    if (domNode.tagName === tagName) return undefined;
                    return _super.formats.call(this, domNode);
                };
                BlockBlot.prototype.format = function(name, value) {
                    if (Registry.query(name, Registry.Scope.BLOCK) == null) {
                        return;
                    } else if (name === this.statics.blotName && !value) {
                        this.replaceWith(BlockBlot.blotName);
                    } else {
                        _super.prototype.format.call(this, name, value);
                    }
                };
                BlockBlot.prototype.formatAt = function(index, length, name, value) {
                    if (Registry.query(name, Registry.Scope.BLOCK) != null) {
                        this.format(name, value);
                    } else {
                        _super.prototype.formatAt.call(this, index, length, name, value);
                    }
                };
                BlockBlot.prototype.insertAt = function(index, value, def) {
                    if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {
                        // Insert text or inline
                        _super.prototype.insertAt.call(this, index, value, def);
                    } else {
                        var after = this.split(index);
                        var blot = Registry.create(value, def);
                        after.parent.insertBefore(blot, after);
                    }
                };
                BlockBlot.prototype.update = function(mutations, context) {
                    if (navigator.userAgent.match(/Trident/)) {
                        this.build();
                    } else {
                        _super.prototype.update.call(this, mutations, context);
                    }
                };
                BlockBlot.blotName = 'block';
                BlockBlot.scope = Registry.Scope.BLOCK_BLOT;
                BlockBlot.tagName = 'P';
                return BlockBlot;
            }(format_1.default);
            exports.default = BlockBlot;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
                var extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
                };
                return function(d, b) {
                    extendStatics(d, b);
                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            }();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var leaf_1 = __webpack_require__(19);
            var EmbedBlot = function(_super) {
                __extends(EmbedBlot, _super);
                function EmbedBlot() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                EmbedBlot.formats = function(domNode) {
                    return undefined;
                };
                EmbedBlot.prototype.format = function(name, value) {
                    // super.formatAt wraps, which is what we want in general,
                    // but this allows subclasses to overwrite for formats
                    // that just apply to particular embeds
                    _super.prototype.formatAt.call(this, 0, this.length(), name, value);
                };
                EmbedBlot.prototype.formatAt = function(index, length, name, value) {
                    if (index === 0 && length === this.length()) {
                        this.format(name, value);
                    } else {
                        _super.prototype.formatAt.call(this, index, length, name, value);
                    }
                };
                EmbedBlot.prototype.formats = function() {
                    return this.statics.formats(this.domNode);
                };
                return EmbedBlot;
            }(leaf_1.default);
            exports.default = EmbedBlot;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
                var extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
                };
                return function(d, b) {
                    extendStatics(d, b);
                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            }();
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var leaf_1 = __webpack_require__(19);
            var Registry = __webpack_require__(1);
            var TextBlot = function(_super) {
                __extends(TextBlot, _super);
                function TextBlot(node) {
                    var _this = _super.call(this, node) || this;
                    _this.text = _this.statics.value(_this.domNode);
                    return _this;
                }
                TextBlot.create = function(value) {
                    return document.createTextNode(value);
                };
                TextBlot.value = function(domNode) {
                    var text = domNode.data;
                    // @ts-ignore
                    if (text['normalize']) text = text['normalize']();
                    return text;
                };
                TextBlot.prototype.deleteAt = function(index, length) {
                    this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);
                };
                TextBlot.prototype.index = function(node, offset) {
                    if (this.domNode === node) {
                        return offset;
                    }
                    return -1;
                };
                TextBlot.prototype.insertAt = function(index, value, def) {
                    if (def == null) {
                        this.text = this.text.slice(0, index) + value + this.text.slice(index);
                        this.domNode.data = this.text;
                    } else {
                        _super.prototype.insertAt.call(this, index, value, def);
                    }
                };
                TextBlot.prototype.length = function() {
                    return this.text.length;
                };
                TextBlot.prototype.optimize = function(context) {
                    _super.prototype.optimize.call(this, context);
                    this.text = this.statics.value(this.domNode);
                    if (this.text.length === 0) {
                        this.remove();
                    } else if (this.next instanceof TextBlot && this.next.prev === this) {
                        this.insertAt(this.length(), this.next.value());
                        this.next.remove();
                    }
                };
                TextBlot.prototype.position = function(index, inclusive) {
                    if (inclusive === void 0) {
                        inclusive = false;
                    }
                    return [
                        this.domNode,
                        index
                    ];
                };
                TextBlot.prototype.split = function(index, force) {
                    if (force === void 0) {
                        force = false;
                    }
                    if (!force) {
                        if (index === 0) return this;
                        if (index === this.length()) return this.next;
                    }
                    var after = Registry.create(this.domNode.splitText(index));
                    this.parent.insertBefore(after, this.next);
                    this.text = this.statics.value(this.domNode);
                    return after;
                };
                TextBlot.prototype.update = function(mutations, context) {
                    var _this = this;
                    if (mutations.some(function(mutation) {
                        return mutation.type === 'characterData' && mutation.target === _this.domNode;
                    })) {
                        this.text = this.statics.value(this.domNode);
                    }
                };
                TextBlot.prototype.value = function() {
                    return this.text;
                };
                TextBlot.blotName = 'text';
                TextBlot.scope = Registry.Scope.INLINE_BLOT;
                return TextBlot;
            }(leaf_1.default);
            exports.default = TextBlot;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            var elem = document.createElement('div');
            elem.classList.toggle('test-class', false);
            if (elem.classList.contains('test-class')) {
                var _toggle = DOMTokenList.prototype.toggle;
                DOMTokenList.prototype.toggle = function(token, force) {
                    if (arguments.length > 1 && !this.contains(token) === !force) {
                        return force;
                    } else {
                        return _toggle.call(this, token);
                    }
                };
            }
            if (!String.prototype.startsWith) {
                String.prototype.startsWith = function(searchString, position) {
                    position = position || 0;
                    return this.substr(position, searchString.length) === searchString;
                };
            }
            if (!String.prototype.endsWith) {
                String.prototype.endsWith = function(searchString, position) {
                    var subjectString = this.toString();
                    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
                        position = subjectString.length;
                    }
                    position -= searchString.length;
                    var lastIndex = subjectString.indexOf(searchString, position);
                    return lastIndex !== -1 && lastIndex === position;
                };
            }
            if (!Array.prototype.find) {
                Object.defineProperty(Array.prototype, "find", {
                    value: function value(predicate) {
                        if (this === null) {
                            throw new TypeError('Array.prototype.find called on null or undefined');
                        }
                        if (typeof predicate !== 'function') {
                            throw new TypeError('predicate must be a function');
                        }
                        var list = Object(this);
                        var length = list.length >>> 0;
                        var thisArg = arguments[1];
                        var value;
                        for(var i = 0; i < length; i++){
                            value = list[i];
                            if (predicate.call(thisArg, value, i, list)) {
                                return value;
                            }
                        }
                        return undefined;
                    }
                });
            }
            document.addEventListener("DOMContentLoaded", function() {
                // Disable resizing in Firefox
                document.execCommand("enableObjectResizing", false, false);
                // Disable automatic linkifying in IE11
                document.execCommand("autoUrlDetect", false, false);
            });
        /***/ },
        function(module1, exports) {
            /**
 * This library modifies the diff-patch-match library by Neil Fraser
 * by removing the patch and match functionality and certain advanced
 * options in the diff function. The original license is as follows:
 *
 * ===
 *
 * Diff Match and Patch
 *
 * Copyright 2006 Google Inc.
 * http://code.google.com/p/google-diff-match-patch/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The data structure representing a diff is an array of tuples:
 * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
 * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
 */ var DIFF_DELETE = -1;
            var DIFF_INSERT = 1;
            var DIFF_EQUAL = 0;
            /**
 * Find the differences between two texts.  Simplifies the problem by stripping
 * any common prefix or suffix off the texts before diffing.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {Int} cursor_pos Expected edit position in text1 (optional)
 * @return {Array} Array of diff tuples.
 */ function diff_main(text1, text2, cursor_pos) {
                // Check for equality (speedup).
                if (text1 == text2) {
                    if (text1) {
                        return [
                            [
                                DIFF_EQUAL,
                                text1
                            ]
                        ];
                    }
                    return [];
                }
                // Check cursor_pos within bounds
                if (cursor_pos < 0 || text1.length < cursor_pos) {
                    cursor_pos = null;
                }
                // Trim off common prefix (speedup).
                var commonlength = diff_commonPrefix(text1, text2);
                var commonprefix = text1.substring(0, commonlength);
                text1 = text1.substring(commonlength);
                text2 = text2.substring(commonlength);
                // Trim off common suffix (speedup).
                commonlength = diff_commonSuffix(text1, text2);
                var commonsuffix = text1.substring(text1.length - commonlength);
                text1 = text1.substring(0, text1.length - commonlength);
                text2 = text2.substring(0, text2.length - commonlength);
                // Compute the diff on the middle block.
                var diffs = diff_compute_(text1, text2);
                // Restore the prefix and suffix.
                if (commonprefix) {
                    diffs.unshift([
                        DIFF_EQUAL,
                        commonprefix
                    ]);
                }
                if (commonsuffix) {
                    diffs.push([
                        DIFF_EQUAL,
                        commonsuffix
                    ]);
                }
                diff_cleanupMerge(diffs);
                if (cursor_pos != null) {
                    diffs = fix_cursor(diffs, cursor_pos);
                }
                diffs = fix_emoji(diffs);
                return diffs;
            }
            ;
            /**
 * Find the differences between two texts.  Assumes that the texts do not
 * have any common prefix or suffix.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @return {Array} Array of diff tuples.
 */ function diff_compute_(text1, text2) {
                var diffs;
                if (!text1) {
                    // Just add some text (speedup).
                    return [
                        [
                            DIFF_INSERT,
                            text2
                        ]
                    ];
                }
                if (!text2) {
                    // Just delete some text (speedup).
                    return [
                        [
                            DIFF_DELETE,
                            text1
                        ]
                    ];
                }
                var longtext = text1.length > text2.length ? text1 : text2;
                var shorttext = text1.length > text2.length ? text2 : text1;
                var i = longtext.indexOf(shorttext);
                if (i != -1) {
                    // Shorter text is inside the longer text (speedup).
                    diffs = [
                        [
                            DIFF_INSERT,
                            longtext.substring(0, i)
                        ],
                        [
                            DIFF_EQUAL,
                            shorttext
                        ],
                        [
                            DIFF_INSERT,
                            longtext.substring(i + shorttext.length)
                        ]
                    ];
                    // Swap insertions for deletions if diff is reversed.
                    if (text1.length > text2.length) {
                        diffs[0][0] = diffs[2][0] = DIFF_DELETE;
                    }
                    return diffs;
                }
                if (shorttext.length == 1) {
                    // Single character string.
                    // After the previous speedup, the character can't be an equality.
                    return [
                        [
                            DIFF_DELETE,
                            text1
                        ],
                        [
                            DIFF_INSERT,
                            text2
                        ]
                    ];
                }
                // Check to see if the problem can be split in two.
                var hm = diff_halfMatch_(text1, text2);
                if (hm) {
                    // A half-match was found, sort out the return data.
                    var text1_a = hm[0];
                    var text1_b = hm[1];
                    var text2_a = hm[2];
                    var text2_b = hm[3];
                    var mid_common = hm[4];
                    // Send both pairs off for separate processing.
                    var diffs_a = diff_main(text1_a, text2_a);
                    var diffs_b = diff_main(text1_b, text2_b);
                    // Merge the results.
                    return diffs_a.concat([
                        [
                            DIFF_EQUAL,
                            mid_common
                        ]
                    ], diffs_b);
                }
                return diff_bisect_(text1, text2);
            }
            ;
            /**
 * Find the 'middle snake' of a diff, split the problem in two
 * and return the recursively constructed diff.
 * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @return {Array} Array of diff tuples.
 * @private
 */ function diff_bisect_(text1, text2) {
                // Cache the text lengths to prevent multiple calls.
                var text1_length = text1.length;
                var text2_length = text2.length;
                var max_d = Math.ceil((text1_length + text2_length) / 2);
                var v_offset = max_d;
                var v_length = 2 * max_d;
                var v1 = new Array(v_length);
                var v2 = new Array(v_length);
                // Setting all elements to -1 is faster in Chrome & Firefox than mixing
                // integers and undefined.
                for(var x = 0; x < v_length; x++){
                    v1[x] = -1;
                    v2[x] = -1;
                }
                v1[v_offset + 1] = 0;
                v2[v_offset + 1] = 0;
                var delta = text1_length - text2_length;
                // If the total number of characters is odd, then the front path will collide
                // with the reverse path.
                var front = delta % 2 != 0;
                // Offsets for start and end of k loop.
                // Prevents mapping of space beyond the grid.
                var k1start = 0;
                var k1end = 0;
                var k2start = 0;
                var k2end = 0;
                for(var d = 0; d < max_d; d++){
                    // Walk the front path one step.
                    for(var k1 = -d + k1start; k1 <= d - k1end; k1 += 2){
                        var k1_offset = v_offset + k1;
                        var x1;
                        if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {
                            x1 = v1[k1_offset + 1];
                        } else {
                            x1 = v1[k1_offset - 1] + 1;
                        }
                        var y1 = x1 - k1;
                        while(x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)){
                            x1++;
                            y1++;
                        }
                        v1[k1_offset] = x1;
                        if (x1 > text1_length) {
                            // Ran off the right of the graph.
                            k1end += 2;
                        } else if (y1 > text2_length) {
                            // Ran off the bottom of the graph.
                            k1start += 2;
                        } else if (front) {
                            var k2_offset = v_offset + delta - k1;
                            if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
                                // Mirror x2 onto top-left coordinate system.
                                var x2 = text1_length - v2[k2_offset];
                                if (x1 >= x2) {
                                    // Overlap detected.
                                    return diff_bisectSplit_(text1, text2, x1, y1);
                                }
                            }
                        }
                    }
                    // Walk the reverse path one step.
                    for(var k2 = -d + k2start; k2 <= d - k2end; k2 += 2){
                        var k2_offset = v_offset + k2;
                        var x2;
                        if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {
                            x2 = v2[k2_offset + 1];
                        } else {
                            x2 = v2[k2_offset - 1] + 1;
                        }
                        var y2 = x2 - k2;
                        while(x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)){
                            x2++;
                            y2++;
                        }
                        v2[k2_offset] = x2;
                        if (x2 > text1_length) {
                            // Ran off the left of the graph.
                            k2end += 2;
                        } else if (y2 > text2_length) {
                            // Ran off the top of the graph.
                            k2start += 2;
                        } else if (!front) {
                            var k1_offset = v_offset + delta - k2;
                            if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
                                var x1 = v1[k1_offset];
                                var y1 = v_offset + x1 - k1_offset;
                                // Mirror x2 onto top-left coordinate system.
                                x2 = text1_length - x2;
                                if (x1 >= x2) {
                                    // Overlap detected.
                                    return diff_bisectSplit_(text1, text2, x1, y1);
                                }
                            }
                        }
                    }
                }
                // Diff took too long and hit the deadline or
                // number of diffs equals number of characters, no commonality at all.
                return [
                    [
                        DIFF_DELETE,
                        text1
                    ],
                    [
                        DIFF_INSERT,
                        text2
                    ]
                ];
            }
            ;
            /**
 * Given the location of the 'middle snake', split the diff in two parts
 * and recurse.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} x Index of split point in text1.
 * @param {number} y Index of split point in text2.
 * @return {Array} Array of diff tuples.
 */ function diff_bisectSplit_(text1, text2, x, y) {
                var text1a = text1.substring(0, x);
                var text2a = text2.substring(0, y);
                var text1b = text1.substring(x);
                var text2b = text2.substring(y);
                // Compute both diffs serially.
                var diffs = diff_main(text1a, text2a);
                var diffsb = diff_main(text1b, text2b);
                return diffs.concat(diffsb);
            }
            ;
            /**
 * Determine the common prefix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the start of each
 *     string.
 */ function diff_commonPrefix(text1, text2) {
                // Quick check for common null cases.
                if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
                    return 0;
                }
                // Binary search.
                // Performance analysis: http://neil.fraser.name/news/2007/10/09/
                var pointermin = 0;
                var pointermax = Math.min(text1.length, text2.length);
                var pointermid = pointermax;
                var pointerstart = 0;
                while(pointermin < pointermid){
                    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {
                        pointermin = pointermid;
                        pointerstart = pointermin;
                    } else {
                        pointermax = pointermid;
                    }
                    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
                }
                return pointermid;
            }
            ;
            /**
 * Determine the common suffix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of each string.
 */ function diff_commonSuffix(text1, text2) {
                // Quick check for common null cases.
                if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
                    return 0;
                }
                // Binary search.
                // Performance analysis: http://neil.fraser.name/news/2007/10/09/
                var pointermin = 0;
                var pointermax = Math.min(text1.length, text2.length);
                var pointermid = pointermax;
                var pointerend = 0;
                while(pointermin < pointermid){
                    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {
                        pointermin = pointermid;
                        pointerend = pointermin;
                    } else {
                        pointermax = pointermid;
                    }
                    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
                }
                return pointermid;
            }
            ;
            /**
 * Do the two texts share a substring which is at least half the length of the
 * longer text?
 * This speedup can produce non-minimal diffs.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {Array.<string>} Five element Array, containing the prefix of
 *     text1, the suffix of text1, the prefix of text2, the suffix of
 *     text2 and the common middle.  Or null if there was no match.
 */ function diff_halfMatch_(text1, text2) {
                var longtext = text1.length > text2.length ? text1 : text2;
                var shorttext = text1.length > text2.length ? text2 : text1;
                if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
                    return null; // Pointless.
                }
                /**
   * Does a substring of shorttext exist within longtext such that the substring
   * is at least half the length of longtext?
   * Closure, but does not reference any external variables.
   * @param {string} longtext Longer string.
   * @param {string} shorttext Shorter string.
   * @param {number} i Start index of quarter length substring within longtext.
   * @return {Array.<string>} Five element Array, containing the prefix of
   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
   *     of shorttext and the common middle.  Or null if there was no match.
   * @private
   */ function diff_halfMatchI_(longtext, shorttext, i) {
                    // Start with a 1/4 length substring at position i as a seed.
                    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
                    var j = -1;
                    var best_common = '';
                    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
                    while((j = shorttext.indexOf(seed, j + 1)) != -1){
                        var prefixLength = diff_commonPrefix(longtext.substring(i), shorttext.substring(j));
                        var suffixLength = diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));
                        if (best_common.length < suffixLength + prefixLength) {
                            best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);
                            best_longtext_a = longtext.substring(0, i - suffixLength);
                            best_longtext_b = longtext.substring(i + prefixLength);
                            best_shorttext_a = shorttext.substring(0, j - suffixLength);
                            best_shorttext_b = shorttext.substring(j + prefixLength);
                        }
                    }
                    if (best_common.length * 2 >= longtext.length) {
                        return [
                            best_longtext_a,
                            best_longtext_b,
                            best_shorttext_a,
                            best_shorttext_b,
                            best_common
                        ];
                    } else {
                        return null;
                    }
                }
                // First check if the second quarter is the seed for a half-match.
                var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));
                // Check again based on the third quarter.
                var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));
                var hm;
                if (!hm1 && !hm2) {
                    return null;
                } else if (!hm2) {
                    hm = hm1;
                } else if (!hm1) {
                    hm = hm2;
                } else {
                    // Both matched.  Select the longest.
                    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
                }
                // A half-match was found, sort out the return data.
                var text1_a, text1_b, text2_a, text2_b;
                if (text1.length > text2.length) {
                    text1_a = hm[0];
                    text1_b = hm[1];
                    text2_a = hm[2];
                    text2_b = hm[3];
                } else {
                    text2_a = hm[0];
                    text2_b = hm[1];
                    text1_a = hm[2];
                    text1_b = hm[3];
                }
                var mid_common = hm[4];
                return [
                    text1_a,
                    text1_b,
                    text2_a,
                    text2_b,
                    mid_common
                ];
            }
            ;
            /**
 * Reorder and merge like edit sections.  Merge equalities.
 * Any edit section can move as long as it doesn't cross an equality.
 * @param {Array} diffs Array of diff tuples.
 */ function diff_cleanupMerge(diffs) {
                diffs.push([
                    DIFF_EQUAL,
                    ''
                ]); // Add a dummy entry at the end.
                var pointer = 0;
                var count_delete = 0;
                var count_insert = 0;
                var text_delete = '';
                var text_insert = '';
                var commonlength;
                while(pointer < diffs.length){
                    switch(diffs[pointer][0]){
                        case DIFF_INSERT:
                            count_insert++;
                            text_insert += diffs[pointer][1];
                            pointer++;
                            break;
                        case DIFF_DELETE:
                            count_delete++;
                            text_delete += diffs[pointer][1];
                            pointer++;
                            break;
                        case DIFF_EQUAL:
                            // Upon reaching an equality, check for prior redundancies.
                            if (count_delete + count_insert > 1) {
                                if (count_delete !== 0 && count_insert !== 0) {
                                    // Factor out any common prefixies.
                                    commonlength = diff_commonPrefix(text_insert, text_delete);
                                    if (commonlength !== 0) {
                                        if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {
                                            diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);
                                        } else {
                                            diffs.splice(0, 0, [
                                                DIFF_EQUAL,
                                                text_insert.substring(0, commonlength)
                                            ]);
                                            pointer++;
                                        }
                                        text_insert = text_insert.substring(commonlength);
                                        text_delete = text_delete.substring(commonlength);
                                    }
                                    // Factor out any common suffixies.
                                    commonlength = diff_commonSuffix(text_insert, text_delete);
                                    if (commonlength !== 0) {
                                        diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
                                        text_insert = text_insert.substring(0, text_insert.length - commonlength);
                                        text_delete = text_delete.substring(0, text_delete.length - commonlength);
                                    }
                                }
                                // Delete the offending records and add the merged ones.
                                if (count_delete === 0) {
                                    diffs.splice(pointer - count_insert, count_delete + count_insert, [
                                        DIFF_INSERT,
                                        text_insert
                                    ]);
                                } else if (count_insert === 0) {
                                    diffs.splice(pointer - count_delete, count_delete + count_insert, [
                                        DIFF_DELETE,
                                        text_delete
                                    ]);
                                } else {
                                    diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [
                                        DIFF_DELETE,
                                        text_delete
                                    ], [
                                        DIFF_INSERT,
                                        text_insert
                                    ]);
                                }
                                pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
                            } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
                                // Merge this equality with the previous one.
                                diffs[pointer - 1][1] += diffs[pointer][1];
                                diffs.splice(pointer, 1);
                            } else {
                                pointer++;
                            }
                            count_insert = 0;
                            count_delete = 0;
                            text_delete = '';
                            text_insert = '';
                            break;
                    }
                }
                if (diffs[diffs.length - 1][1] === '') {
                    diffs.pop(); // Remove the dummy entry at the end.
                }
                // Second pass: look for single edits surrounded on both sides by equalities
                // which can be shifted sideways to eliminate an equality.
                // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
                var changes = false;
                pointer = 1;
                // Intentionally ignore the first and last element (don't need checking).
                while(pointer < diffs.length - 1){
                    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
                        // This is a single edit surrounded by equalities.
                        if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
                            // Shift the edit over the previous equality.
                            diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);
                            diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
                            diffs.splice(pointer - 1, 1);
                            changes = true;
                        } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {
                            // Shift the edit over the next equality.
                            diffs[pointer - 1][1] += diffs[pointer + 1][1];
                            diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
                            diffs.splice(pointer + 1, 1);
                            changes = true;
                        }
                    }
                    pointer++;
                }
                // If shifts were made, the diff needs reordering and another shift sweep.
                if (changes) {
                    diff_cleanupMerge(diffs);
                }
            }
            ;
            var diff = diff_main;
            diff.INSERT = DIFF_INSERT;
            diff.DELETE = DIFF_DELETE;
            diff.EQUAL = DIFF_EQUAL;
            module1.exports = diff;
            /*
 * Modify a diff such that the cursor position points to the start of a change:
 * E.g.
 *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)
 *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]
 *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)
 *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]
 *
 * @param {Array} diffs Array of diff tuples
 * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
 * @return {Array} A tuple [cursor location in the modified diff, modified diff]
 */ function cursor_normalize_diff(diffs, cursor_pos) {
                if (cursor_pos === 0) {
                    return [
                        DIFF_EQUAL,
                        diffs
                    ];
                }
                for(var current_pos = 0, i = 0; i < diffs.length; i++){
                    var d = diffs[i];
                    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {
                        var next_pos = current_pos + d[1].length;
                        if (cursor_pos === next_pos) {
                            return [
                                i + 1,
                                diffs
                            ];
                        } else if (cursor_pos < next_pos) {
                            // copy to prevent side effects
                            diffs = diffs.slice();
                            // split d into two diff changes
                            var split_pos = cursor_pos - current_pos;
                            var d_left = [
                                d[0],
                                d[1].slice(0, split_pos)
                            ];
                            var d_right = [
                                d[0],
                                d[1].slice(split_pos)
                            ];
                            diffs.splice(i, 1, d_left, d_right);
                            return [
                                i + 1,
                                diffs
                            ];
                        } else {
                            current_pos = next_pos;
                        }
                    }
                }
                throw new Error('cursor_pos is out of bounds!');
            }
            /*
 * Modify a diff such that the edit position is "shifted" to the proposed edit location (cursor_position).
 *
 * Case 1)
 *   Check if a naive shift is possible:
 *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)
 *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result
 * Case 2)
 *   Check if the following shifts are possible:
 *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']
 *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']
 *         ^            ^
 *         d          d_next
 *
 * @param {Array} diffs Array of diff tuples
 * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
 * @return {Array} Array of diff tuples
 */ function fix_cursor(diffs, cursor_pos) {
                var norm = cursor_normalize_diff(diffs, cursor_pos);
                var ndiffs = norm[1];
                var cursor_pointer = norm[0];
                var d = ndiffs[cursor_pointer];
                var d_next = ndiffs[cursor_pointer + 1];
                if (d == null) {
                    // Text was deleted from end of original string,
                    // cursor is now out of bounds in new string
                    return diffs;
                } else if (d[0] !== DIFF_EQUAL) {
                    // A modification happened at the cursor location.
                    // This is the expected outcome, so we can return the original diff.
                    return diffs;
                } else {
                    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {
                        // Case 1)
                        // It is possible to perform a naive shift
                        ndiffs.splice(cursor_pointer, 2, d_next, d);
                        return merge_tuples(ndiffs, cursor_pointer, 2);
                    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {
                        // Case 2)
                        // d[1] is a prefix of d_next[1]
                        // We can assume that d_next[0] !== 0, since d[0] === 0
                        // Shift edit locations..
                        ndiffs.splice(cursor_pointer, 2, [
                            d_next[0],
                            d[1]
                        ], [
                            0,
                            d[1]
                        ]);
                        var suffix = d_next[1].slice(d[1].length);
                        if (suffix.length > 0) {
                            ndiffs.splice(cursor_pointer + 2, 0, [
                                d_next[0],
                                suffix
                            ]);
                        }
                        return merge_tuples(ndiffs, cursor_pointer, 3);
                    } else {
                        // Not possible to perform any modification
                        return diffs;
                    }
                }
            }
            /*
 * Check diff did not split surrogate pairs.
 * Ex. [0, '\uD83D'], [-1, '\uDC36'], [1, '\uDC2F'] -> [-1, '\uD83D\uDC36'], [1, '\uD83D\uDC2F']
 *     '\uD83D\uDC36' === '🐶', '\uD83D\uDC2F' === '🐯'
 *
 * @param {Array} diffs Array of diff tuples
 * @return {Array} Array of diff tuples
 */ function fix_emoji(diffs) {
                var compact = false;
                var starts_with_pair_end = function(str) {
                    return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;
                };
                var ends_with_pair_start = function(str) {
                    return str.charCodeAt(str.length - 1) >= 0xD800 && str.charCodeAt(str.length - 1) <= 0xDBFF;
                };
                for(var i = 2; i < diffs.length; i += 1){
                    if (diffs[i - 2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i - 2][1]) && diffs[i - 1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i - 1][1]) && diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {
                        compact = true;
                        diffs[i - 1][1] = diffs[i - 2][1].slice(-1) + diffs[i - 1][1];
                        diffs[i][1] = diffs[i - 2][1].slice(-1) + diffs[i][1];
                        diffs[i - 2][1] = diffs[i - 2][1].slice(0, -1);
                    }
                }
                if (!compact) {
                    return diffs;
                }
                var fixed_diffs = [];
                for(var i = 0; i < diffs.length; i += 1){
                    if (diffs[i][1].length > 0) {
                        fixed_diffs.push(diffs[i]);
                    }
                }
                return fixed_diffs;
            }
            /*
 * Try to merge tuples with their neigbors in a given range.
 * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']
 *
 * @param {Array} diffs Array of diff tuples.
 * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).
 * @param {Int} length Number of consecutive elements to check.
 * @return {Array} Array of merged diff tuples.
 */ function merge_tuples(diffs, start, length) {
                // Check from (start-1) to (start+length).
                for(var i = start + length - 1; i >= 0 && i >= start - 1; i--){
                    if (i + 1 < diffs.length) {
                        var left_d = diffs[i];
                        var right_d = diffs[i + 1];
                        if (left_d[0] === right_d[1]) {
                            diffs.splice(i, 2, [
                                left_d[0],
                                left_d[1] + right_d[1]
                            ]);
                        }
                    }
                }
                return diffs;
            }
        /***/ },
        function(module1, exports) {
            exports = module1.exports = typeof Object.keys === 'function' ? Object.keys : shim;
            exports.shim = shim;
            function shim(obj) {
                var keys = [];
                for(var key in obj)keys.push(key);
                return keys;
            }
        /***/ },
        function(module1, exports) {
            var supportsArgumentsClass = function() {
                return Object.prototype.toString.call(arguments);
            }() == '[object Arguments]';
            exports = module1.exports = supportsArgumentsClass ? supported : unsupported;
            exports.supported = supported;
            function supported(object) {
                return Object.prototype.toString.call(object) == '[object Arguments]';
            }
            ;
            exports.unsupported = unsupported;
            function unsupported(object) {
                return object && typeof object == 'object' && typeof object.length == 'number' && Object.prototype.hasOwnProperty.call(object, 'callee') && !Object.prototype.propertyIsEnumerable.call(object, 'callee') || false;
            }
            ;
        /***/ },
        function(module1, exports) {
            'use strict';
            var has = Object.prototype.hasOwnProperty, prefix = '~';
            /**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @api private
 */ function Events() {}
            //
            // We try to not inherit from `Object.prototype`. In some engines creating an
            // instance in this way is faster than calling `Object.create(null)` directly.
            // If `Object.create(null)` is not supported we prefix the event names with a
            // character to make sure that the built-in object properties are not
            // overridden or used as an attack vector.
            //
            if (Object.create) {
                Events.prototype = Object.create(null);
                //
                // This hack is needed because the `__proto__` property is still inherited in
                // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
                //
                if (!new Events().__proto__) prefix = false;
            }
            /**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {Mixed} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @api private
 */ function EE(fn, context, once) {
                this.fn = fn;
                this.context = context;
                this.once = once || false;
            }
            /**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @api public
 */ function EventEmitter() {
                this._events = new Events();
                this._eventsCount = 0;
            }
            /**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @api public
 */ EventEmitter.prototype.eventNames = function eventNames() {
                var names = [], events, name;
                if (this._eventsCount === 0) return names;
                for(name in events = this._events){
                    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
                }
                if (Object.getOwnPropertySymbols) {
                    return names.concat(Object.getOwnPropertySymbols(events));
                }
                return names;
            };
            /**
 * Return the listeners registered for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Boolean} exists Only check if there are listeners.
 * @returns {Array|Boolean}
 * @api public
 */ EventEmitter.prototype.listeners = function listeners(event, exists) {
                var evt = prefix ? prefix + event : event, available = this._events[evt];
                if (exists) return !!available;
                if (!available) return [];
                if (available.fn) return [
                    available.fn
                ];
                for(var i = 0, l = available.length, ee = new Array(l); i < l; i++){
                    ee[i] = available[i].fn;
                }
                return ee;
            };
            /**
 * Calls each of the listeners registered for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @api public
 */ EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
                var evt = prefix ? prefix + event : event;
                if (!this._events[evt]) return false;
                var listeners = this._events[evt], len = arguments.length, args, i;
                if (listeners.fn) {
                    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);
                    switch(len){
                        case 1:
                            return listeners.fn.call(listeners.context), true;
                        case 2:
                            return listeners.fn.call(listeners.context, a1), true;
                        case 3:
                            return listeners.fn.call(listeners.context, a1, a2), true;
                        case 4:
                            return listeners.fn.call(listeners.context, a1, a2, a3), true;
                        case 5:
                            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
                        case 6:
                            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
                    }
                    for(i = 1, args = new Array(len - 1); i < len; i++){
                        args[i - 1] = arguments[i];
                    }
                    listeners.fn.apply(listeners.context, args);
                } else {
                    var length = listeners.length, j;
                    for(i = 0; i < length; i++){
                        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);
                        switch(len){
                            case 1:
                                listeners[i].fn.call(listeners[i].context);
                                break;
                            case 2:
                                listeners[i].fn.call(listeners[i].context, a1);
                                break;
                            case 3:
                                listeners[i].fn.call(listeners[i].context, a1, a2);
                                break;
                            case 4:
                                listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                                break;
                            default:
                                if (!args) for(j = 1, args = new Array(len - 1); j < len; j++){
                                    args[j - 1] = arguments[j];
                                }
                                listeners[i].fn.apply(listeners[i].context, args);
                        }
                    }
                }
                return true;
            };
            /**
 * Add a listener for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Function} fn The listener function.
 * @param {Mixed} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @api public
 */ EventEmitter.prototype.on = function on(event, fn, context) {
                var listener = new EE(fn, context || this), evt = prefix ? prefix + event : event;
                if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
                else if (!this._events[evt].fn) this._events[evt].push(listener);
                else this._events[evt] = [
                    this._events[evt],
                    listener
                ];
                return this;
            };
            /**
 * Add a one-time listener for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Function} fn The listener function.
 * @param {Mixed} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @api public
 */ EventEmitter.prototype.once = function once(event, fn, context) {
                var listener = new EE(fn, context || this, true), evt = prefix ? prefix + event : event;
                if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
                else if (!this._events[evt].fn) this._events[evt].push(listener);
                else this._events[evt] = [
                    this._events[evt],
                    listener
                ];
                return this;
            };
            /**
 * Remove the listeners of a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {Mixed} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @api public
 */ EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
                var evt = prefix ? prefix + event : event;
                if (!this._events[evt]) return this;
                if (!fn) {
                    if (--this._eventsCount === 0) this._events = new Events();
                    else delete this._events[evt];
                    return this;
                }
                var listeners = this._events[evt];
                if (listeners.fn) {
                    if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
                        if (--this._eventsCount === 0) this._events = new Events();
                        else delete this._events[evt];
                    }
                } else {
                    for(var i = 0, events = [], length = listeners.length; i < length; i++){
                        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
                            events.push(listeners[i]);
                        }
                    }
                    //
                    // Reset the array, or remove it completely if we have no more listeners.
                    //
                    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
                    else if (--this._eventsCount === 0) this._events = new Events();
                    else delete this._events[evt];
                }
                return this;
            };
            /**
 * Remove all listeners, or those of the specified event.
 *
 * @param {String|Symbol} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @api public
 */ EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
                var evt;
                if (event) {
                    evt = prefix ? prefix + event : event;
                    if (this._events[evt]) {
                        if (--this._eventsCount === 0) this._events = new Events();
                        else delete this._events[evt];
                    }
                } else {
                    this._events = new Events();
                    this._eventsCount = 0;
                }
                return this;
            };
            //
            // Alias methods names because people roll like that.
            //
            EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
            EventEmitter.prototype.addListener = EventEmitter.prototype.on;
            //
            // This function doesn't apply anymore.
            //
            EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
                return this;
            };
            //
            // Expose the prefix.
            //
            EventEmitter.prefixed = prefix;
            //
            // Allow `EventEmitter` to be imported as module namespace.
            //
            EventEmitter.EventEmitter = EventEmitter;
            //
            // Expose the module.
            //
            if ('undefined' !== typeof module1) {
                module1.exports = EventEmitter;
            }
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.matchText = exports.matchSpacing = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj;
            } : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _slicedToArray = function() {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                            _arr.push(_s.value);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally{
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally{
                            if (_d) throw _e;
                        }
                    }
                    return _arr;
                }
                return function(arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _extend2 = __webpack_require__(3);
            var _extend3 = _interopRequireDefault(_extend2);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            var _align = __webpack_require__(36);
            var _background = __webpack_require__(37);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            var _color = __webpack_require__(26);
            var _direction = __webpack_require__(38);
            var _font = __webpack_require__(39);
            var _size = __webpack_require__(40);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var debug = (0, _logger2.default)('quill:clipboard');
            var DOM_KEY = '__ql-matcher';
            var CLIPBOARD_CONFIG = [
                [
                    Node.TEXT_NODE,
                    matchText
                ],
                [
                    Node.TEXT_NODE,
                    matchNewline
                ],
                [
                    'br',
                    matchBreak
                ],
                [
                    Node.ELEMENT_NODE,
                    matchNewline
                ],
                [
                    Node.ELEMENT_NODE,
                    matchBlot
                ],
                [
                    Node.ELEMENT_NODE,
                    matchSpacing
                ],
                [
                    Node.ELEMENT_NODE,
                    matchAttributor
                ],
                [
                    Node.ELEMENT_NODE,
                    matchStyles
                ],
                [
                    'li',
                    matchIndent
                ],
                [
                    'b',
                    matchAlias.bind(matchAlias, 'bold')
                ],
                [
                    'i',
                    matchAlias.bind(matchAlias, 'italic')
                ],
                [
                    'style',
                    matchIgnore
                ]
            ];
            var ATTRIBUTE_ATTRIBUTORS = [
                _align.AlignAttribute,
                _direction.DirectionAttribute
            ].reduce(function(memo, attr) {
                memo[attr.keyName] = attr;
                return memo;
            }, {});
            var STYLE_ATTRIBUTORS = [
                _align.AlignStyle,
                _background.BackgroundStyle,
                _color.ColorStyle,
                _direction.DirectionStyle,
                _font.FontStyle,
                _size.SizeStyle
            ].reduce(function(memo, attr) {
                memo[attr.keyName] = attr;
                return memo;
            }, {});
            var Clipboard = function(_Module) {
                _inherits(Clipboard, _Module);
                function Clipboard(quill, options) {
                    _classCallCheck(this, Clipboard);
                    var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));
                    _this.quill.root.addEventListener('paste', _this.onPaste.bind(_this));
                    _this.container = _this.quill.addContainer('ql-clipboard');
                    _this.container.setAttribute('contenteditable', true);
                    _this.container.setAttribute('tabindex', -1);
                    _this.matchers = [];
                    CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function(_ref) {
                        var _ref2 = _slicedToArray(_ref, 2), selector = _ref2[0], matcher = _ref2[1];
                        if (!options.matchVisual && matcher === matchSpacing) return;
                        _this.addMatcher(selector, matcher);
                    });
                    return _this;
                }
                _createClass(Clipboard, [
                    {
                        key: 'addMatcher',
                        value: function addMatcher(selector, matcher) {
                            this.matchers.push([
                                selector,
                                matcher
                            ]);
                        }
                    },
                    {
                        key: 'convert',
                        value: function convert(html) {
                            if (typeof html === 'string') {
                                this.container.innerHTML = html.replace(/\>\r?\n +\</g, '><'); // Remove spaces between tags
                                return this.convert();
                            }
                            var formats = this.quill.getFormat(this.quill.selection.savedRange.index);
                            if (formats[_code2.default.blotName]) {
                                var text = this.container.innerText;
                                this.container.innerHTML = '';
                                return new _quillDelta2.default().insert(text, _defineProperty({}, _code2.default.blotName, formats[_code2.default.blotName]));
                            }
                            var _prepareMatching = this.prepareMatching(), _prepareMatching2 = _slicedToArray(_prepareMatching, 2), elementMatchers = _prepareMatching2[0], textMatchers = _prepareMatching2[1];
                            var delta = traverse(this.container, elementMatchers, textMatchers);
                            // Remove trailing newline
                            if (deltaEndsWith(delta, '\n') && delta.ops[delta.ops.length - 1].attributes == null) {
                                delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));
                            }
                            debug.log('convert', this.container.innerHTML, delta);
                            this.container.innerHTML = '';
                            return delta;
                        }
                    },
                    {
                        key: 'dangerouslyPasteHTML',
                        value: function dangerouslyPasteHTML(index, html) {
                            var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;
                            if (typeof index === 'string') {
                                this.quill.setContents(this.convert(index), html);
                                this.quill.setSelection(0, _quill2.default.sources.SILENT);
                            } else {
                                var paste = this.convert(html);
                                this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);
                                this.quill.setSelection(index + paste.length(), _quill2.default.sources.SILENT);
                            }
                        }
                    },
                    {
                        key: 'onPaste',
                        value: function onPaste(e) {
                            var _this2 = this;
                            if (e.defaultPrevented || !this.quill.isEnabled()) return;
                            var range = this.quill.getSelection();
                            var delta = new _quillDelta2.default().retain(range.index);
                            var scrollTop = this.quill.scrollingContainer.scrollTop;
                            this.container.focus();
                            this.quill.selection.update(_quill2.default.sources.SILENT);
                            setTimeout(function() {
                                delta = delta.concat(_this2.convert()).delete(range.length);
                                _this2.quill.updateContents(delta, _quill2.default.sources.USER);
                                // range.length contributes to delta.length()
                                _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);
                                _this2.quill.scrollingContainer.scrollTop = scrollTop;
                                _this2.quill.focus();
                            }, 1);
                        }
                    },
                    {
                        key: 'prepareMatching',
                        value: function prepareMatching() {
                            var _this3 = this;
                            var elementMatchers = [], textMatchers = [];
                            this.matchers.forEach(function(pair) {
                                var _pair = _slicedToArray(pair, 2), selector = _pair[0], matcher = _pair[1];
                                switch(selector){
                                    case Node.TEXT_NODE:
                                        textMatchers.push(matcher);
                                        break;
                                    case Node.ELEMENT_NODE:
                                        elementMatchers.push(matcher);
                                        break;
                                    default:
                                        [].forEach.call(_this3.container.querySelectorAll(selector), function(node) {
                                            // TODO use weakmap
                                            node[DOM_KEY] = node[DOM_KEY] || [];
                                            node[DOM_KEY].push(matcher);
                                        });
                                        break;
                                }
                            });
                            return [
                                elementMatchers,
                                textMatchers
                            ];
                        }
                    }
                ]);
                return Clipboard;
            }(_module2.default);
            Clipboard.DEFAULTS = {
                matchers: [],
                matchVisual: true
            };
            function applyFormat(delta, format, value) {
                if ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) === 'object') {
                    return Object.keys(format).reduce(function(delta, key) {
                        return applyFormat(delta, key, format[key]);
                    }, delta);
                } else {
                    return delta.reduce(function(delta, op) {
                        if (op.attributes && op.attributes[format]) {
                            return delta.push(op);
                        } else {
                            return delta.insert(op.insert, (0, _extend3.default)({}, _defineProperty({}, format, value), op.attributes));
                        }
                    }, new _quillDelta2.default());
                }
            }
            function computeStyle(node) {
                if (node.nodeType !== Node.ELEMENT_NODE) return {};
                var DOM_KEY = '__ql-computed-style';
                return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));
            }
            function deltaEndsWith(delta, text) {
                var endText = "";
                for(var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i){
                    var op = delta.ops[i];
                    if (typeof op.insert !== 'string') break;
                    endText = op.insert + endText;
                }
                return endText.slice(-1 * text.length) === text;
            }
            function isLine(node) {
                if (node.childNodes.length === 0) return false; // Exclude embed blocks
                var style = computeStyle(node);
                return [
                    'block',
                    'list-item'
                ].indexOf(style.display) > -1;
            }
            function traverse(node, elementMatchers, textMatchers) {
                // Post-order
                if (node.nodeType === node.TEXT_NODE) {
                    return textMatchers.reduce(function(delta, matcher) {
                        return matcher(node, delta);
                    }, new _quillDelta2.default());
                } else if (node.nodeType === node.ELEMENT_NODE) {
                    return [].reduce.call(node.childNodes || [], function(delta, childNode) {
                        var childrenDelta = traverse(childNode, elementMatchers, textMatchers);
                        if (childNode.nodeType === node.ELEMENT_NODE) {
                            childrenDelta = elementMatchers.reduce(function(childrenDelta, matcher) {
                                return matcher(childNode, childrenDelta);
                            }, childrenDelta);
                            childrenDelta = (childNode[DOM_KEY] || []).reduce(function(childrenDelta, matcher) {
                                return matcher(childNode, childrenDelta);
                            }, childrenDelta);
                        }
                        return delta.concat(childrenDelta);
                    }, new _quillDelta2.default());
                } else {
                    return new _quillDelta2.default();
                }
            }
            function matchAlias(format, node, delta) {
                return applyFormat(delta, format, true);
            }
            function matchAttributor(node, delta) {
                var attributes = _parchment2.default.Attributor.Attribute.keys(node);
                var classes = _parchment2.default.Attributor.Class.keys(node);
                var styles = _parchment2.default.Attributor.Style.keys(node);
                var formats = {};
                attributes.concat(classes).concat(styles).forEach(function(name) {
                    var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);
                    if (attr != null) {
                        formats[attr.attrName] = attr.value(node);
                        if (formats[attr.attrName]) return;
                    }
                    attr = ATTRIBUTE_ATTRIBUTORS[name];
                    if (attr != null && (attr.attrName === name || attr.keyName === name)) {
                        formats[attr.attrName] = attr.value(node) || undefined;
                    }
                    attr = STYLE_ATTRIBUTORS[name];
                    if (attr != null && (attr.attrName === name || attr.keyName === name)) {
                        attr = STYLE_ATTRIBUTORS[name];
                        formats[attr.attrName] = attr.value(node) || undefined;
                    }
                });
                if (Object.keys(formats).length > 0) {
                    delta = applyFormat(delta, formats);
                }
                return delta;
            }
            function matchBlot(node, delta) {
                var match = _parchment2.default.query(node);
                if (match == null) return delta;
                if (match.prototype instanceof _parchment2.default.Embed) {
                    var embed = {};
                    var value = match.value(node);
                    if (value != null) {
                        embed[match.blotName] = value;
                        delta = new _quillDelta2.default().insert(embed, match.formats(node));
                    }
                } else if (typeof match.formats === 'function') {
                    delta = applyFormat(delta, match.blotName, match.formats(node));
                }
                return delta;
            }
            function matchBreak(node, delta) {
                if (!deltaEndsWith(delta, '\n')) {
                    delta.insert('\n');
                }
                return delta;
            }
            function matchIgnore() {
                return new _quillDelta2.default();
            }
            function matchIndent(node, delta) {
                var match = _parchment2.default.query(node);
                if (match == null || match.blotName !== 'list-item' || !deltaEndsWith(delta, '\n')) {
                    return delta;
                }
                var indent = -1, parent = node.parentNode;
                while(!parent.classList.contains('ql-clipboard')){
                    if ((_parchment2.default.query(parent) || {}).blotName === 'list') {
                        indent += 1;
                    }
                    parent = parent.parentNode;
                }
                if (indent <= 0) return delta;
                return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, {
                    indent: indent
                }));
            }
            function matchNewline(node, delta) {
                if (!deltaEndsWith(delta, '\n')) {
                    if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {
                        delta.insert('\n');
                    }
                }
                return delta;
            }
            function matchSpacing(node, delta) {
                if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\n\n')) {
                    var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);
                    if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {
                        delta.insert('\n');
                    }
                }
                return delta;
            }
            function matchStyles(node, delta) {
                var formats = {};
                var style = node.style || {};
                if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {
                    formats.italic = true;
                }
                if (style.fontWeight && (computeStyle(node).fontWeight.startsWith('bold') || parseInt(computeStyle(node).fontWeight) >= 700)) {
                    formats.bold = true;
                }
                if (Object.keys(formats).length > 0) {
                    delta = applyFormat(delta, formats);
                }
                if (parseFloat(style.textIndent || 0) > 0) {
                    // Could be 0.5in
                    delta = new _quillDelta2.default().insert('\t').concat(delta);
                }
                return delta;
            }
            function matchText(node, delta) {
                var text = node.data;
                // Word represents empty line with <o:p>&nbsp;</o:p>
                if (node.parentNode.tagName === 'O:P') {
                    return delta.insert(text.trim());
                }
                if (text.trim().length === 0 && node.parentNode.classList.contains('ql-clipboard')) {
                    return delta;
                }
                if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {
                    // eslint-disable-next-line func-style
                    var replacer = function replacer(collapse, match) {
                        match = match.replace(/[^\u00a0]/g, ''); // \u00a0 is nbsp;
                        return match.length < 1 && collapse ? ' ' : match;
                    };
                    text = text.replace(/\r\n/g, ' ').replace(/\n/g, ' ');
                    text = text.replace(/\s\s+/g, replacer.bind(replacer, true)); // collapse whitespace
                    if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {
                        text = text.replace(/^\s+/, replacer.bind(replacer, false));
                    }
                    if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {
                        text = text.replace(/\s+$/, replacer.bind(replacer, false));
                    }
                }
                return delta.insert(text);
            }
            exports.default = Clipboard;
            exports.matchAttributor = matchAttributor;
            exports.matchBlot = matchBlot;
            exports.matchNewline = matchNewline;
            exports.matchSpacing = matchSpacing;
            exports.matchText = matchText;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Bold = function(_Inline) {
                _inherits(Bold, _Inline);
                function Bold() {
                    _classCallCheck(this, Bold);
                    return _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));
                }
                _createClass(Bold, [
                    {
                        key: 'optimize',
                        value: function optimize(context) {
                            _get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), 'optimize', this).call(this, context);
                            if (this.domNode.tagName !== this.statics.tagName[0]) {
                                this.replaceWith(this.statics.blotName);
                            }
                        }
                    }
                ], [
                    {
                        key: 'create',
                        value: function create() {
                            return _get(Bold.__proto__ || Object.getPrototypeOf(Bold), 'create', this).call(this);
                        }
                    },
                    {
                        key: 'formats',
                        value: function formats() {
                            return true;
                        }
                    }
                ]);
                return Bold;
            }(_inline2.default);
            Bold.blotName = 'bold';
            Bold.tagName = [
                'STRONG',
                'B'
            ];
            exports.default = Bold;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.addControls = exports.default = undefined;
            var _slicedToArray = function() {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                            _arr.push(_s.value);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally{
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally{
                            if (_d) throw _e;
                        }
                    }
                    return _arr;
                }
                return function(arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var debug = (0, _logger2.default)('quill:toolbar');
            var Toolbar = function(_Module) {
                _inherits(Toolbar, _Module);
                function Toolbar(quill, options) {
                    _classCallCheck(this, Toolbar);
                    var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));
                    if (Array.isArray(_this.options.container)) {
                        var container = document.createElement('div');
                        addControls(container, _this.options.container);
                        quill.container.parentNode.insertBefore(container, quill.container);
                        _this.container = container;
                    } else if (typeof _this.options.container === 'string') {
                        _this.container = document.querySelector(_this.options.container);
                    } else {
                        _this.container = _this.options.container;
                    }
                    if (!(_this.container instanceof HTMLElement)) {
                        var _ret;
                        return _ret = debug.error('Container required for toolbar', _this.options), _possibleConstructorReturn(_this, _ret);
                    }
                    _this.container.classList.add('ql-toolbar');
                    _this.controls = [];
                    _this.handlers = {};
                    Object.keys(_this.options.handlers).forEach(function(format) {
                        _this.addHandler(format, _this.options.handlers[format]);
                    });
                    [].forEach.call(_this.container.querySelectorAll('button, select'), function(input) {
                        _this.attach(input);
                    });
                    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function(type, range) {
                        if (type === _quill2.default.events.SELECTION_CHANGE) {
                            _this.update(range);
                        }
                    });
                    _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function() {
                        var _this$quill$selection = _this.quill.selection.getRange(), _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1), range = _this$quill$selection2[0]; // quill.getSelection triggers update
                        _this.update(range);
                    });
                    return _this;
                }
                _createClass(Toolbar, [
                    {
                        key: 'addHandler',
                        value: function addHandler(format, handler) {
                            this.handlers[format] = handler;
                        }
                    },
                    {
                        key: 'attach',
                        value: function attach(input) {
                            var _this2 = this;
                            var format = [].find.call(input.classList, function(className) {
                                return className.indexOf('ql-') === 0;
                            });
                            if (!format) return;
                            format = format.slice('ql-'.length);
                            if (input.tagName === 'BUTTON') {
                                input.setAttribute('type', 'button');
                            }
                            if (this.handlers[format] == null) {
                                if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {
                                    debug.warn('ignoring attaching to disabled format', format, input);
                                    return;
                                }
                                if (_parchment2.default.query(format) == null) {
                                    debug.warn('ignoring attaching to nonexistent format', format, input);
                                    return;
                                }
                            }
                            var eventName = input.tagName === 'SELECT' ? 'change' : 'click';
                            input.addEventListener(eventName, function(e) {
                                var value = void 0;
                                if (input.tagName === 'SELECT') {
                                    if (input.selectedIndex < 0) return;
                                    var selected = input.options[input.selectedIndex];
                                    if (selected.hasAttribute('selected')) {
                                        value = false;
                                    } else {
                                        value = selected.value || false;
                                    }
                                } else {
                                    if (input.classList.contains('ql-active')) {
                                        value = false;
                                    } else {
                                        value = input.value || !input.hasAttribute('value');
                                    }
                                    e.preventDefault();
                                }
                                _this2.quill.focus();
                                var _quill$selection$getR = _this2.quill.selection.getRange(), _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1), range = _quill$selection$getR2[0];
                                if (_this2.handlers[format] != null) {
                                    _this2.handlers[format].call(_this2, value);
                                } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {
                                    value = prompt('Enter ' + format);
                                    if (!value) return;
                                    _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);
                                } else {
                                    _this2.quill.format(format, value, _quill2.default.sources.USER);
                                }
                                _this2.update(range);
                            });
                            // TODO use weakmap
                            this.controls.push([
                                format,
                                input
                            ]);
                        }
                    },
                    {
                        key: 'update',
                        value: function update(range) {
                            var formats = range == null ? {} : this.quill.getFormat(range);
                            this.controls.forEach(function(pair) {
                                var _pair = _slicedToArray(pair, 2), format = _pair[0], input = _pair[1];
                                if (input.tagName === 'SELECT') {
                                    var option = void 0;
                                    if (range == null) {
                                        option = null;
                                    } else if (formats[format] == null) {
                                        option = input.querySelector('option[selected]');
                                    } else if (!Array.isArray(formats[format])) {
                                        var value = formats[format];
                                        if (typeof value === 'string') {
                                            value = value.replace(/\"/g, '\\"');
                                        }
                                        option = input.querySelector('option[value="' + value + '"]');
                                    }
                                    if (option == null) {
                                        input.value = ''; // TODO make configurable?
                                        input.selectedIndex = -1;
                                    } else {
                                        option.selected = true;
                                    }
                                } else {
                                    if (range == null) {
                                        input.classList.remove('ql-active');
                                    } else if (input.hasAttribute('value')) {
                                        // both being null should match (default values)
                                        // '1' should match with 1 (headers)
                                        var isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');
                                        input.classList.toggle('ql-active', isActive);
                                    } else {
                                        input.classList.toggle('ql-active', formats[format] != null);
                                    }
                                }
                            });
                        }
                    }
                ]);
                return Toolbar;
            }(_module2.default);
            Toolbar.DEFAULTS = {};
            function addButton(container, format, value) {
                var input = document.createElement('button');
                input.setAttribute('type', 'button');
                input.classList.add('ql-' + format);
                if (value != null) {
                    input.value = value;
                }
                container.appendChild(input);
            }
            function addControls(container, groups) {
                if (!Array.isArray(groups[0])) {
                    groups = [
                        groups
                    ];
                }
                groups.forEach(function(controls) {
                    var group = document.createElement('span');
                    group.classList.add('ql-formats');
                    controls.forEach(function(control) {
                        if (typeof control === 'string') {
                            addButton(group, control);
                        } else {
                            var format = Object.keys(control)[0];
                            var value = control[format];
                            if (Array.isArray(value)) {
                                addSelect(group, format, value);
                            } else {
                                addButton(group, format, value);
                            }
                        }
                    });
                    container.appendChild(group);
                });
            }
            function addSelect(container, format, values) {
                var input = document.createElement('select');
                input.classList.add('ql-' + format);
                values.forEach(function(value) {
                    var option = document.createElement('option');
                    if (value !== false) {
                        option.setAttribute('value', value);
                    } else {
                        option.setAttribute('selected', 'selected');
                    }
                    input.appendChild(option);
                });
                container.appendChild(input);
            }
            Toolbar.DEFAULTS = {
                container: null,
                handlers: {
                    clean: function clean() {
                        var _this3 = this;
                        var range = this.quill.getSelection();
                        if (range == null) return;
                        if (range.length == 0) {
                            var formats = this.quill.getFormat();
                            Object.keys(formats).forEach(function(name) {
                                // Clean functionality in existing apps only clean inline formats
                                if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {
                                    _this3.quill.format(name, false);
                                }
                            });
                        } else {
                            this.quill.removeFormat(range, _quill2.default.sources.USER);
                        }
                    },
                    direction: function direction(value) {
                        var align = this.quill.getFormat()['align'];
                        if (value === 'rtl' && align == null) {
                            this.quill.format('align', 'right', _quill2.default.sources.USER);
                        } else if (!value && align === 'right') {
                            this.quill.format('align', false, _quill2.default.sources.USER);
                        }
                        this.quill.format('direction', value, _quill2.default.sources.USER);
                    },
                    indent: function indent(value) {
                        var range = this.quill.getSelection();
                        var formats = this.quill.getFormat(range);
                        var indent = parseInt(formats.indent || 0);
                        if (value === '+1' || value === '-1') {
                            var modifier = value === '+1' ? 1 : -1;
                            if (formats.direction === 'rtl') modifier *= -1;
                            this.quill.format('indent', indent + modifier, _quill2.default.sources.USER);
                        }
                    },
                    link: function link(value) {
                        if (value === true) {
                            value = prompt('Enter link URL:');
                        }
                        this.quill.format('link', value, _quill2.default.sources.USER);
                    },
                    list: function list(value) {
                        var range = this.quill.getSelection();
                        var formats = this.quill.getFormat(range);
                        if (value === 'check') {
                            if (formats['list'] === 'checked' || formats['list'] === 'unchecked') {
                                this.quill.format('list', false, _quill2.default.sources.USER);
                            } else {
                                this.quill.format('list', 'unchecked', _quill2.default.sources.USER);
                            }
                        } else {
                            this.quill.format('list', value, _quill2.default.sources.USER);
                        }
                    }
                }
            };
            exports.default = Toolbar;
            exports.addControls = addControls;
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"></polyline> <polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>";
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _picker = __webpack_require__(28);
            var _picker2 = _interopRequireDefault(_picker);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ColorPicker = function(_Picker) {
                _inherits(ColorPicker, _Picker);
                function ColorPicker(select, label) {
                    _classCallCheck(this, ColorPicker);
                    var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));
                    _this.label.innerHTML = label;
                    _this.container.classList.add('ql-color-picker');
                    [].slice.call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7).forEach(function(item) {
                        item.classList.add('ql-primary');
                    });
                    return _this;
                }
                _createClass(ColorPicker, [
                    {
                        key: 'buildItem',
                        value: function buildItem(option) {
                            var item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'buildItem', this).call(this, option);
                            item.style.backgroundColor = option.getAttribute('value') || '';
                            return item;
                        }
                    },
                    {
                        key: 'selectItem',
                        value: function selectItem(item, trigger) {
                            _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'selectItem', this).call(this, item, trigger);
                            var colorLabel = this.label.querySelector('.ql-color-label');
                            var value = item ? item.getAttribute('data-value') || '' : '';
                            if (colorLabel) {
                                if (colorLabel.tagName === 'line') {
                                    colorLabel.style.stroke = value;
                                } else {
                                    colorLabel.style.fill = value;
                                }
                            }
                        }
                    }
                ]);
                return ColorPicker;
            }(_picker2.default);
            exports.default = ColorPicker;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _picker = __webpack_require__(28);
            var _picker2 = _interopRequireDefault(_picker);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var IconPicker = function(_Picker) {
                _inherits(IconPicker, _Picker);
                function IconPicker(select, icons) {
                    _classCallCheck(this, IconPicker);
                    var _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));
                    _this.container.classList.add('ql-icon-picker');
                    [].forEach.call(_this.container.querySelectorAll('.ql-picker-item'), function(item) {
                        item.innerHTML = icons[item.getAttribute('data-value') || ''];
                    });
                    _this.defaultItem = _this.container.querySelector('.ql-selected');
                    _this.selectItem(_this.defaultItem);
                    return _this;
                }
                _createClass(IconPicker, [
                    {
                        key: 'selectItem',
                        value: function selectItem(item, trigger) {
                            _get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), 'selectItem', this).call(this, item, trigger);
                            item = item || this.defaultItem;
                            this.label.innerHTML = item.innerHTML;
                        }
                    }
                ]);
                return IconPicker;
            }(_picker2.default);
            exports.default = IconPicker;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            var Tooltip = function() {
                function Tooltip(quill, boundsContainer) {
                    var _this = this;
                    _classCallCheck(this, Tooltip);
                    this.quill = quill;
                    this.boundsContainer = boundsContainer || document.body;
                    this.root = quill.addContainer('ql-tooltip');
                    this.root.innerHTML = this.constructor.TEMPLATE;
                    if (this.quill.root === this.quill.scrollingContainer) {
                        this.quill.root.addEventListener('scroll', function() {
                            _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + 'px';
                        });
                    }
                    this.hide();
                }
                _createClass(Tooltip, [
                    {
                        key: 'hide',
                        value: function hide() {
                            this.root.classList.add('ql-hidden');
                        }
                    },
                    {
                        key: 'position',
                        value: function position(reference) {
                            var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;
                            // root.scrollTop should be 0 if scrollContainer !== root
                            var top = reference.bottom + this.quill.root.scrollTop;
                            this.root.style.left = left + 'px';
                            this.root.style.top = top + 'px';
                            this.root.classList.remove('ql-flip');
                            var containerBounds = this.boundsContainer.getBoundingClientRect();
                            var rootBounds = this.root.getBoundingClientRect();
                            var shift = 0;
                            if (rootBounds.right > containerBounds.right) {
                                shift = containerBounds.right - rootBounds.right;
                                this.root.style.left = left + shift + 'px';
                            }
                            if (rootBounds.left < containerBounds.left) {
                                shift = containerBounds.left - rootBounds.left;
                                this.root.style.left = left + shift + 'px';
                            }
                            if (rootBounds.bottom > containerBounds.bottom) {
                                var height = rootBounds.bottom - rootBounds.top;
                                var verticalShift = reference.bottom - reference.top + height;
                                this.root.style.top = top - verticalShift + 'px';
                                this.root.classList.add('ql-flip');
                            }
                            return shift;
                        }
                    },
                    {
                        key: 'show',
                        value: function show() {
                            this.root.classList.remove('ql-editing');
                            this.root.classList.remove('ql-hidden');
                        }
                    }
                ]);
                return Tooltip;
            }();
            exports.default = Tooltip;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _slicedToArray = function() {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                            _arr.push(_s.value);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally{
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally{
                            if (_d) throw _e;
                        }
                    }
                    return _arr;
                }
                return function(arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _emitter = __webpack_require__(8);
            var _emitter2 = _interopRequireDefault(_emitter);
            var _base = __webpack_require__(43);
            var _base2 = _interopRequireDefault(_base);
            var _link = __webpack_require__(27);
            var _link2 = _interopRequireDefault(_link);
            var _selection = __webpack_require__(15);
            var _icons = __webpack_require__(41);
            var _icons2 = _interopRequireDefault(_icons);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var TOOLBAR_CONFIG = [
                [
                    {
                        header: [
                            '1',
                            '2',
                            '3',
                            false
                        ]
                    }
                ],
                [
                    'bold',
                    'italic',
                    'underline',
                    'link'
                ],
                [
                    {
                        list: 'ordered'
                    },
                    {
                        list: 'bullet'
                    }
                ],
                [
                    'clean'
                ]
            ];
            var SnowTheme = function(_BaseTheme) {
                _inherits(SnowTheme, _BaseTheme);
                function SnowTheme(quill, options) {
                    _classCallCheck(this, SnowTheme);
                    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
                        options.modules.toolbar.container = TOOLBAR_CONFIG;
                    }
                    var _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));
                    _this.quill.container.classList.add('ql-snow');
                    return _this;
                }
                _createClass(SnowTheme, [
                    {
                        key: 'extendToolbar',
                        value: function extendToolbar(toolbar) {
                            toolbar.container.classList.add('ql-snow');
                            this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
                            this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
                            this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
                            if (toolbar.container.querySelector('.ql-link')) {
                                this.quill.keyboard.addBinding({
                                    key: 'K',
                                    shortKey: true
                                }, function(range, context) {
                                    toolbar.handlers['link'].call(toolbar, !context.format.link);
                                });
                            }
                        }
                    }
                ]);
                return SnowTheme;
            }(_base2.default);
            SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
                modules: {
                    toolbar: {
                        handlers: {
                            link: function link(value) {
                                if (value) {
                                    var range = this.quill.getSelection();
                                    if (range == null || range.length == 0) return;
                                    var preview = this.quill.getText(range);
                                    if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
                                        preview = 'mailto:' + preview;
                                    }
                                    var tooltip = this.quill.theme.tooltip;
                                    tooltip.edit('link', preview);
                                } else {
                                    this.quill.format('link', false);
                                }
                            }
                        }
                    }
                }
            });
            var SnowTooltip = function(_BaseTooltip) {
                _inherits(SnowTooltip, _BaseTooltip);
                function SnowTooltip(quill, bounds) {
                    _classCallCheck(this, SnowTooltip);
                    var _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));
                    _this2.preview = _this2.root.querySelector('a.ql-preview');
                    return _this2;
                }
                _createClass(SnowTooltip, [
                    {
                        key: 'listen',
                        value: function listen() {
                            var _this3 = this;
                            _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'listen', this).call(this);
                            this.root.querySelector('a.ql-action').addEventListener('click', function(event) {
                                if (_this3.root.classList.contains('ql-editing')) {
                                    _this3.save();
                                } else {
                                    _this3.edit('link', _this3.preview.textContent);
                                }
                                event.preventDefault();
                            });
                            this.root.querySelector('a.ql-remove').addEventListener('click', function(event) {
                                if (_this3.linkRange != null) {
                                    var range = _this3.linkRange;
                                    _this3.restoreFocus();
                                    _this3.quill.formatText(range, 'link', false, _emitter2.default.sources.USER);
                                    delete _this3.linkRange;
                                }
                                event.preventDefault();
                                _this3.hide();
                            });
                            this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function(range, oldRange, source) {
                                if (range == null) return;
                                if (range.length === 0 && source === _emitter2.default.sources.USER) {
                                    var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index), _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2), link = _quill$scroll$descend2[0], offset = _quill$scroll$descend2[1];
                                    if (link != null) {
                                        _this3.linkRange = new _selection.Range(range.index - offset, link.length());
                                        var preview = _link2.default.formats(link.domNode);
                                        _this3.preview.textContent = preview;
                                        _this3.preview.setAttribute('href', preview);
                                        _this3.show();
                                        _this3.position(_this3.quill.getBounds(_this3.linkRange));
                                        return;
                                    }
                                } else {
                                    delete _this3.linkRange;
                                }
                                _this3.hide();
                            });
                        }
                    },
                    {
                        key: 'show',
                        value: function show() {
                            _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'show', this).call(this);
                            this.root.removeAttribute('data-mode');
                        }
                    }
                ]);
                return SnowTooltip;
            }(_base.BaseTooltip);
            SnowTooltip.TEMPLATE = [
                '<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>',
                '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">',
                '<a class="ql-action"></a>',
                '<a class="ql-remove"></a>'
            ].join('');
            exports.default = SnowTheme;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _core = __webpack_require__(29);
            var _core2 = _interopRequireDefault(_core);
            var _align = __webpack_require__(36);
            var _direction = __webpack_require__(38);
            var _indent = __webpack_require__(64);
            var _blockquote = __webpack_require__(65);
            var _blockquote2 = _interopRequireDefault(_blockquote);
            var _header = __webpack_require__(66);
            var _header2 = _interopRequireDefault(_header);
            var _list = __webpack_require__(67);
            var _list2 = _interopRequireDefault(_list);
            var _background = __webpack_require__(37);
            var _color = __webpack_require__(26);
            var _font = __webpack_require__(39);
            var _size = __webpack_require__(40);
            var _bold = __webpack_require__(56);
            var _bold2 = _interopRequireDefault(_bold);
            var _italic = __webpack_require__(68);
            var _italic2 = _interopRequireDefault(_italic);
            var _link = __webpack_require__(27);
            var _link2 = _interopRequireDefault(_link);
            var _script = __webpack_require__(69);
            var _script2 = _interopRequireDefault(_script);
            var _strike = __webpack_require__(70);
            var _strike2 = _interopRequireDefault(_strike);
            var _underline = __webpack_require__(71);
            var _underline2 = _interopRequireDefault(_underline);
            var _image = __webpack_require__(72);
            var _image2 = _interopRequireDefault(_image);
            var _video = __webpack_require__(73);
            var _video2 = _interopRequireDefault(_video);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            var _formula = __webpack_require__(74);
            var _formula2 = _interopRequireDefault(_formula);
            var _syntax = __webpack_require__(75);
            var _syntax2 = _interopRequireDefault(_syntax);
            var _toolbar = __webpack_require__(57);
            var _toolbar2 = _interopRequireDefault(_toolbar);
            var _icons = __webpack_require__(41);
            var _icons2 = _interopRequireDefault(_icons);
            var _picker = __webpack_require__(28);
            var _picker2 = _interopRequireDefault(_picker);
            var _colorPicker = __webpack_require__(59);
            var _colorPicker2 = _interopRequireDefault(_colorPicker);
            var _iconPicker = __webpack_require__(60);
            var _iconPicker2 = _interopRequireDefault(_iconPicker);
            var _tooltip = __webpack_require__(61);
            var _tooltip2 = _interopRequireDefault(_tooltip);
            var _bubble = __webpack_require__(108);
            var _bubble2 = _interopRequireDefault(_bubble);
            var _snow = __webpack_require__(62);
            var _snow2 = _interopRequireDefault(_snow);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            _core2.default.register({
                'attributors/attribute/direction': _direction.DirectionAttribute,
                'attributors/class/align': _align.AlignClass,
                'attributors/class/background': _background.BackgroundClass,
                'attributors/class/color': _color.ColorClass,
                'attributors/class/direction': _direction.DirectionClass,
                'attributors/class/font': _font.FontClass,
                'attributors/class/size': _size.SizeClass,
                'attributors/style/align': _align.AlignStyle,
                'attributors/style/background': _background.BackgroundStyle,
                'attributors/style/color': _color.ColorStyle,
                'attributors/style/direction': _direction.DirectionStyle,
                'attributors/style/font': _font.FontStyle,
                'attributors/style/size': _size.SizeStyle
            }, true);
            _core2.default.register({
                'formats/align': _align.AlignClass,
                'formats/direction': _direction.DirectionClass,
                'formats/indent': _indent.IndentClass,
                'formats/background': _background.BackgroundStyle,
                'formats/color': _color.ColorStyle,
                'formats/font': _font.FontClass,
                'formats/size': _size.SizeClass,
                'formats/blockquote': _blockquote2.default,
                'formats/code-block': _code2.default,
                'formats/header': _header2.default,
                'formats/list': _list2.default,
                'formats/bold': _bold2.default,
                'formats/code': _code.Code,
                'formats/italic': _italic2.default,
                'formats/link': _link2.default,
                'formats/script': _script2.default,
                'formats/strike': _strike2.default,
                'formats/underline': _underline2.default,
                'formats/image': _image2.default,
                'formats/video': _video2.default,
                'formats/list/item': _list.ListItem,
                'modules/formula': _formula2.default,
                'modules/syntax': _syntax2.default,
                'modules/toolbar': _toolbar2.default,
                'themes/bubble': _bubble2.default,
                'themes/snow': _snow2.default,
                'ui/icons': _icons2.default,
                'ui/picker': _picker2.default,
                'ui/icon-picker': _iconPicker2.default,
                'ui/color-picker': _colorPicker2.default,
                'ui/tooltip': _tooltip2.default
            }, true);
            exports.default = _core2.default;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.IndentClass = undefined;
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var IdentAttributor = function(_Parchment$Attributor) {
                _inherits(IdentAttributor, _Parchment$Attributor);
                function IdentAttributor() {
                    _classCallCheck(this, IdentAttributor);
                    return _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));
                }
                _createClass(IdentAttributor, [
                    {
                        key: 'add',
                        value: function add(node, value) {
                            if (value === '+1' || value === '-1') {
                                var indent = this.value(node) || 0;
                                value = value === '+1' ? indent + 1 : indent - 1;
                            }
                            if (value === 0) {
                                this.remove(node);
                                return true;
                            } else {
                                return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'add', this).call(this, node, value);
                            }
                        }
                    },
                    {
                        key: 'canAdd',
                        value: function canAdd(node, value) {
                            return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, parseInt(value));
                        }
                    },
                    {
                        key: 'value',
                        value: function value(node) {
                            return parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'value', this).call(this, node)) || undefined; // Don't return NaN
                        }
                    }
                ]);
                return IdentAttributor;
            }(_parchment2.default.Attributor.Class);
            var IndentClass = new IdentAttributor('indent', 'ql-indent', {
                scope: _parchment2.default.Scope.BLOCK,
                whitelist: [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ]
            });
            exports.IndentClass = IndentClass;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Blockquote = function(_Block) {
                _inherits(Blockquote, _Block);
                function Blockquote() {
                    _classCallCheck(this, Blockquote);
                    return _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));
                }
                return Blockquote;
            }(_block2.default);
            Blockquote.blotName = 'blockquote';
            Blockquote.tagName = 'blockquote';
            exports.default = Blockquote;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Header = function(_Block) {
                _inherits(Header, _Block);
                function Header() {
                    _classCallCheck(this, Header);
                    return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
                }
                _createClass(Header, null, [
                    {
                        key: 'formats',
                        value: function formats(domNode) {
                            return this.tagName.indexOf(domNode.tagName) + 1;
                        }
                    }
                ]);
                return Header;
            }(_block2.default);
            Header.blotName = 'header';
            Header.tagName = [
                'H1',
                'H2',
                'H3',
                'H4',
                'H5',
                'H6'
            ];
            exports.default = Header;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.ListItem = undefined;
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _container = __webpack_require__(25);
            var _container2 = _interopRequireDefault(_container);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ListItem = function(_Block) {
                _inherits(ListItem, _Block);
                function ListItem() {
                    _classCallCheck(this, ListItem);
                    return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
                }
                _createClass(ListItem, [
                    {
                        key: 'format',
                        value: function format(name, value) {
                            if (name === List.blotName && !value) {
                                this.replaceWith(_parchment2.default.create(this.statics.scope));
                            } else {
                                _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'format', this).call(this, name, value);
                            }
                        }
                    },
                    {
                        key: 'remove',
                        value: function remove() {
                            if (this.prev == null && this.next == null) {
                                this.parent.remove();
                            } else {
                                _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'remove', this).call(this);
                            }
                        }
                    },
                    {
                        key: 'replaceWith',
                        value: function replaceWith(name, value) {
                            this.parent.isolate(this.offset(this.parent), this.length());
                            if (name === this.parent.statics.blotName) {
                                this.parent.replaceWith(name, value);
                                return this;
                            } else {
                                this.parent.unwrap();
                                return _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'replaceWith', this).call(this, name, value);
                            }
                        }
                    }
                ], [
                    {
                        key: 'formats',
                        value: function formats(domNode) {
                            return domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), 'formats', this).call(this, domNode);
                        }
                    }
                ]);
                return ListItem;
            }(_block2.default);
            ListItem.blotName = 'list-item';
            ListItem.tagName = 'LI';
            var List = function(_Container) {
                _inherits(List, _Container);
                _createClass(List, null, [
                    {
                        key: 'create',
                        value: function create(value) {
                            var tagName = value === 'ordered' ? 'OL' : 'UL';
                            var node = _get(List.__proto__ || Object.getPrototypeOf(List), 'create', this).call(this, tagName);
                            if (value === 'checked' || value === 'unchecked') {
                                node.setAttribute('data-checked', value === 'checked');
                            }
                            return node;
                        }
                    },
                    {
                        key: 'formats',
                        value: function formats(domNode) {
                            if (domNode.tagName === 'OL') return 'ordered';
                            if (domNode.tagName === 'UL') {
                                if (domNode.hasAttribute('data-checked')) {
                                    return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';
                                } else {
                                    return 'bullet';
                                }
                            }
                            return undefined;
                        }
                    }
                ]);
                function List(domNode) {
                    _classCallCheck(this, List);
                    var _this2 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, domNode));
                    var listEventHandler = function listEventHandler(e) {
                        if (e.target.parentNode !== domNode) return;
                        var format = _this2.statics.formats(domNode);
                        var blot = _parchment2.default.find(e.target);
                        if (format === 'checked') {
                            blot.format('list', 'unchecked');
                        } else if (format === 'unchecked') {
                            blot.format('list', 'checked');
                        }
                    };
                    domNode.addEventListener('touchstart', listEventHandler);
                    domNode.addEventListener('mousedown', listEventHandler);
                    return _this2;
                }
                _createClass(List, [
                    {
                        key: 'format',
                        value: function format(name, value) {
                            if (this.children.length > 0) {
                                this.children.tail.format(name, value);
                            }
                        }
                    },
                    {
                        key: 'formats',
                        value: function formats() {
                            // We don't inherit from FormatBlot
                            return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
                        }
                    },
                    {
                        key: 'insertBefore',
                        value: function insertBefore(blot, ref) {
                            if (blot instanceof ListItem) {
                                _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'insertBefore', this).call(this, blot, ref);
                            } else {
                                var index = ref == null ? this.length() : ref.offset(this);
                                var after = this.split(index);
                                after.parent.insertBefore(blot, after);
                            }
                        }
                    },
                    {
                        key: 'optimize',
                        value: function optimize(context) {
                            _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'optimize', this).call(this, context);
                            var next = this.next;
                            if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {
                                next.moveChildren(this);
                                next.remove();
                            }
                        }
                    },
                    {
                        key: 'replace',
                        value: function replace(target) {
                            if (target.statics.blotName !== this.statics.blotName) {
                                var item = _parchment2.default.create(this.statics.defaultChild);
                                target.moveChildren(item);
                                this.appendChild(item);
                            }
                            _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'replace', this).call(this, target);
                        }
                    }
                ]);
                return List;
            }(_container2.default);
            List.blotName = 'list';
            List.scope = _parchment2.default.Scope.BLOCK_BLOT;
            List.tagName = [
                'OL',
                'UL'
            ];
            List.defaultChild = 'list-item';
            List.allowedChildren = [
                ListItem
            ];
            exports.ListItem = ListItem;
            exports.default = List;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _bold = __webpack_require__(56);
            var _bold2 = _interopRequireDefault(_bold);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Italic = function(_Bold) {
                _inherits(Italic, _Bold);
                function Italic() {
                    _classCallCheck(this, Italic);
                    return _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));
                }
                return Italic;
            }(_bold2.default);
            Italic.blotName = 'italic';
            Italic.tagName = [
                'EM',
                'I'
            ];
            exports.default = Italic;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Script = function(_Inline) {
                _inherits(Script, _Inline);
                function Script() {
                    _classCallCheck(this, Script);
                    return _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));
                }
                _createClass(Script, null, [
                    {
                        key: 'create',
                        value: function create(value) {
                            if (value === 'super') {
                                return document.createElement('sup');
                            } else if (value === 'sub') {
                                return document.createElement('sub');
                            } else {
                                return _get(Script.__proto__ || Object.getPrototypeOf(Script), 'create', this).call(this, value);
                            }
                        }
                    },
                    {
                        key: 'formats',
                        value: function formats(domNode) {
                            if (domNode.tagName === 'SUB') return 'sub';
                            if (domNode.tagName === 'SUP') return 'super';
                            return undefined;
                        }
                    }
                ]);
                return Script;
            }(_inline2.default);
            Script.blotName = 'script';
            Script.tagName = [
                'SUB',
                'SUP'
            ];
            exports.default = Script;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Strike = function(_Inline) {
                _inherits(Strike, _Inline);
                function Strike() {
                    _classCallCheck(this, Strike);
                    return _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));
                }
                return Strike;
            }(_inline2.default);
            Strike.blotName = 'strike';
            Strike.tagName = 'S';
            exports.default = Strike;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Underline = function(_Inline) {
                _inherits(Underline, _Inline);
                function Underline() {
                    _classCallCheck(this, Underline);
                    return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));
                }
                return Underline;
            }(_inline2.default);
            Underline.blotName = 'underline';
            Underline.tagName = 'U';
            exports.default = Underline;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _link = __webpack_require__(27);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ATTRIBUTES = [
                'alt',
                'height',
                'width'
            ];
            var Image = function(_Parchment$Embed) {
                _inherits(Image, _Parchment$Embed);
                function Image() {
                    _classCallCheck(this, Image);
                    return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));
                }
                _createClass(Image, [
                    {
                        key: 'format',
                        value: function format(name, value) {
                            if (ATTRIBUTES.indexOf(name) > -1) {
                                if (value) {
                                    this.domNode.setAttribute(name, value);
                                } else {
                                    this.domNode.removeAttribute(name);
                                }
                            } else {
                                _get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);
                            }
                        }
                    }
                ], [
                    {
                        key: 'create',
                        value: function create(value) {
                            var node = _get(Image.__proto__ || Object.getPrototypeOf(Image), 'create', this).call(this, value);
                            if (typeof value === 'string') {
                                node.setAttribute('src', this.sanitize(value));
                            }
                            return node;
                        }
                    },
                    {
                        key: 'formats',
                        value: function formats(domNode) {
                            return ATTRIBUTES.reduce(function(formats, attribute) {
                                if (domNode.hasAttribute(attribute)) {
                                    formats[attribute] = domNode.getAttribute(attribute);
                                }
                                return formats;
                            }, {});
                        }
                    },
                    {
                        key: 'match',
                        value: function match(url) {
                            return /\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url);
                        }
                    },
                    {
                        key: 'sanitize',
                        value: function sanitize(url) {
                            return (0, _link.sanitize)(url, [
                                'http',
                                'https',
                                'data'
                            ]) ? url : '//:0';
                        }
                    },
                    {
                        key: 'value',
                        value: function value(domNode) {
                            return domNode.getAttribute('src');
                        }
                    }
                ]);
                return Image;
            }(_parchment2.default.Embed);
            Image.blotName = 'image';
            Image.tagName = 'IMG';
            exports.default = Image;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _block = __webpack_require__(4);
            var _link = __webpack_require__(27);
            var _link2 = _interopRequireDefault(_link);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ATTRIBUTES = [
                'height',
                'width'
            ];
            var Video = function(_BlockEmbed) {
                _inherits(Video, _BlockEmbed);
                function Video() {
                    _classCallCheck(this, Video);
                    return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));
                }
                _createClass(Video, [
                    {
                        key: 'format',
                        value: function format(name, value) {
                            if (ATTRIBUTES.indexOf(name) > -1) {
                                if (value) {
                                    this.domNode.setAttribute(name, value);
                                } else {
                                    this.domNode.removeAttribute(name);
                                }
                            } else {
                                _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), 'format', this).call(this, name, value);
                            }
                        }
                    }
                ], [
                    {
                        key: 'create',
                        value: function create(value) {
                            var node = _get(Video.__proto__ || Object.getPrototypeOf(Video), 'create', this).call(this, value);
                            node.setAttribute('frameborder', '0');
                            node.setAttribute('allowfullscreen', true);
                            node.setAttribute('src', this.sanitize(value));
                            return node;
                        }
                    },
                    {
                        key: 'formats',
                        value: function formats(domNode) {
                            return ATTRIBUTES.reduce(function(formats, attribute) {
                                if (domNode.hasAttribute(attribute)) {
                                    formats[attribute] = domNode.getAttribute(attribute);
                                }
                                return formats;
                            }, {});
                        }
                    },
                    {
                        key: 'sanitize',
                        value: function sanitize(url) {
                            return _link2.default.sanitize(url);
                        }
                    },
                    {
                        key: 'value',
                        value: function value(domNode) {
                            return domNode.getAttribute('src');
                        }
                    }
                ]);
                return Video;
            }(_block.BlockEmbed);
            Video.blotName = 'video';
            Video.className = 'ql-video';
            Video.tagName = 'IFRAME';
            exports.default = Video;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.FormulaBlot = undefined;
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _embed = __webpack_require__(35);
            var _embed2 = _interopRequireDefault(_embed);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var FormulaBlot = function(_Embed) {
                _inherits(FormulaBlot, _Embed);
                function FormulaBlot() {
                    _classCallCheck(this, FormulaBlot);
                    return _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));
                }
                _createClass(FormulaBlot, null, [
                    {
                        key: 'create',
                        value: function create(value) {
                            var node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), 'create', this).call(this, value);
                            if (typeof value === 'string') {
                                window.katex.render(value, node, {
                                    throwOnError: false,
                                    errorColor: '#f00'
                                });
                                node.setAttribute('data-value', value);
                            }
                            return node;
                        }
                    },
                    {
                        key: 'value',
                        value: function value(domNode) {
                            return domNode.getAttribute('data-value');
                        }
                    }
                ]);
                return FormulaBlot;
            }(_embed2.default);
            FormulaBlot.blotName = 'formula';
            FormulaBlot.className = 'ql-formula';
            FormulaBlot.tagName = 'SPAN';
            var Formula = function(_Module) {
                _inherits(Formula, _Module);
                _createClass(Formula, null, [
                    {
                        key: 'register',
                        value: function register() {
                            _quill2.default.register(FormulaBlot, true);
                        }
                    }
                ]);
                function Formula() {
                    _classCallCheck(this, Formula);
                    var _this2 = _possibleConstructorReturn(this, (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this));
                    if (window.katex == null) {
                        throw new Error('Formula module requires KaTeX.');
                    }
                    return _this2;
                }
                return Formula;
            }(_module2.default);
            exports.FormulaBlot = FormulaBlot;
            exports.default = Formula;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.CodeToken = exports.CodeBlock = undefined;
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var SyntaxCodeBlock = function(_CodeBlock) {
                _inherits(SyntaxCodeBlock, _CodeBlock);
                function SyntaxCodeBlock() {
                    _classCallCheck(this, SyntaxCodeBlock);
                    return _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));
                }
                _createClass(SyntaxCodeBlock, [
                    {
                        key: 'replaceWith',
                        value: function replaceWith(block) {
                            this.domNode.textContent = this.domNode.textContent;
                            this.attach();
                            _get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), 'replaceWith', this).call(this, block);
                        }
                    },
                    {
                        key: 'highlight',
                        value: function highlight(_highlight) {
                            var text = this.domNode.textContent;
                            if (this.cachedText !== text) {
                                if (text.trim().length > 0 || this.cachedText == null) {
                                    this.domNode.innerHTML = _highlight(text);
                                    this.domNode.normalize();
                                    this.attach();
                                }
                                this.cachedText = text;
                            }
                        }
                    }
                ]);
                return SyntaxCodeBlock;
            }(_code2.default);
            SyntaxCodeBlock.className = 'ql-syntax';
            var CodeToken = new _parchment2.default.Attributor.Class('token', 'hljs', {
                scope: _parchment2.default.Scope.INLINE
            });
            var Syntax = function(_Module) {
                _inherits(Syntax, _Module);
                _createClass(Syntax, null, [
                    {
                        key: 'register',
                        value: function register() {
                            _quill2.default.register(CodeToken, true);
                            _quill2.default.register(SyntaxCodeBlock, true);
                        }
                    }
                ]);
                function Syntax(quill, options) {
                    _classCallCheck(this, Syntax);
                    var _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));
                    if (typeof _this2.options.highlight !== 'function') {
                        throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');
                    }
                    var timer = null;
                    _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function() {
                        clearTimeout(timer);
                        timer = setTimeout(function() {
                            _this2.highlight();
                            timer = null;
                        }, _this2.options.interval);
                    });
                    _this2.highlight();
                    return _this2;
                }
                _createClass(Syntax, [
                    {
                        key: 'highlight',
                        value: function highlight() {
                            var _this3 = this;
                            if (this.quill.selection.composing) return;
                            this.quill.update(_quill2.default.sources.USER);
                            var range = this.quill.getSelection();
                            this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function(code) {
                                code.highlight(_this3.options.highlight);
                            });
                            this.quill.update(_quill2.default.sources.SILENT);
                            if (range != null) {
                                this.quill.setSelection(range, _quill2.default.sources.SILENT);
                            }
                        }
                    }
                ]);
                return Syntax;
            }(_module2.default);
            Syntax.DEFAULTS = {
                highlight: function() {
                    if (window.hljs == null) return null;
                    return function(text) {
                        var result = window.hljs.highlightAuto(text);
                        return result.value;
                    };
                }(),
                interval: 1000
            };
            exports.CodeBlock = SyntaxCodeBlock;
            exports.CodeToken = CodeToken;
            exports.default = Syntax;
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <g class=\"ql-fill ql-color-label\"> <polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\"5.5 13 9 5 12.5 13\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=4 y=5></rect> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=11 y=5></rect> <path class=\"ql-even ql-fill ql-stroke\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\"ql-even ql-fill ql-stroke\" d=M14,8c0,4.031-3,5-3,5></path> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-color-label ql-stroke ql-transparent\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\"5.5 11 9 3 12.5 11\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"></polygon> <line class=\"ql-stroke ql-fill\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"></polygon> <line class=\"ql-stroke ql-fill\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\"translate(24 18) rotate(-180)\"/> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"></polyline> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"></polyline> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"5 7 5 11 3 9 5 7\"></polyline> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\"ql-even ql-stroke\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\"ql-even ql-stroke\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\"ql-stroke ql-thin\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\"ql-stroke ql-thin\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\"ql-stroke ql-thin\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\"3 4 4 5 6 3\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\"3 14 4 15 6 13\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"3 9 4 10 6 8\"></polyline> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-stroke ql-thin\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>";
        /***/ },
        function(module1, exports) {
            module1.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=ql-stroke points=\"7 11 9 13 11 11 7 11\"></polygon> <polygon class=ql-stroke points=\"7 7 9 5 11 7 7 7\"></polygon> </svg>";
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = exports.BubbleTooltip = undefined;
            var _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined;
                    }
                    return getter.call(receiver);
                }
            };
            var _createClass = function() {
                function defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _emitter = __webpack_require__(8);
            var _emitter2 = _interopRequireDefault(_emitter);
            var _base = __webpack_require__(43);
            var _base2 = _interopRequireDefault(_base);
            var _selection = __webpack_require__(15);
            var _icons = __webpack_require__(41);
            var _icons2 = _interopRequireDefault(_icons);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn(self1, call) {
                if (!self1) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self1;
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var TOOLBAR_CONFIG = [
                [
                    'bold',
                    'italic',
                    'link'
                ],
                [
                    {
                        header: 1
                    },
                    {
                        header: 2
                    },
                    'blockquote'
                ]
            ];
            var BubbleTheme = function(_BaseTheme) {
                _inherits(BubbleTheme, _BaseTheme);
                function BubbleTheme(quill, options) {
                    _classCallCheck(this, BubbleTheme);
                    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
                        options.modules.toolbar.container = TOOLBAR_CONFIG;
                    }
                    var _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));
                    _this.quill.container.classList.add('ql-bubble');
                    return _this;
                }
                _createClass(BubbleTheme, [
                    {
                        key: 'extendToolbar',
                        value: function extendToolbar(toolbar) {
                            this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
                            this.tooltip.root.appendChild(toolbar.container);
                            this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
                            this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
                        }
                    }
                ]);
                return BubbleTheme;
            }(_base2.default);
            BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
                modules: {
                    toolbar: {
                        handlers: {
                            link: function link(value) {
                                if (!value) {
                                    this.quill.format('link', false);
                                } else {
                                    this.quill.theme.tooltip.edit();
                                }
                            }
                        }
                    }
                }
            });
            var BubbleTooltip = function(_BaseTooltip) {
                _inherits(BubbleTooltip, _BaseTooltip);
                function BubbleTooltip(quill, bounds) {
                    _classCallCheck(this, BubbleTooltip);
                    var _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));
                    _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function(type, range, oldRange, source) {
                        if (type !== _emitter2.default.events.SELECTION_CHANGE) return;
                        if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {
                            _this2.show();
                            // Lock our width so we will expand beyond our offsetParent boundaries
                            _this2.root.style.left = '0px';
                            _this2.root.style.width = '';
                            _this2.root.style.width = _this2.root.offsetWidth + 'px';
                            var lines = _this2.quill.getLines(range.index, range.length);
                            if (lines.length === 1) {
                                _this2.position(_this2.quill.getBounds(range));
                            } else {
                                var lastLine = lines[lines.length - 1];
                                var index = _this2.quill.getIndex(lastLine);
                                var length = Math.min(lastLine.length() - 1, range.index + range.length - index);
                                var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));
                                _this2.position(_bounds);
                            }
                        } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {
                            _this2.hide();
                        }
                    });
                    return _this2;
                }
                _createClass(BubbleTooltip, [
                    {
                        key: 'listen',
                        value: function listen() {
                            var _this3 = this;
                            _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'listen', this).call(this);
                            this.root.querySelector('.ql-close').addEventListener('click', function() {
                                _this3.root.classList.remove('ql-editing');
                            });
                            this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function() {
                                // Let selection be restored by toolbar handlers before repositioning
                                setTimeout(function() {
                                    if (_this3.root.classList.contains('ql-hidden')) return;
                                    var range = _this3.quill.getSelection();
                                    if (range != null) {
                                        _this3.position(_this3.quill.getBounds(range));
                                    }
                                }, 1);
                            });
                        }
                    },
                    {
                        key: 'cancel',
                        value: function cancel() {
                            this.show();
                        }
                    },
                    {
                        key: 'position',
                        value: function position(reference) {
                            var shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'position', this).call(this, reference);
                            var arrow = this.root.querySelector('.ql-tooltip-arrow');
                            arrow.style.marginLeft = '';
                            if (shift === 0) return shift;
                            arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + 'px';
                        }
                    }
                ]);
                return BubbleTooltip;
            }(_base.BaseTooltip);
            BubbleTooltip.TEMPLATE = [
                '<span class="ql-tooltip-arrow"></span>',
                '<div class="ql-tooltip-editor">',
                '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">',
                '<a class="ql-close"></a>',
                '</div>'
            ].join('');
            exports.BubbleTooltip = BubbleTooltip;
            exports.default = BubbleTheme;
        /***/ },
        function(module1, exports, __webpack_require__) {
            module1.exports = __webpack_require__(63);
        /***/ }
    ])["default"];
});
}}),
"[project]/node_modules/react-quill/lib/index.js [client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
/*
React-Quill
https://github.com/zenoamaro/react-quill
*/ var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = this && this.__spreadArrays || function() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
var react_1 = __importDefault(__turbopack_require__("[project]/node_modules/react/index.js [client] (ecmascript)"));
var react_dom_1 = __importDefault(__turbopack_require__("[project]/node_modules/react-dom/index.js [client] (ecmascript)"));
var isEqual_1 = __importDefault(__turbopack_require__("[project]/node_modules/lodash/isEqual.js [client] (ecmascript)"));
var quill_1 = __importDefault(__turbopack_require__("[project]/node_modules/react-quill/node_modules/quill/dist/quill.js [client] (ecmascript)"));
var ReactQuill = function(_super) {
    __extends(ReactQuill, _super);
    function ReactQuill(props) {
        var _this = _super.call(this, props) || this;
        /*
        Changing one of these props should cause a full re-render and a
        re-instantiation of the Quill editor.
        */ _this.dirtyProps = [
            'modules',
            'formats',
            'bounds',
            'theme',
            'children'
        ];
        /*
        Changing one of these props should cause a regular update. These are mostly
        props that act on the container, rather than the quillized editing area.
        */ _this.cleanProps = [
            'id',
            'className',
            'style',
            'placeholder',
            'tabIndex',
            'onChange',
            'onChangeSelection',
            'onFocus',
            'onBlur',
            'onKeyPress',
            'onKeyDown',
            'onKeyUp'
        ];
        _this.state = {
            generation: 0
        };
        /*
        Tracks the internal selection of the Quill editor
        */ _this.selection = null;
        _this.onEditorChange = function(eventName, rangeOrDelta, oldRangeOrDelta, source) {
            var _a, _b, _c, _d;
            if (eventName === 'text-change') {
                (_b = (_a = _this).onEditorChangeText) === null || _b === void 0 ? void 0 : _b.call(_a, _this.editor.root.innerHTML, rangeOrDelta, source, _this.unprivilegedEditor);
            } else if (eventName === 'selection-change') {
                (_d = (_c = _this).onEditorChangeSelection) === null || _d === void 0 ? void 0 : _d.call(_c, rangeOrDelta, source, _this.unprivilegedEditor);
            }
        };
        var value = _this.isControlled() ? props.value : props.defaultValue;
        _this.value = value !== null && value !== void 0 ? value : '';
        return _this;
    }
    ReactQuill.prototype.validateProps = function(props) {
        var _a;
        if (react_1.default.Children.count(props.children) > 1) throw new Error('The Quill editing area can only be composed of a single React element.');
        if (react_1.default.Children.count(props.children)) {
            var child = react_1.default.Children.only(props.children);
            if (((_a = child) === null || _a === void 0 ? void 0 : _a.type) === 'textarea') throw new Error('Quill does not support editing on a <textarea>. Use a <div> instead.');
        }
        if (this.lastDeltaChangeSet && props.value === this.lastDeltaChangeSet) throw new Error('You are passing the `delta` object from the `onChange` event back ' + 'as `value`. You most probably want `editor.getContents()` instead. ' + 'See: https://github.com/zenoamaro/react-quill#using-deltas');
    };
    ReactQuill.prototype.shouldComponentUpdate = function(nextProps, nextState) {
        var _this = this;
        var _a;
        this.validateProps(nextProps);
        // If the editor hasn't been instantiated yet, or the component has been
        // regenerated, we already know we should update.
        if (!this.editor || this.state.generation !== nextState.generation) {
            return true;
        }
        // Handle value changes in-place
        if ('value' in nextProps) {
            var prevContents = this.getEditorContents();
            var nextContents = (_a = nextProps.value, _a !== null && _a !== void 0 ? _a : '');
            // NOTE: Seeing that Quill is missing a way to prevent edits, we have to
            //       settle for a hybrid between controlled and uncontrolled mode. We
            //       can't prevent the change, but we'll still override content
            //       whenever `value` differs from current state.
            // NOTE: Comparing an HTML string and a Quill Delta will always trigger a
            //       change, regardless of whether they represent the same document.
            if (!this.isEqualValue(nextContents, prevContents)) {
                this.setEditorContents(this.editor, nextContents);
            }
        }
        // Handle read-only changes in-place
        if (nextProps.readOnly !== this.props.readOnly) {
            this.setEditorReadOnly(this.editor, nextProps.readOnly);
        }
        // Clean and Dirty props require a render
        return __spreadArrays(this.cleanProps, this.dirtyProps).some(function(prop) {
            return !isEqual_1.default(nextProps[prop], _this.props[prop]);
        });
    };
    ReactQuill.prototype.shouldComponentRegenerate = function(nextProps) {
        var _this = this;
        // Whenever a `dirtyProp` changes, the editor needs reinstantiation.
        return this.dirtyProps.some(function(prop) {
            return !isEqual_1.default(nextProps[prop], _this.props[prop]);
        });
    };
    ReactQuill.prototype.componentDidMount = function() {
        this.instantiateEditor();
        this.setEditorContents(this.editor, this.getEditorContents());
    };
    ReactQuill.prototype.componentWillUnmount = function() {
        this.destroyEditor();
    };
    ReactQuill.prototype.componentDidUpdate = function(prevProps, prevState) {
        var _this = this;
        // If we're changing one of the `dirtyProps`, the entire Quill Editor needs
        // to be re-instantiated. Regenerating the editor will cause the whole tree,
        // including the container, to be cleaned up and re-rendered from scratch.
        // Store the contents so they can be restored later.
        if (this.editor && this.shouldComponentRegenerate(prevProps)) {
            var delta = this.editor.getContents();
            var selection = this.editor.getSelection();
            this.regenerationSnapshot = {
                delta: delta,
                selection: selection
            };
            this.setState({
                generation: this.state.generation + 1
            });
            this.destroyEditor();
        }
        // The component has been regenerated, so it must be re-instantiated, and
        // its content must be restored to the previous values from the snapshot.
        if (this.state.generation !== prevState.generation) {
            var _a = this.regenerationSnapshot, delta = _a.delta, selection_1 = _a.selection;
            delete this.regenerationSnapshot;
            this.instantiateEditor();
            var editor_1 = this.editor;
            editor_1.setContents(delta);
            postpone(function() {
                return _this.setEditorSelection(editor_1, selection_1);
            });
        }
    };
    ReactQuill.prototype.instantiateEditor = function() {
        if (this.editor) {
            this.hookEditor(this.editor);
        } else {
            this.editor = this.createEditor(this.getEditingArea(), this.getEditorConfig());
        }
    };
    ReactQuill.prototype.destroyEditor = function() {
        if (!this.editor) return;
        this.unhookEditor(this.editor);
    };
    /*
    We consider the component to be controlled if `value` is being sent in props.
    */ ReactQuill.prototype.isControlled = function() {
        return 'value' in this.props;
    };
    ReactQuill.prototype.getEditorConfig = function() {
        return {
            bounds: this.props.bounds,
            formats: this.props.formats,
            modules: this.props.modules,
            placeholder: this.props.placeholder,
            readOnly: this.props.readOnly,
            scrollingContainer: this.props.scrollingContainer,
            tabIndex: this.props.tabIndex,
            theme: this.props.theme
        };
    };
    ReactQuill.prototype.getEditor = function() {
        if (!this.editor) throw new Error('Accessing non-instantiated editor');
        return this.editor;
    };
    /**
    Creates an editor on the given element. The editor will be passed the
    configuration, have its events bound,
    */ ReactQuill.prototype.createEditor = function(element, config) {
        var editor = new quill_1.default(element, config);
        if (config.tabIndex != null) {
            this.setEditorTabIndex(editor, config.tabIndex);
        }
        this.hookEditor(editor);
        return editor;
    };
    ReactQuill.prototype.hookEditor = function(editor) {
        // Expose the editor on change events via a weaker, unprivileged proxy
        // object that does not allow accidentally modifying editor state.
        this.unprivilegedEditor = this.makeUnprivilegedEditor(editor);
        // Using `editor-change` allows picking up silent updates, like selection
        // changes on typing.
        editor.on('editor-change', this.onEditorChange);
    };
    ReactQuill.prototype.unhookEditor = function(editor) {
        editor.off('editor-change', this.onEditorChange);
    };
    ReactQuill.prototype.getEditorContents = function() {
        return this.value;
    };
    ReactQuill.prototype.getEditorSelection = function() {
        return this.selection;
    };
    /*
    True if the value is a Delta instance or a Delta look-alike.
    */ ReactQuill.prototype.isDelta = function(value) {
        return value && value.ops;
    };
    /*
    Special comparison function that knows how to compare Deltas.
    */ ReactQuill.prototype.isEqualValue = function(value, nextValue) {
        if (this.isDelta(value) && this.isDelta(nextValue)) {
            return isEqual_1.default(value.ops, nextValue.ops);
        } else {
            return isEqual_1.default(value, nextValue);
        }
    };
    /*
    Replace the contents of the editor, but keep the previous selection hanging
    around so that the cursor won't move.
    */ ReactQuill.prototype.setEditorContents = function(editor, value) {
        var _this = this;
        this.value = value;
        var sel = this.getEditorSelection();
        if (typeof value === 'string') {
            editor.setContents(editor.clipboard.convert(value));
        } else {
            editor.setContents(value);
        }
        postpone(function() {
            return _this.setEditorSelection(editor, sel);
        });
    };
    ReactQuill.prototype.setEditorSelection = function(editor, range) {
        this.selection = range;
        if (range) {
            // Validate bounds before applying.
            var length_1 = editor.getLength();
            range.index = Math.max(0, Math.min(range.index, length_1 - 1));
            range.length = Math.max(0, Math.min(range.length, length_1 - 1 - range.index));
            editor.setSelection(range);
        }
    };
    ReactQuill.prototype.setEditorTabIndex = function(editor, tabIndex) {
        var _a, _b;
        if ((_b = (_a = editor) === null || _a === void 0 ? void 0 : _a.scroll) === null || _b === void 0 ? void 0 : _b.domNode) {
            editor.scroll.domNode.tabIndex = tabIndex;
        }
    };
    ReactQuill.prototype.setEditorReadOnly = function(editor, value) {
        if (value) {
            editor.disable();
        } else {
            editor.enable();
        }
    };
    /*
    Returns a weaker, unprivileged proxy object that only exposes read-only
    accessors found on the editor instance, without any state-modifying methods.
    */ ReactQuill.prototype.makeUnprivilegedEditor = function(editor) {
        var e = editor;
        return {
            getHTML: function() {
                return e.root.innerHTML;
            },
            getLength: e.getLength.bind(e),
            getText: e.getText.bind(e),
            getContents: e.getContents.bind(e),
            getSelection: e.getSelection.bind(e),
            getBounds: e.getBounds.bind(e)
        };
    };
    ReactQuill.prototype.getEditingArea = function() {
        if (!this.editingArea) {
            throw new Error('Instantiating on missing editing area');
        }
        var element = react_dom_1.default.findDOMNode(this.editingArea);
        if (!element) {
            throw new Error('Cannot find element for editing area');
        }
        if (element.nodeType === 3) {
            throw new Error('Editing area cannot be a text node');
        }
        return element;
    };
    /*
    Renders an editor area, unless it has been provided one to clone.
    */ ReactQuill.prototype.renderEditingArea = function() {
        var _this = this;
        var _a = this.props, children = _a.children, preserveWhitespace = _a.preserveWhitespace;
        var generation = this.state.generation;
        var properties = {
            key: generation,
            ref: function(instance) {
                _this.editingArea = instance;
            }
        };
        if (react_1.default.Children.count(children)) {
            return react_1.default.cloneElement(react_1.default.Children.only(children), properties);
        }
        return preserveWhitespace ? react_1.default.createElement("pre", __assign({}, properties)) : react_1.default.createElement("div", __assign({}, properties));
    };
    ReactQuill.prototype.render = function() {
        var _a;
        return react_1.default.createElement("div", {
            id: this.props.id,
            style: this.props.style,
            key: this.state.generation,
            className: "quill " + (_a = this.props.className, _a !== null && _a !== void 0 ? _a : ''),
            onKeyPress: this.props.onKeyPress,
            onKeyDown: this.props.onKeyDown,
            onKeyUp: this.props.onKeyUp
        }, this.renderEditingArea());
    };
    ReactQuill.prototype.onEditorChangeText = function(value, delta, source, editor) {
        var _a, _b;
        if (!this.editor) return;
        // We keep storing the same type of value as what the user gives us,
        // so that value comparisons will be more stable and predictable.
        var nextContents = this.isDelta(this.value) ? editor.getContents() : editor.getHTML();
        if (nextContents !== this.getEditorContents()) {
            // Taint this `delta` object, so we can recognize whether the user
            // is trying to send it back as `value`, preventing a likely loop.
            this.lastDeltaChangeSet = delta;
            this.value = nextContents;
            (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value, delta, source, editor);
        }
    };
    ReactQuill.prototype.onEditorChangeSelection = function(nextSelection, source, editor) {
        var _a, _b, _c, _d, _e, _f;
        if (!this.editor) return;
        var currentSelection = this.getEditorSelection();
        var hasGainedFocus = !currentSelection && nextSelection;
        var hasLostFocus = currentSelection && !nextSelection;
        if (isEqual_1.default(nextSelection, currentSelection)) return;
        this.selection = nextSelection;
        (_b = (_a = this.props).onChangeSelection) === null || _b === void 0 ? void 0 : _b.call(_a, nextSelection, source, editor);
        if (hasGainedFocus) {
            (_d = (_c = this.props).onFocus) === null || _d === void 0 ? void 0 : _d.call(_c, nextSelection, source, editor);
        } else if (hasLostFocus) {
            (_f = (_e = this.props).onBlur) === null || _f === void 0 ? void 0 : _f.call(_e, currentSelection, source, editor);
        }
    };
    ReactQuill.prototype.focus = function() {
        if (!this.editor) return;
        this.editor.focus();
    };
    ReactQuill.prototype.blur = function() {
        if (!this.editor) return;
        this.selection = null;
        this.editor.blur();
    };
    ReactQuill.displayName = 'React Quill';
    /*
    Export Quill to be able to call `register`
    */ ReactQuill.Quill = quill_1.default;
    ReactQuill.defaultProps = {
        theme: 'snow',
        modules: {},
        readOnly: false
    };
    return ReactQuill;
}(react_1.default.Component);
/*
Small helper to execute a function in the next micro-tick.
*/ function postpone(fn) {
    Promise.resolve().then(fn);
}
module.exports = ReactQuill; //# sourceMappingURL=index.js.map
}}),
}]);

//# sourceMappingURL=node_modules_99431a._.js.map