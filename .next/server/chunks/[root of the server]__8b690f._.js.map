{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/Apple/Documents/Projects/Clients/GCC%20Internal%20Tools/gcg-interview-evaluation/src/lib/supabaseServer.js"],"sourcesContent":["// lib/supabaseServer.js\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;\n\nif (!supabaseUrl || !supabaseServiceKey) {\n    throw new Error(\n        \"Supabase server configuration missing: Ensure NEXT_PUBLIC_SUPABASE_URL and SUPABASE_SERVICE_KEY are set in .env. \" +\n        \"Current values - URL: \" + (supabaseUrl || \"undefined\") + \", Service Key: \" + (supabaseServiceKey ? \"Present\" : \"Missing\")\n    );\n}\n\nexport const supabaseServer = createClient(supabaseUrl, supabaseServiceKey);"],"names":[],"mappings":"AAAA,wBAAwB;;;;AACxB;;AAEA,MAAM;AACN,MAAM;AAEN,uCAAyC;;AAKzC;AAEO,MAAM,iBAAiB,CAAA,GAAA,iJAAA,CAAA,eAAY,AAAD,EAAE,aAAa"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":["file:///Users/Apple/Documents/Projects/Clients/GCC%20Internal%20Tools/gcg-interview-evaluation/utils/dbUtils.js"],"sourcesContent":["// src/utils/dbUtils.js\nimport { supabaseServer } from \"@/lib/supabaseServer\"; // Adjusted path\n\nexport async function upsertCandidate({ fullName, email, phone, linkedin, opening }) {\n    try {\n        console.log(\"Checking for existing candidate with email:\", email);\n        const { data: existingCandidate, error: fetchError } = await supabaseServer\n            .from(\"candidates\")\n            .select(\"id\")\n            .eq(\"email\", email)\n            .single();\n\n        let userId;\n        if (fetchError && fetchError.code !== \"PGRST116\") {\n            console.error(\"Fetch existing candidate error:\", fetchError);\n            return { error: { status: 500, message: \"Error checking existing candidate\", details: fetchError.message } };\n        }\n\n        if (existingCandidate) {\n            console.log(\"Updating existing candidate with email:\", email);\n            const { data: updatedCandidate, error: updateError } = await supabaseServer\n                .from(\"candidates\")\n                .update({ full_name: fullName, phone, linkedin, opening })\n                .eq(\"email\", email)\n                .select()\n                .single();\n            if (updateError) throw updateError;\n            userId = updatedCandidate.id;\n        } else {\n            console.log(\"Inserting new candidate with data:\", { full_name: fullName, email, phone, linkedin, opening });\n            const { data: newCandidate, error: insertError } = await supabaseServer\n                .from(\"candidates\")\n                .insert([{ full_name: fullName, email, phone, linkedin, opening }])\n                .select()\n                .single();\n            if (insertError) throw insertError;\n            userId = newCandidate.id;\n        }\n        return { userId };\n    } catch (error) {\n        console.error(\"Database operation error:\", error.message);\n        return { error: { status: 500, message: \"Database operation failed\", details: error.message } };\n    }\n}\n\nexport async function upsertResponse({ userId, answers, score, resumeUrl, coverLetterUrl, resumeFileId, coverLetterFileId }) {\n    try {\n        console.log(\"Attempting to upsert response with data:\", {\n            user_id: userId,\n            answers: JSON.stringify(answers),\n            score,\n            resume_url: resumeUrl,\n            cover_letter_url: coverLetterUrl,\n            resume_file_id: resumeFileId,\n            cover_letter_file_id: coverLetterFileId,\n        });\n        const { error } = await supabaseServer\n            .from(\"responses\")\n            .upsert(\n                [\n                    {\n                        user_id: userId,\n                        answers: JSON.stringify(answers),\n                        score,\n                        resume_url: resumeUrl,\n                        cover_letter_url: coverLetterUrl,\n                        resume_file_id: resumeFileId,\n                        cover_letter_file_id: coverLetterFileId,\n                    },\n                ],\n                { onConflict: [\"user_id\"], update: [\"answers\", \"score\", \"resume_url\", \"cover_letter_url\", \"resume_file_id\", \"cover_letter_file_id\"] }\n            );\n\n        if (error) {\n            console.error(\"Response upsert error:\", error);\n            return { error: { status: 403, message: \"Failed to upsert response\", details: error.message } };\n        }\n        return {};\n    } catch (error) {\n        console.error(\"Response upsert error:\", error.message);\n        return { error: { status: 500, message: \"Response upsert failed\", details: error.message } };\n    }\n}"],"names":[],"mappings":"AAAA,uBAAuB;;;;;AACvB,4MAAuD,gBAAgB;;AAEhE,eAAe,gBAAgB,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE;IAC/E,IAAI;QACA,QAAQ,GAAG,CAAC,+CAA+C;QAC3D,MAAM,EAAE,MAAM,iBAAiB,EAAE,OAAO,UAAU,EAAE,GAAG,MAAM,qHAAA,CAAA,iBAAc,CACtE,IAAI,CAAC,cACL,MAAM,CAAC,MACP,EAAE,CAAC,SAAS,OACZ,MAAM;QAEX,IAAI;QACJ,IAAI,cAAc,WAAW,IAAI,KAAK,YAAY;YAC9C,QAAQ,KAAK,CAAC,mCAAmC;YACjD,OAAO;gBAAE,OAAO;oBAAE,QAAQ;oBAAK,SAAS;oBAAqC,SAAS,WAAW,OAAO;gBAAC;YAAE;QAC/G;QAEA,IAAI,mBAAmB;YACnB,QAAQ,GAAG,CAAC,2CAA2C;YACvD,MAAM,EAAE,MAAM,gBAAgB,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,qHAAA,CAAA,iBAAc,CACtE,IAAI,CAAC,cACL,MAAM,CAAC;gBAAE,WAAW;gBAAU;gBAAO;gBAAU;YAAQ,GACvD,EAAE,CAAC,SAAS,OACZ,MAAM,GACN,MAAM;YACX,IAAI,aAAa,MAAM;YACvB,SAAS,iBAAiB,EAAE;QAChC,OAAO;YACH,QAAQ,GAAG,CAAC,sCAAsC;gBAAE,WAAW;gBAAU;gBAAO;gBAAO;gBAAU;YAAQ;YACzG,MAAM,EAAE,MAAM,YAAY,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,qHAAA,CAAA,iBAAc,CAClE,IAAI,CAAC,cACL,MAAM,CAAC;gBAAC;oBAAE,WAAW;oBAAU;oBAAO;oBAAO;oBAAU;gBAAQ;aAAE,EACjE,MAAM,GACN,MAAM;YACX,IAAI,aAAa,MAAM;YACvB,SAAS,aAAa,EAAE;QAC5B;QACA,OAAO;YAAE;QAAO;IACpB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B,MAAM,OAAO;QACxD,OAAO;YAAE,OAAO;gBAAE,QAAQ;gBAAK,SAAS;gBAA6B,SAAS,MAAM,OAAO;YAAC;QAAE;IAClG;AACJ;AAEO,eAAe,eAAe,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,cAAc,EAAE,YAAY,EAAE,iBAAiB,EAAE;IACvH,IAAI;QACA,QAAQ,GAAG,CAAC,4CAA4C;YACpD,SAAS;YACT,SAAS,KAAK,SAAS,CAAC;YACxB;YACA,YAAY;YACZ,kBAAkB;YAClB,gBAAgB;YAChB,sBAAsB;QAC1B;QACA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,qHAAA,CAAA,iBAAc,CACjC,IAAI,CAAC,aACL,MAAM,CACH;YACI;gBACI,SAAS;gBACT,SAAS,KAAK,SAAS,CAAC;gBACxB;gBACA,YAAY;gBACZ,kBAAkB;gBAClB,gBAAgB;gBAChB,sBAAsB;YAC1B;SACH,EACD;YAAE,YAAY;gBAAC;aAAU;YAAE,QAAQ;gBAAC;gBAAW;gBAAS;gBAAc;gBAAoB;gBAAkB;aAAuB;QAAC;QAG5I,IAAI,OAAO;YACP,QAAQ,KAAK,CAAC,0BAA0B;YACxC,OAAO;gBAAE,OAAO;oBAAE,QAAQ;oBAAK,SAAS;oBAA6B,SAAS,MAAM,OAAO;gBAAC;YAAE;QAClG;QACA,OAAO,CAAC;IACZ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,0BAA0B,MAAM,OAAO;QACrD,OAAO;YAAE,OAAO;gBAAE,QAAQ;gBAAK,SAAS;gBAA0B,SAAS,MAAM,OAAO;YAAC;QAAE;IAC/F;AACJ"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///Users/Apple/Documents/Projects/Clients/GCC%20Internal%20Tools/gcg-interview-evaluation/utils/scoreUtils.js"],"sourcesContent":["// src/utils/scoreUtils.js\nexport function calculateScore(answers, questions = []) {\n    let totalScore = 0;\n    let maxPossibleScore = 0;\n\n    answers.forEach((answerArray, idx) => {\n        const question = questions[idx];\n        const answer = answerArray;\n\n        if (question?.points) {\n            if (\"base\" in question.points) {\n                // Multi-select logic\n                const max = question.points.max || 10; // Default max if not specified\n                maxPossibleScore += max;\n                if (answer.includes(\"None\")) {\n                    totalScore += 0;\n                } else {\n                    const count = answer.length;\n                    const base = question.points.base || 5;\n                    const extra = question.points.extra || 2;\n                    totalScore += Math.min(base + (count - 1) * extra, max);\n                }\n            } else {\n                // Single-select logic\n                const maxOptionScore = Math.max(\n                    ...Object.values(question.points).map(Number).filter((n) => !isNaN(n))\n                ) || 10; // Default to 10 if no valid scores\n                maxPossibleScore += maxOptionScore;\n                const selectedAnswer = answer[0];\n                if (selectedAnswer && selectedAnswer in question.points) {\n                    totalScore += question.points[selectedAnswer];\n                }\n            }\n        } else {\n            console.warn(`No points defined for question ${idx + 1} (${questions[idx]?.text || \"unknown\"}) - skipping scoring`);\n        }\n    });\n\n    return { totalScore: Math.min(totalScore, maxPossibleScore), maxPossibleScore };\n}"],"names":[],"mappings":"AAAA,0BAA0B;;;;AACnB,SAAS,eAAe,OAAO,EAAE,YAAY,EAAE;IAClD,IAAI,aAAa;IACjB,IAAI,mBAAmB;IAEvB,QAAQ,OAAO,CAAC,CAAC,aAAa;QAC1B,MAAM,WAAW,SAAS,CAAC,IAAI;QAC/B,MAAM,SAAS;QAEf,IAAI,UAAU,QAAQ;YAClB,IAAI,UAAU,SAAS,MAAM,EAAE;gBAC3B,qBAAqB;gBACrB,MAAM,MAAM,SAAS,MAAM,CAAC,GAAG,IAAI,IAAI,+BAA+B;gBACtE,oBAAoB;gBACpB,IAAI,OAAO,QAAQ,CAAC,SAAS;oBACzB,cAAc;gBAClB,OAAO;oBACH,MAAM,QAAQ,OAAO,MAAM;oBAC3B,MAAM,OAAO,SAAS,MAAM,CAAC,IAAI,IAAI;oBACrC,MAAM,QAAQ,SAAS,MAAM,CAAC,KAAK,IAAI;oBACvC,cAAc,KAAK,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,OAAO;gBACvD;YACJ,OAAO;gBACH,sBAAsB;gBACtB,MAAM,iBAAiB,KAAK,GAAG,IACxB,OAAO,MAAM,CAAC,SAAS,MAAM,EAAE,GAAG,CAAC,QAAQ,MAAM,CAAC,CAAC,IAAM,CAAC,MAAM,QAClE,IAAI,mCAAmC;gBAC5C,oBAAoB;gBACpB,MAAM,iBAAiB,MAAM,CAAC,EAAE;gBAChC,IAAI,kBAAkB,kBAAkB,SAAS,MAAM,EAAE;oBACrD,cAAc,SAAS,MAAM,CAAC,eAAe;gBACjD;YACJ;QACJ,OAAO;YACH,QAAQ,IAAI,CAAC,CAAC,+BAA+B,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,CAAC,IAAI,EAAE,QAAQ,UAAU,oBAAoB,CAAC;QACtH;IACJ;IAEA,OAAO;QAAE,YAAY,KAAK,GAAG,CAAC,YAAY;QAAmB;IAAiB;AAClF"}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":["file:///Users/Apple/Documents/Projects/Clients/GCC%20Internal%20Tools/gcg-interview-evaluation/src/pages/api/submit.js"],"sourcesContent":["// src/pages/api/submit.js\nimport { supabaseServer } from \"@/lib/supabaseServer\";\nimport { upsertCandidate, upsertResponse } from \"../../../utils/dbUtils\";\nimport { calculateScore } from \"../../../utils/scoreUtils\";\n\nexport const config = {\n    api: {\n        bodyParser: {\n            sizeLimit: \"5mb\",\n        },\n    },\n};\n\nexport default async function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({ error: \"Method not allowed\" });\n    }\n\n    try {\n        const { fullName, email, phone, linkedin, answers, resume, coverLetter, opening } = req.body;\n        console.log(\"Received data:\", {\n            fullName,\n            email,\n            phone,\n            linkedin,\n            opening,\n            answers,\n            resume: resume ? \"present\" : \"none\",\n            coverLetter: coverLetter ? \"present\" : \"none\",\n        });\n\n        if (!fullName || !email || !phone || !linkedin || !opening) {\n            return res.status(400).json({ error: \"All fields (full name, email, phone, LinkedIn, and opening) are required\" });\n        }\n\n        // Fetch questions for scoring\n        const { data: questions, error: questionsError } = await supabaseServer\n            .from(\"interview_questions\")\n            .select(\"*\")\n            .order(\"order\", { ascending: true });\n        if (questionsError) {\n            console.error(\"Error fetching questions:\", questionsError);\n            return res.status(500).json({ error: \"Error fetching questions\", details: questionsError.message });\n        }\n\n        const { userId, error: candidateError } = await upsertCandidate({ fullName, email, phone, linkedin, opening });\n        if (candidateError) {\n            return res.status(candidateError.status).json({ error: candidateError.message, details: candidateError.details });\n        }\n\n        const score = calculateScore(answers, questions);\n\n        // Save to Supabase first, without Drive URLs yet\n        const { error: responseError } = await upsertResponse({\n            userId,\n            answers,\n            score: score.totalScore,\n            resumeUrl: null, // Will updated later\n            coverLetterUrl: null,\n            resumeFileId: null,\n            coverLetterFileId: null,\n        });\n        if (responseError) {\n            return res.status(responseError.status).json({ error: responseError.message, details: responseError.details });\n        }\n\n        // Trigger background task via Supabase Edge Function\n        const { error: invokeError } = await supabaseServer.functions.invoke(\"process-submission\", {\n            body: JSON.stringify({\n                userId,\n                fullName,\n                email,\n                phone,\n                linkedin,\n                opening,\n                answers,\n                resume,\n                coverLetter,\n                score,\n                questions,\n            }),\n        });\n        if (invokeError) {\n            console.error(\"Error invoking background task:\", invokeError);\n            // Don’t fail the request—background task can retry\n        }\n\n        return res.status(200).json({ message: \"Submission successful, processing in background\", score: score.totalScore });\n    } catch (error) {\n        console.error(\"Submission error:\", error.message);\n        return res.status(500).json({ error: \"Internal server error\", details: error.message });\n    }\n}"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAC1B;AACA;AACA;;;;AAEO,MAAM,SAAS;IAClB,KAAK;QACD,YAAY;YACR,WAAW;QACf;IACJ;AACJ;AAEe,eAAe,QAAQ,GAAG,EAAE,GAAG;IAC1C,IAAI,IAAI,MAAM,KAAK,QAAQ;QACvB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAqB;IAC9D;IAEA,IAAI;QACA,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,IAAI,IAAI;QAC5F,QAAQ,GAAG,CAAC,kBAAkB;YAC1B;YACA;YACA;YACA;YACA;YACA;YACA,QAAQ,SAAS,YAAY;YAC7B,aAAa,cAAc,YAAY;QAC3C;QAEA,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,SAAS;YACxD,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAA2E;QACpH;QAEA,8BAA8B;QAC9B,MAAM,EAAE,MAAM,SAAS,EAAE,OAAO,cAAc,EAAE,GAAG,MAAM,qHAAA,CAAA,iBAAc,CAClE,IAAI,CAAC,uBACL,MAAM,CAAC,KACP,KAAK,CAAC,SAAS;YAAE,WAAW;QAAK;QACtC,IAAI,gBAAgB;YAChB,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;gBAA4B,SAAS,eAAe,OAAO;YAAC;QACrG;QAEA,MAAM,EAAE,MAAM,EAAE,OAAO,cAAc,EAAE,GAAG,MAAM,CAAA,GAAA,yGAAA,CAAA,kBAAe,AAAD,EAAE;YAAE;YAAU;YAAO;YAAO;YAAU;QAAQ;QAC5G,IAAI,gBAAgB;YAChB,OAAO,IAAI,MAAM,CAAC,eAAe,MAAM,EAAE,IAAI,CAAC;gBAAE,OAAO,eAAe,OAAO;gBAAE,SAAS,eAAe,OAAO;YAAC;QACnH;QAEA,MAAM,QAAQ,CAAA,GAAA,4GAAA,CAAA,iBAAc,AAAD,EAAE,SAAS;QAEtC,iDAAiD;QACjD,MAAM,EAAE,OAAO,aAAa,EAAE,GAAG,MAAM,CAAA,GAAA,yGAAA,CAAA,iBAAc,AAAD,EAAE;YAClD;YACA;YACA,OAAO,MAAM,UAAU;YACvB,WAAW;YACX,gBAAgB;YAChB,cAAc;YACd,mBAAmB;QACvB;QACA,IAAI,eAAe;YACf,OAAO,IAAI,MAAM,CAAC,cAAc,MAAM,EAAE,IAAI,CAAC;gBAAE,OAAO,cAAc,OAAO;gBAAE,SAAS,cAAc,OAAO;YAAC;QAChH;QAEA,qDAAqD;QACrD,MAAM,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,qHAAA,CAAA,iBAAc,CAAC,SAAS,CAAC,MAAM,CAAC,sBAAsB;YACvF,MAAM,KAAK,SAAS,CAAC;gBACjB;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;YACJ;QACJ;QACA,IAAI,aAAa;YACb,QAAQ,KAAK,CAAC,mCAAmC;QACjD,mDAAmD;QACvD;QAEA,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,SAAS;YAAmD,OAAO,MAAM,UAAU;QAAC;IACtH,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,qBAAqB,MAAM,OAAO;QAChD,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;YAAyB,SAAS,MAAM,OAAO;QAAC;IACzF;AACJ"}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 335, "column": 0}, "map": {"version":3,"sources":["file:///Users/Apple/Documents/Projects/Clients/GCC%20Internal%20Tools/gcg-interview-evaluation/node_modules/next/dist/src/server/route-modules/pages-api/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/pages-api/module.js')\n} else {\n  if (process.env.NODE_ENV === 'development') {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.dev.js')\n  } else if (process.env.TURBOPACK) {\n    module.exports = require('next/dist/compiled/next-server/pages-api-turbo.runtime.prod.js')\n  } else {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.prod.js')\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,QAAQ,KAAK,WAAe;QAC1CH,OAAOC,OAAO,GAAGC,QAAQ;IAC3B,OAAO,IAAIL,QAAQC,GAAG,CAACM,SAAS,EAAE;;IAIlC;AACF","ignoreList":[0]}},
    {"offset": {"line": 344, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///Users/Apple/Documents/Projects/Clients/GCC%20Internal%20Tools/gcg-interview-evaluation/node_modules/next/dist/src/server/route-kind.ts"],"sourcesContent":["export const enum RouteKind {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `IMAGE` represents all the images that are generated by `next/image`.\n   */\n  IMAGE = 'IMAGE',\n}\n"],"names":["RouteKind"],"mappings":";;;AAAO,IAAWA,YAAAA,WAAAA,GAAAA,SAAAA,SAAAA;IAChB;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;IAED;;GAEC,GAAA,SAAA,CAAA,YAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,WAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,YAAA,GAAA;IAGD;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;WAtBeA;MAwBjB","ignoreList":[0]}},
    {"offset": {"line": 373, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 379, "column": 0}, "map": {"version":3,"sources":["file:///Users/Apple/Documents/Projects/Clients/GCC%20Internal%20Tools/gcg-interview-evaluation/node_modules/next/dist/src/build/templates/helpers.ts"],"sourcesContent":["/**\n * Hoists a name from a module or promised module.\n *\n * @param module the module to hoist the name from\n * @param name the name to hoist\n * @returns the value on the module (or promised module)\n */\nexport function hoist(module: any, name: string) {\n  // If the name is available in the module, return it.\n  if (name in module) {\n    return module[name]\n  }\n\n  // If a property called `then` exists, assume it's a promise and\n  // return a promise that resolves to the name.\n  if ('then' in module && typeof module.then === 'function') {\n    return module.then((mod: any) => hoist(mod, name))\n  }\n\n  // If we're trying to hoise the default export, and the module is a function,\n  // return the module itself.\n  if (typeof module === 'function' && name === 'default') {\n    return module\n  }\n\n  // Otherwise, return undefined.\n  return undefined\n}\n"],"names":["hoist","module","name","then","mod","undefined"],"mappings":"AAAA;;;;;;CAMC,GACD;;;AAAO,SAASA,MAAMC,MAAW,EAAEC,IAAY;IAC7C,qDAAqD;IACrD,IAAIA,QAAQD,QAAQ;QAClB,OAAOA,MAAM,CAACC,KAAK;IACrB;IAEA,gEAAgE;IAChE,8CAA8C;IAC9C,IAAI,UAAUD,UAAU,OAAOA,OAAOE,IAAI,KAAK,YAAY;QACzD,OAAOF,OAAOE,IAAI,CAAC,CAACC,MAAaJ,MAAMI,KAAKF;IAC9C;IAEA,6EAA6E;IAC7E,4BAA4B;IAC5B,IAAI,OAAOD,WAAW,cAAcC,SAAS,WAAW;QACtD,OAAOD;IACT;IAEA,+BAA+B;IAC/B,OAAOI;AACT","ignoreList":[0]}},
    {"offset": {"line": 406, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 412, "column": 0}, "map": {"version":3,"sources":["file:///Users/Apple/Documents/Projects/Clients/GCC%20Internal%20Tools/gcg-interview-evaluation/node_modules/next/dist/src/build/templates/pages-api.ts"],"sourcesContent":["import { PagesAPIRouteModule } from '../../server/route-modules/pages-api/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\n\nimport { hoist } from './helpers'\n\n// Import the userland code.\nimport * as userland from 'VAR_USERLAND'\n\n// Re-export the handler (should be the default export).\nexport default hoist(userland, 'default')\n\n// Re-export config.\nexport const config = hoist(userland, 'config')\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new PagesAPIRouteModule({\n  definition: {\n    kind: RouteKind.PAGES_API,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n  },\n  userland,\n})\n"],"names":["PagesAPIRouteModule","RouteKind","hoist","userland","config","routeModule","definition","kind","PAGES_API","page","pathname","bundlePath","filename"],"mappings":";;;;;AAAA,SAASA,mBAAmB,QAAQ,uDAAsD;AAC1F,SAASC,SAAS,QAAQ,0BAAyB;AAEnD,SAASC,KAAK,QAAQ,YAAW;AAEjC,4BAA4B;AAC5B,YAAYC,cAAc,eAAc;;;;;yMAGzBD,QAAAA,EAAMC,wHAAU,WAAU;AAGlC,MAAMC,2KAASF,QAAAA,EAAMC,wHAAU,UAAS;AAGxC,MAAME,cAAc,qMAAIL,sBAAAA,CAAoB;IACjDM,YAAY;QACVC,8JAAMN,YAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACV,2CAA2C;QAC3CC,YAAY;QACZC,UAAU;IACZ;cACAT;AACF,GAAE","ignoreList":[0]}},
    {"offset": {"line": 439, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}