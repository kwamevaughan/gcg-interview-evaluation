/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

"use strict";var e=require("lexical");function r(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var t=r((function(e){const r=new URL("https://lexical.dev/docs/error"),t=new URLSearchParams;t.append("code",e);for(let e=1;e<arguments.length;e++)t.append("v",arguments[e]);throw r.search=t.toString(),Error(`Minified Lexical error #${e}; visit ${r.toString()} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}));class n extends e.ElementNode{static getType(){return"overflow"}static clone(e){return new n(e.__key)}static importJSON(e){return o().updateFromJSON(e)}static importDOM(){return null}createDOM(e){const r=document.createElement("span"),t=e.theme.characterLimit;return"string"==typeof t&&(r.className=t),r}updateDOM(e,r){return!1}insertNewAfter(e,r=!0){return this.getParentOrThrow().insertNewAfter(e,r)}excludeFromCopy(){return!0}static transform(){return e=>{a(e)||t(204),e.isEmpty()&&e.remove()}}}function o(){return e.$applyNodeReplacement(new n)}function a(e){return e instanceof n}exports.$createOverflowNode=o,exports.$isOverflowNode=a,exports.OverflowNode=n;
