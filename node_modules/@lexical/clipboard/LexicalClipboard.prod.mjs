/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

import{$generateHtmlFromNodes as t,$generateNodesFromDOM as e}from"@lexical/html";import{$addNodeStyle as n,$sliceSelectedTextNodeContent as r}from"@lexical/selection";import{objectKlassEquals as o}from"@lexical/utils";import{$isRangeSelection as l,$getSelection as i,$createTabNode as s,SELECTION_INSERT_CLIPBOARD_NODES_COMMAND as c,$getRoot as a,$parseSerializedNode as u,$isTextNode as d,getDOMSelection as f,COPY_COMMAND as p,COMMAND_PRIORITY_CRITICAL as h,isSelectionWithinEditor as m,$getEditor as g,$isElementNode as x,$cloneWithProperties as w}from"lexical";function y(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var T=y((function(t){const e=new URL("https://lexical.dev/docs/error"),n=new URLSearchParams;n.append("code",t);for(let t=1;t<arguments.length;t++)n.append("v",arguments[t]);throw e.search=n.toString(),Error(`Minified Lexical error #${t}; visit ${e.toString()} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}));function v(e,n=i()){return null==n&&T(166),l(n)&&n.isCollapsed()||0===n.getNodes().length?"":t(e,n)}function C(t,e=i()){return null==e&&T(166),l(e)&&e.isCollapsed()||0===e.getNodes().length?null:JSON.stringify(R(t,e))}function D(t,e){const n=t.getData("text/plain")||t.getData("text/uri-list");null!=n&&e.insertRawText(n)}function N(t,n,r){const o=t.getData("application/x-lexical-editor");if(o)try{const t=JSON.parse(o);if(t.namespace===r._config.namespace&&Array.isArray(t.nodes)){return S(r,_(t.nodes),n)}}catch(t){}const c=t.getData("text/html"),a=t.getData("text/plain");if(c&&a!==c)try{const t=(new DOMParser).parseFromString(function(t){if(window.trustedTypes&&window.trustedTypes.createPolicy){return window.trustedTypes.createPolicy("lexical",{createHTML:t=>t}).createHTML(t)}return t}(c),"text/html");return S(r,e(r,t),n)}catch(t){}const u=a||t.getData("text/uri-list");if(null!=u)if(l(n)){const t=u.split(/(\r?\n|\t)/);""===t[t.length-1]&&t.pop();for(let e=0;e<t.length;e++){const n=i();if(l(n)){const r=t[e];"\n"===r||"\r\n"===r?n.insertParagraph():"\t"===r?n.insertNodes([s()]):n.insertText(r)}}}else n.insertRawText(u)}function S(t,e,n){t.dispatchCommand(c,{nodes:e,selection:n})||n.insertNodes(e)}function P(t,e,n,o=[]){let l=null===e||n.isSelected(e);const i=x(n)&&n.excludeFromCopy("html");let s=n;if(null!==e){let t=w(n);t=d(t)&&null!==e?r(e,t):t,s=t}const c=x(s)?s.getChildren():[],a=function(t){const e=t.exportJSON(),n=t.constructor;if(e.type!==n.getType()&&T(58,n.name),x(t)){const t=e.children;Array.isArray(t)||T(59,n.name)}return e}(s);if(d(s)){const t=s.__text;t.length>0?a.text=t:l=!1}for(let r=0;r<c.length;r++){const o=c[r],i=P(t,e,o,a.children);!l&&x(n)&&i&&n.extractWithChild(o,e,"clone")&&(l=!0)}if(l&&!i)o.push(a);else if(Array.isArray(a.children))for(let t=0;t<a.children.length;t++){const e=a.children[t];o.push(e)}return l}function R(t,e){const n=[],r=a().getChildren();for(let o=0;o<r.length;o++){P(t,e,r[o],n)}return{namespace:t._config.namespace,nodes:n}}function _(t){const e=[];for(let r=0;r<t.length;r++){const o=t[r],l=u(o);d(l)&&n(l),e.push(l)}return e}let A=null;async function O(t,e,n){if(null!==A)return!1;if(null!==e)return new Promise(((r,o)=>{t.update((()=>{r(E(t,e,n))}))}));const r=t.getRootElement(),l=t._window||window,i=window.document,s=f(l);if(null===r||null===s)return!1;const c=i.createElement("span");c.style.cssText="position: fixed; top: -1000px;",c.append(i.createTextNode("#")),r.append(c);const a=new Range;return a.setStart(c,0),a.setEnd(c,1),s.removeAllRanges(),s.addRange(a),new Promise(((e,r)=>{const l=t.registerCommand(p,(r=>(o(r,ClipboardEvent)&&(l(),null!==A&&(window.clearTimeout(A),A=null),e(E(t,r,n))),!0)),h);A=window.setTimeout((()=>{l(),A=null,e(!1)}),50),i.execCommand("copy"),c.remove()}))}function E(t,e,n){if(void 0===n){const e=f(t._window);if(!e)return!1;const r=e.anchorNode,o=e.focusNode;if(null!==r&&null!==o&&!m(t,r,o))return!1;const l=i();if(null===l)return!1;n=M(l)}e.preventDefault();const r=e.clipboardData;return null!==r&&(b(r,n),!0)}const L=[["text/html",v],["application/x-lexical-editor",C]];function M(t=i()){const e={"text/plain":t?t.getTextContent():""};if(t){const n=g();for(const[r,o]of L){const l=o(n,t);null!==l&&(e[r]=l)}}return e}function b(t,e){for(const n in e){const r=e[n];void 0!==r&&t.setData(n,r)}}export{R as $generateJSONFromSelectedNodes,_ as $generateNodesFromSerializedNodes,M as $getClipboardDataFromSelection,v as $getHtmlContent,C as $getLexicalContent,D as $insertDataTransferForPlainText,N as $insertDataTransferForRichText,S as $insertGeneratedNodes,O as copyToClipboard,b as setLexicalClipboardDataTransfer};
